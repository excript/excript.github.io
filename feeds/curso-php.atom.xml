<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>eXcript - curso php</title><link href="http://excript.com/" rel="alternate"></link><link href="http://feeds.excript.com/feeds/curso-php.atom.xml" rel="self"></link><id>http://excript.com/</id><updated>2016-06-16T01:00:00-03:00</updated><subtitle></subtitle><entry><title>Implementando Comportamentos de Classe com PHP</title><link href="http://excript.com/php/implementando-funcionalidades-classe-php.html" rel="alternate"></link><published>2016-06-16T01:00:00-03:00</published><updated>2016-06-16T01:00:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-16:/php/implementando-funcionalidades-classe-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a implementar funcionalidades em nossas classes em PHP, bem como a forma em que devemos estruturas nossas classes.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="implementando-os-comportamentos"&gt;
&lt;h2&gt;IMPLEMENTANDO OS COMPORTAMENTOS&lt;/h2&gt;
&lt;p&gt;Todo objeto possui propriedades e todo objeto pode desempenhar alguma tarefa. É comum que um objeto desempenhe ações relacionadas as informações definidas em sua estrutura. Ou …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a implementar funcionalidades em nossas classes em PHP, bem como a forma em que devemos estruturas nossas classes.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="implementando-os-comportamentos"&gt;
&lt;h2&gt;IMPLEMENTANDO OS COMPORTAMENTOS&lt;/h2&gt;
&lt;p&gt;Todo objeto possui propriedades e todo objeto pode desempenhar alguma tarefa. É comum que um objeto desempenhe ações relacionadas as informações definidas em sua estrutura. Ou seja, as funções, na maioria das vezes, manipularão os atributos.&lt;/p&gt;
&lt;p&gt;Podemos reescrever o conceito acima pelo uso de estado e comportamento.&lt;/p&gt;
&lt;p&gt;Todo objeto possui estados e, todo objeto possui comportamentos. É comum que um objeto desempenhe comportamentos relacionadas as informações definidas em sua estrutura. Ou seja, os comportamentos, na maioria das vezes, manipularão os estados.&lt;/p&gt;
&lt;p&gt;Reescrevemos os conceitos somente por uma questão conceitual.&lt;/p&gt;
&lt;p&gt;As tarefas que um objeto executa são chamado de comportamentos, porém, a implementação não passa de uma função, cuja sintaxe é igual a sintaxe de qualquer função.&lt;/p&gt;
&lt;p&gt;Por fim, temos que as variáveis de uma instância guardarão as informações, enquanto que as funções manipulação as variáveis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="estruturas-de-dados"&gt;
&lt;h2&gt;ESTRUTURAS DE DADOS&lt;/h2&gt;
&lt;p&gt;O grande avanço das na estruturação das linguagens de programação foi a implementação da capacidade de agrupar funcionalidade e atributos numa mesta estrutura. Assim, conseguimos definir estruturas que possuem um conjunto de propriedades e fazer com que estas só sejam manipuladas através de funções pré-definidas pela classe. A esse conceito chamamos de interface pública, ou seja, o conjunto de funções para a interação com a classe constitui uma interface para o acesso externo.&lt;/p&gt;
&lt;p&gt;A ideia de ter atributos e funcionalidades numa mesma estrutura é responsável pela evolução da informática e a implementação desse conceito é, em suma, o que hoje chamamos de Orientação a Objetos.&lt;/p&gt;
&lt;p&gt;O nosso objetivo a partir de agora é, a criação de programas modulares e, a definição, em cada classe, dos atributos pertinentes a entidade.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="uma-primeira-nocao-de-encapsulamento"&gt;
&lt;h2&gt;UMA PRIMEIRA NOÇÃO DE ENCAPSULAMENTO&lt;/h2&gt;
&lt;p&gt;Mesmo que não tenhamos estudado o conceito de encapsulamento, podemos observar que, os objetos funcionam como uma cápsula, onde as propriedades são o conteúdo da capsula, enquanto as funções, irão assumir uma de duas opções. a) de uso intero; b) uso externo. As funções internas, deverão ter seus nomes restritos ao escopo da classe, enquanto que as funções de uso externo, deverão ter suas funções decladas como sendo pública e estas, formarão, a interface de comunicação entre o mundo exterior e o conteúdo interno da classe.&lt;/p&gt;
&lt;p&gt;Por fim, só o conceito de manter os dados e as funções num mesmo lugar já é, por definição, uma maneira de encapsulamento, até porque, para acessarmos uma propriedade ou um funcionalidade somos obrigados a especificar a capsula que desejamos manipular.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;class Teste {&lt;/span&gt;
&lt;span class="x"&gt;    function imprimeTeste(){&lt;/span&gt;
&lt;span class="x"&gt;        echo &amp;quot;teste&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#IMPLEMENTANDO FUNÇÕES I&lt;/span&gt;

&lt;span class="x"&gt;class Teste{&lt;/span&gt;

&lt;span class="x"&gt;    public function imprimeTeste(){&lt;/span&gt;
&lt;span class="x"&gt;        echo &amp;quot;Função imprimeTeste() da classe de nome Teste&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;$t1 = new Teste();&lt;/span&gt;
&lt;span class="x"&gt;$t1 -&amp;gt; imprimeTeste();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="veja-tambem"&gt;
&lt;h2&gt;VEJA TAMBÉM&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/primeira-classe-php.html"&gt;Aula 91: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/membro-de-classe-php.html"&gt;Aula 92: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0093_criacao-objetos-php.rst"&gt;Aula 93: Criação de Objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0094_acessando-membros-classe-php.rst"&gt;Aula 94: Acessando Membros de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/implementando-funcionalidades-classe-php.html"&gt;Aula 95: Implementando Funcionalidades na Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0096_pseudo-variavel-this-php.rst"&gt;Aula 96: Pseudo variável $this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0097_gerenciando-atributos-classe-php.rst"&gt;Aula 97: Gerenciando atributos de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-php.html"&gt;Aula 98: Construtor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-personalizado-php.html"&gt;Aula 99: Construtores Personalizados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/destrutores-php.html"&gt;Aula 100: Destrutores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php.html"&gt;Aula 101: Encapsulamento I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php-parte2.html"&gt;Aula 102: Encapsulamento II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/heranca-php.html"&gt;Aula 103: Herança I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0104_heranca-php-ii.rst"&gt;Aula 104: Herança II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0105_modificador-acesso-php.rst"&gt;Aula 105: Modificadores de Acesso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0106_visibilidade-funcao-php.rst"&gt;Aula 106: Visibilidade das Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0107_funcoes-modificadoras-php.rst"&gt;Aula 107: Funções Modificadoras&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="links-externos"&gt;
&lt;h2&gt;LINKS EXTERNOS&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://php.net/manual/pt_BR/language.oop5.basic.php"&gt;Classes em PHP (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.tutsplus.com/pt/tutorials/object-oriented-php-for-beginners--net-12762"&gt;Objetos e Classes (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikibooks.org/wiki/PHP_Programming/Classes"&gt;PHP Programming: Classe (en)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="programação orientada a objetos"></category><category term="poo"></category><category term="classe"></category><category term="objeto"></category><category term="instância"></category><category term="interface"></category><category term="interface pública"></category><category term="blog"></category></entry><entry><title>Importação: include() e require() do PHP</title><link href="http://excript.com/php/importacao-include-require-php.html" rel="alternate"></link><published>2016-06-15T04:30:00-03:00</published><updated>2016-06-15T04:30:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-15:/php/importacao-include-require-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a diferença entre as funções include() e require() e estudaremos em quais situações devemos importar bibliotecas PHP com cada uma das funções.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;Os programas que fizemos até agora, possuiam apenas um arquivo de código. Trabalhamos dessa maneira para simplificar o estudo e maximizar a visualização do …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a diferença entre as funções include() e require() e estudaremos em quais situações devemos importar bibliotecas PHP com cada uma das funções.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;Os programas que fizemos até agora, possuiam apenas um arquivo de código. Trabalhamos dessa maneira para simplificar o estudo e maximizar a visualização do código que estávamos implemento. Porém, o comum, é que uma aplicação escrita em PHP possua vários, senão, centenas de arquivos com código PHP.&lt;/p&gt;
&lt;p&gt;Dessa forma, temos de ser capazes de dizer que um arquivo em especifico deve ser aberto antes que a execução do arquivo que estamos desenvolvendo seja interpretado. Por exemplo, podemos ter um arquivo onde definimos uma grande quantidade de funções e, quando formos utilizar determinada função, tratamos de antes importar o arquivo em que a mesma foi definida.&lt;/p&gt;
&lt;p&gt;A capacidade de trabalhar com múltiplos arquivos é a forma mais primitiva de modularização do código PHP. Dessa forma, podíamos separar conjuntos de funções em arquivos diferentes, o que acabava fragmentando o código e, acabava por modularizar os nossos programas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="importacao-de-arquivos"&gt;
&lt;h2&gt;IMPORTAÇÃO DE ARQUIVOS&lt;/h2&gt;
&lt;p&gt;Todo programa PHP é constituido por um conjunto de arquivos que contém código PHP, HTML, JS, CSS ou então, qualquer outra informação que deve ser processada no lado do servidor.&lt;/p&gt;
&lt;p&gt;O PHP disponibiliza 4 funções para importação e cada uma desempenha uma tarefa especifica, logo, temos que conhecer todas as maneiras disponíveis de importação!&lt;/p&gt;
&lt;p&gt;Podemos importar um arquivo PHP através da função &lt;code&gt;include()&lt;/code&gt; ou então, &lt;code&gt;require()&lt;/code&gt;. Cada uma dessas 2 funções, possui uma função auxiliar que evita a importação de um arquivo que já tenha sido importado anteriormente.&lt;/p&gt;
&lt;p&gt;O problema em importar um arquivo que já está importado, é que as variáveis contidas no escopo desse arquivo serão resetadas, logo, todos os valores que tivermos em variáveis que estão definidas em outro arquivo serão perdidos. Isso é somente um dos problemas, é possível elucidar vários.&lt;/p&gt;
&lt;p&gt;Então, é uma boa prática a utilização das funções &amp;quot;_once()&amp;quot;, até porque, dessa maneira evitamos a importação de algo que já está carregado.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;função &lt;code&gt;include()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;&lt;code&gt;include()&lt;/code&gt;: inclui o arquivo passado como parâmetro. Se o arquivo não for encontrado, o PHP irá lançar um &amp;quot;warning&amp;quot;, mas dará continuidade na execução.&lt;/p&gt;
&lt;p class="last"&gt;&lt;code&gt;include_once()&lt;/code&gt;: o funcionamento dessa função é igual ao da função &lt;code&gt;include()&lt;/code&gt;, porém, o arquivo só será importado caso o mesmo ainda não tenha sido.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;função &lt;code&gt;require()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;&lt;code&gt;require()&lt;/code&gt;: a função &lt;code&gt;require()&lt;/code&gt; importa arquivos, porém, caso o mesmo não seja encontrado, será levantado uma exceção e a execução é finalizada. Essa é uma maneira de interrompermos a execução dos scripts caso alguma anomalia ocorra.&lt;/p&gt;
&lt;p class="last"&gt;&lt;code&gt;require_once()&lt;/code&gt;: o funcionamento é igual ao da função &lt;code&gt;require()&lt;/code&gt;, porém, um arquivo só será importado caso o mesmo ainda não tenha sido.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#IMPORTANDO ARQUIVOS PHP&lt;/span&gt;

&lt;span class="x"&gt;include(&amp;#39;code.php&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;include_once(&amp;#39;code.php&amp;#39;);&lt;/span&gt;

&lt;span class="x"&gt;require(&amp;#39;code.php&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;require_once(&amp;#39;code.php&amp;#39;);&lt;/span&gt;

&lt;span class="x"&gt;echo $teste . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$teste = 5;&lt;/span&gt;

&lt;span class="x"&gt;require(&amp;#39;code.php&amp;#39;);&lt;/span&gt;

&lt;span class="x"&gt;echo $teste . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="importar"></category><category term="função"></category><category term="include"></category><category term="require"></category><category term="blog"></category></entry><entry><title>Valores de retornos de funções tipados em PHP</title><link href="http://excript.com/php/valor-retorno-funcao-tipada-php.html" rel="alternate"></link><published>2016-06-15T04:15:00-03:00</published><updated>2016-06-15T04:15:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-15:/php/valor-retorno-funcao-tipada-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos como definir o tipo do valor a ser retornado pelas funções, bem como as vantagens dessa abordagens e os beneficios que podemos obter com o uso desse conceito implementado na versão 7 do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;A versão 7 do PHP permite a definição do tipo de cada …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos como definir o tipo do valor a ser retornado pelas funções, bem como as vantagens dessa abordagens e os beneficios que podemos obter com o uso desse conceito implementado na versão 7 do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;A versão 7 do PHP permite a definição do tipo de cada parâmetro, como estudamos na aula anterior. O mesmo também disponibilizou uma notação para a definição do tipo do valor que será retornado pela função, ou seja, agora, podemos definir o valor que será recebido por uma função e o valor que está irá retornar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="funcoes-com-retorno-tipados"&gt;
&lt;h2&gt;FUNÇÕES COM RETORNO TIPADOS&lt;/h2&gt;
&lt;p&gt;Função com retorno tipado é toda função que define explicitamente o tipo do valor que será retornado. Dessa maneira o PHP disponibilizou uma maneira de definirmos o tipo do valor que será recebido por uma função, como também, o valor que a mesma retornará.&lt;/p&gt;
&lt;p&gt;A seguir, escrevemos um simples exemplo onde há uma função que define o tipo do valor que será retornado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function getArea(int x, int y) : int {&lt;/span&gt;
&lt;span class="x"&gt;    return x * y;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No exemplo acima, definimos que o valor de retorno da função getArea() será um número inteiro.&lt;/p&gt;
&lt;p&gt;Dessa forma, conseguimos manter um código mais integro e fazer com que os editores se tornem mais inteligentes, até porque, os mesmos saberão quais os valores que são esperados por parâmetros em alguma funções, como também, conseguem saber o valor que será retornado por outras funções.&lt;/p&gt;
&lt;p&gt;É possível definir que os valores não sejam automaticamente convertidos pelo PHP, ou seja, podemos definir que, caso o valor passado não seja do tipo esperado, uma exceção seja levantada e a execução finalizada.&lt;/p&gt;
&lt;p&gt;Para definir que desejamos que o PHP levante uma exceção caso o valor passado não seja do tipo esperado, temos que, através de um código, especificar que determinado módulo está trabalhando de maneira restrita, isto é, que os valores passados devem ser do tipo esperado. Do contrário, o Script será interrompido.&lt;/p&gt;
&lt;p&gt;A instrução &lt;code&gt;declare(strict_types=1);&lt;/code&gt; deve ser colocada no início do arquivo para que o PHP trate o mesmo da forma estrita.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;declare(strict_types=1);//valor de retorno precisa ser do tipo definido&lt;/span&gt;

&lt;span class="x"&gt;function getArea(int x, int y):int {&lt;/span&gt;
&lt;span class="x"&gt;    return x * y;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;declare(strict_types=1);&lt;/span&gt;

&lt;span class="x"&gt;#VALORES DE RETORNO TIPADO&lt;/span&gt;

&lt;span class="x"&gt;function cubo(float $num) : float&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    return $num * $num * $num;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;function teste() : array&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    return [10, &amp;quot;eXcript&amp;quot;, 5.1];&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;function x() : int&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    return &amp;quot;aa&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;//echo cubo(10.5);&lt;/span&gt;

&lt;span class="x"&gt;//var_dump( teste() );&lt;/span&gt;


&lt;span class="x"&gt;x();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="função"></category><category term="tipo"></category><category term="função tipada"></category><category term="parâmetro"></category><category term="retorno tipado"></category><category term="return"></category><category term="blog"></category></entry><entry><title>Parâmetros Tipados em PHP</title><link href="http://excript.com/php/parametro-tipado-php.html" rel="alternate"></link><published>2016-06-15T04:00:00-03:00</published><updated>2016-06-15T04:00:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-15:/php/parametro-tipado-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos como definir o tipo dos parâmetros de uma função, bem como as vantagens na utilização desse conceito implementado na versão 7 do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;O PHP é uma linguagem dinamicamente tipada, ou seja, não definimos o tipo de cada variável no momento de sua declaração. Isso aumenta …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos como definir o tipo dos parâmetros de uma função, bem como as vantagens na utilização desse conceito implementado na versão 7 do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;O PHP é uma linguagem dinamicamente tipada, ou seja, não definimos o tipo de cada variável no momento de sua declaração. Isso aumenta a produtividade, porém, acaba ocasionando alguns problemas e fazendo com que tenhamos que verificar, se o valor que recebemos é do tipo esperado.&lt;/p&gt;
&lt;p&gt;Para solucionar alguns destes problemas, foi definido na versão 7 do PHP, a capacidade de definir o tipo do parâmetro da função, ou seja, podemos definir agora que determinada função deve receber como parâmetro, por exemplo, um número. Caso uma letra seja passada, o PHP fará [tentará fazer] o trabalho de conversão da mesma para número.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="funcoes-com-parametros-tipados"&gt;
&lt;h2&gt;FUNÇÕES COM PARÂMETROS TIPADOS&lt;/h2&gt;
&lt;p&gt;Funções com parâmetros tipados é uma forma de evitarmos a checagem do tipo de cada parâmetro recebido. Assim, o interpretador fica com a tarefa de verificar se o valor que está sendo enviado para a função é do tipo esperado.&lt;/p&gt;
&lt;p&gt;A seguir, estamos definindo uma função que recebe 2 parâmetros inteiros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function getArea(int x, int y){&lt;/span&gt;
&lt;span class="x"&gt;    return x * y;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No exemplo acima, se passarmos por exemplo, um valor do tipo ponto flutuante como parâmetro, o PHP irá converter o mesmo para um inteiro, e o mesmo irá ocorrer se enviarmos um valor do tipo &lt;tt class="docutils literal"&gt;String&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Porém, podemos declarar no início do nosso código, que caso o valor que seja enviado não  corresponda ao tipo esperado, uma exceção deve ser levantada informando o usuário de que o valor informando possui um tipo diferente do previsto. Dessa forma, o PHP pode se transformar numa linguagem fortemente tipada, ou seja, os valores e os tipos devem ser respeitados.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;declare(strict_types=1);&lt;/span&gt;

&lt;span class="x"&gt;#FUNÇÕES COM PARÂMETROS TIPADOS&lt;/span&gt;

&lt;span class="x"&gt;function getArea(int $x, int $y){&lt;/span&gt;

&lt;span class="x"&gt;    return $x * $y;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;function getSum(int ...$valores){&lt;/span&gt;

&lt;span class="x"&gt;    return array_sum($valores);&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;echo getArea(10, 5) . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo getSum(1,2,3,4,5,6,&amp;quot;100&amp;quot;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="função"></category><category term="parâmetro"></category><category term="tipos"></category><category term="parâmetro tipado"></category><category term="blog"></category></entry><entry><title>Null Coalescing Operator em PHP</title><link href="http://excript.com/php/null-coalescing-operator-php.html" rel="alternate"></link><published>2016-06-15T03:30:00-03:00</published><updated>2016-06-15T03:30:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-15:/php/null-coalescing-operator-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a utilizar o Null Coalescing Operador, isto é, um novo operador implementado na versão 7 do PHP que nos proporciona uma maneira ágil de verificar valores nulos.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;A versão 7 do PHP trouxe um novo operador que diminui a necessidade de verificar se uma referência existe …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a utilizar o Null Coalescing Operador, isto é, um novo operador implementado na versão 7 do PHP que nos proporciona uma maneira ágil de verificar valores nulos.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;A versão 7 do PHP trouxe um novo operador que diminui a necessidade de verificar se uma referência existe para em seguida, utilizar a mesma. O objetivo é que possamos definir o valor a ser retornado, ou então, definir um valor para caso não existe um valor a ser retornado.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="operador-null-coalesce"&gt;
&lt;h2&gt;OPERADOR NULL COALESCE&lt;/h2&gt;
&lt;p&gt;O operador Null Coalesce é representado pela linguagem PHP com a utilização de dois sinais de interrogação, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt; variável &amp;gt; = &amp;lt; valor &amp;gt; ?? &amp;lt; há valor definido? Senão retorna isso &amp;gt;;&lt;/span&gt;
&lt;span class="x"&gt;$x = $a ?? 10;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Se a variável &lt;code&gt;$a&lt;/code&gt; existir, o valor da mesma será definido para &lt;code&gt;$x&lt;/code&gt;, do contrário, o número 10 é que será utilizado.&lt;/p&gt;
&lt;p&gt;É comum a necessidade de verificarmos se um determinado valor está condito num Array e então, fazer uso do mesmo. Atualmente, é necessário o uso de uma condição para averiguar que o item existe, ou então, verificar que a variável é diferente de Null, para que somente então, possamos fazer uso da mesma. Até porque, se utilizarmos uma variável que contém Null é será levantado uma exceção e o Script terá sua execução interrompida.&lt;/p&gt;
&lt;p&gt;O operador &lt;tt class="docutils literal"&gt;Null Coalesce&lt;/tt&gt; veio para agilizar essa constante necessidade de verificação e utilização do valor contido no item ou variável checado.&lt;/p&gt;
&lt;p&gt;A sintaxe do operador Null Coalesce é bastante semelhante a sintaxe do Operador Ternário, porém, com este operador, é verificado se a referência existe ou então, se um elemento esta contido num Array. Caso o valor exista, o mesmo será utilizado, do contrário, iremos definir algum outro valor ou então, alguma outra verificação.&lt;/p&gt;
&lt;p&gt;É interessante observar que o operador Null Coalesce fornece uma estrutura para checagem e utilização, porém, é possível continuarmos trabalhando sem fazer uso do mesmo.&lt;/p&gt;
&lt;p&gt;A seguir utilizamos algumas estruturas e também, a estrutura do operador Null Coalesce.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#operador ternário&lt;/span&gt;
&lt;span class="x"&gt;echo $x ? $x : &amp;quot;&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;echo $x ?: &amp;quot;&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;#operador Null Coalesce&lt;/span&gt;
&lt;span class="x"&gt;echo $x ?? &amp;quot;&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo $x ?? $b ?? &amp;quot;&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No exemplo  seguir, utilizamos o operador Null Coalesce para definir o que será impresso na saída padrão.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;// $a não está definido&lt;/span&gt;
&lt;span class="x"&gt;$b = 10;&lt;/span&gt;

&lt;span class="x"&gt;echo $a ?? 2; // saída 2&lt;/span&gt;
&lt;span class="x"&gt;echo $a ?? $b ?? 7; // saída 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No exemplo acima, inicialmente definimos à variável &lt;code&gt;$b&lt;/code&gt; o valor 10. Em seguida, mandamos imprimir na saída padrão o valor contido da varável &lt;code&gt;$a&lt;/code&gt;, que não foi por nós definida, ou então, algum outro valor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$quadrado = function($num){&lt;/span&gt;
&lt;span class="x"&gt;    return $num * $num;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;
&lt;span class="x"&gt;$cubo = function($num) use ($quadrado){&lt;/span&gt;
&lt;span class="x"&gt;    return $quadrado($num) * $num;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;
&lt;span class="x"&gt;$soma = function($num){&lt;/span&gt;
&lt;span class="x"&gt;    return $num + $num;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;

&lt;span class="x"&gt;function processa_lista($lista, $func){&lt;/span&gt;
&lt;span class="x"&gt;    foreach($lista as &amp;amp;$item)&lt;/span&gt;
&lt;span class="x"&gt;        $item = $func($item);&lt;/span&gt;
&lt;span class="x"&gt;    return $lista;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;print_r(processa_lista(range(1, 10), $soma));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="operador"></category><category term="null coalescing"></category><category term="null coalescing operator"></category><category term="operador null coalesce"></category><category term="blog"></category></entry><entry><title>Operador SpaceShift em PHP</title><link href="http://excript.com/php/operador-spaceshift-php.html" rel="alternate"></link><published>2016-06-15T03:00:00-03:00</published><updated>2016-06-15T03:00:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-15:/php/operador-spaceshift-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o Operador Spaceshift, aprenderemos seu funcionamento, onde devemos utiliza-los e também, aprenderemos algumas dicas e truque para extrair ao máximo desse recurso implementado na versão 7 do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="spaceship-operator"&gt;
&lt;h2&gt;SPACESHIP OPERATOR&lt;/h2&gt;
&lt;p&gt;O PHP 7 implementou um operador de nome &lt;tt class="docutils literal"&gt;Spaceship&lt;/tt&gt;. Com este, somos capazes de verificar 3 situações …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o Operador Spaceshift, aprenderemos seu funcionamento, onde devemos utiliza-los e também, aprenderemos algumas dicas e truque para extrair ao máximo desse recurso implementado na versão 7 do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="spaceship-operator"&gt;
&lt;h2&gt;SPACESHIP OPERATOR&lt;/h2&gt;
&lt;p&gt;O PHP 7 implementou um operador de nome &lt;tt class="docutils literal"&gt;Spaceship&lt;/tt&gt;. Com este, somos capazes de verificar 3 situações ao mesmo tempo, ou seja, verificamos se o operando a esquerda é menor, igual ou maior do que o operando a direita. O resultado da verificação será um número inteiro no intervalo entre -1 até 1.&lt;/p&gt;
&lt;p&gt;Caso o valor retornado seja -1, o operando a esquerda é menor do o operando a sua direita. Se o valor retornado for igual a 0, os operandos são iguais. Por fim, se o valor retornado for 1, o operando a esquerda é maior do que o operando a direita do operador.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$x &amp;lt;=&amp;gt; $y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Então, temos que a cada verificação feita utilizando o operador &lt;tt class="docutils literal"&gt;SpaceShift&lt;/tt&gt;, será verificado 3 situações:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;$x&lt;/tt&gt; é menor do que &lt;tt class="docutils literal"&gt;$Y&lt;/tt&gt; retorna -1.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;$x&lt;/tt&gt; é igual a &lt;tt class="docutils literal"&gt;$Y&lt;/tt&gt;  retorna 0.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;$x&lt;/tt&gt; é menor a &lt;tt class="docutils literal"&gt;$Y&lt;/tt&gt; retorna 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="situacoes-menor-ou-igual-maior-ou-igual"&gt;
&lt;h2&gt;SITUAÇÕES: MENOR OU IGUAL; MAIOR OU IGUAL&lt;/h2&gt;
&lt;p&gt;Também é possível obter o resultado da expressões &lt;tt class="docutils literal"&gt;menor ou igual&lt;/tt&gt; ou &lt;tt class="docutils literal"&gt;maior ou igual&lt;/tt&gt; com o operador &lt;tt class="docutils literal"&gt;spaceshift&lt;/tt&gt;, neste caso temos que:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$x &amp;lt;==&amp;gt; $y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplos-com-numeros"&gt;
&lt;h2&gt;EXEMPLOS COM NÚMEROS&lt;/h2&gt;
&lt;p&gt;A seguir, definimos alguns exemplos utilizando números e, já definimos, como sendo comentário, o valor que será retornado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;1 &amp;lt;=&amp;gt; 1     // 0&lt;/span&gt;
&lt;span class="x"&gt;2 &amp;lt;=&amp;gt; 1     // 1&lt;/span&gt;
&lt;span class="x"&gt;1 &amp;lt;=&amp;gt; 2     // -1&lt;/span&gt;
&lt;span class="x"&gt;156 &amp;lt;==&amp;gt; 12 // 1&lt;/span&gt;
&lt;span class="x"&gt;19 &amp;lt;==&amp;gt; 20  // -1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplos-com-arrays"&gt;
&lt;h2&gt;EXEMPLOS COM ARRAYS&lt;/h2&gt;
&lt;p&gt;Abaixo definimos uma lista de exemplos e novamente, colocamos como sendo comentários o valor que será impresso no console.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;echo [] &amp;lt;=&amp;gt; []; // 0&lt;/span&gt;
&lt;span class="x"&gt;echo [1, 2, 3] &amp;lt;=&amp;gt; [1, 2, 3]; // 0&lt;/span&gt;
&lt;span class="x"&gt;echo [1, 2, 3] &amp;lt;=&amp;gt; []; // 1&lt;/span&gt;
&lt;span class="x"&gt;echo [1, 2, 3] &amp;lt;=&amp;gt; [1, 2, 1]; // 1&lt;/span&gt;
&lt;span class="x"&gt;echo [1, 2, 3] &amp;lt;=&amp;gt; [1, 2, 4]; // -1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplos-com-strings"&gt;
&lt;h2&gt;EXEMPLOS COM STRINGS&lt;/h2&gt;
&lt;p&gt;Agora, definimos 3 exemplos utilizando String para estudarmos o funcionamento do operador &lt;code&gt;spaceshift&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;echo &amp;quot;x&amp;quot; &amp;lt;=&amp;gt; &amp;quot;x&amp;quot;; // 0&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;x&amp;quot; &amp;lt;=&amp;gt; &amp;quot;y&amp;quot;; //-1&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;y&amp;quot; &amp;lt;=&amp;gt; &amp;quot;x&amp;quot;; //1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#SPACESHIFT OPERATOR&lt;/span&gt;

&lt;span class="x"&gt;foreach(range(0,9) as $v){&lt;/span&gt;

&lt;span class="x"&gt;    $x = rand(0, 9);&lt;/span&gt;
&lt;span class="x"&gt;    $rel = $v &amp;lt;=&amp;gt; $x;&lt;/span&gt;

&lt;span class="x"&gt;    echo &amp;quot;v=$v &amp;lt;=&amp;gt; x=$x é $rel \n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="operador"></category><category term="spaceshift"></category><category term="spaceshift operator"></category><category term="blog"></category></entry><entry><title>Funções Anônimas e Arrays com PHP</title><link href="http://excript.com/php/funcao-anonima-array-php.html" rel="alternate"></link><published>2016-06-11T13:00:00-03:00</published><updated>2016-06-11T13:00:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-11:/php/funcao-anonima-array-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as funções anonimas junto com as estruturas Arrays. Estudaremos as várias funções definidas pela linguagem PHP para serem utilizadas com uso de funções anonimas.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#FUNÇÕES ANÔNIMAS E ARRAYS&lt;/span&gt;

&lt;span class="x"&gt;#array_map(&amp;lt;f.anonima&amp;gt;, &amp;lt;array&amp;gt;)&lt;/span&gt;

&lt;span class="x"&gt;$lista = [1,2,3,4,5];&lt;/span&gt;

&lt;span class="x"&gt;$f = function($x){&lt;/span&gt;
&lt;span class="x"&gt;    return $x …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as funções anonimas junto com as estruturas Arrays. Estudaremos as várias funções definidas pela linguagem PHP para serem utilizadas com uso de funções anonimas.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#FUNÇÕES ANÔNIMAS E ARRAYS&lt;/span&gt;

&lt;span class="x"&gt;#array_map(&amp;lt;f.anonima&amp;gt;, &amp;lt;array&amp;gt;)&lt;/span&gt;

&lt;span class="x"&gt;$lista = [1,2,3,4,5];&lt;/span&gt;

&lt;span class="x"&gt;$f = function($x){&lt;/span&gt;
&lt;span class="x"&gt;    return $x  * $x;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;

&lt;span class="x"&gt;$lista_proc = array_map($f, $lista);&lt;/span&gt;
&lt;span class="x"&gt;print_r($lista_proc);&lt;/span&gt;


&lt;span class="x"&gt;#array_filter(&amp;lt;array&amp;gt;, &amp;lt;f.anonima&amp;gt;)&lt;/span&gt;

&lt;span class="x"&gt;$filtro = function($x){&lt;/span&gt;
&lt;span class="x"&gt;    return $x &amp;lt; 3;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;

&lt;span class="x"&gt;$lista_filtro = array_filter($lista, $filtro);&lt;/span&gt;

&lt;span class="x"&gt;print_r($lista_filtro);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="função"></category><category term="função anonima"></category><category term="lambda"></category><category term="closures"></category><category term="função lambda"></category><category term="função de primeira ordem"></category><category term="função de ordem superior"></category></entry><entry><title>Funções Anônimas na Prática com PHP</title><link href="http://excript.com/php/funcao-anonima-pratica-php.html" rel="alternate"></link><published>2016-06-11T12:00:00-03:00</published><updated>2016-06-11T12:00:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-11:/php/funcao-anonima-pratica-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nessa aula implementaremos um código utilizando os conceitos de funções anonimas estudadas nas aulas anteriores.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="funcoes-para-manipulacao-de-arrays-que-recebem-funcoes-anonima"&gt;
&lt;h2&gt;FUNÇÕES PARA MANIPULAÇÃO DE ARRAYS QUE RECEBEM FUNÇÕES ANÔNIMA&lt;/h2&gt;
&lt;p&gt;O PHP tem definido algumas funções para manipularmos Arrays que tem definido o envio de uma função anônima como parâmetro. Essa funções, implementão algumas características e …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nessa aula implementaremos um código utilizando os conceitos de funções anonimas estudadas nas aulas anteriores.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="funcoes-para-manipulacao-de-arrays-que-recebem-funcoes-anonima"&gt;
&lt;h2&gt;FUNÇÕES PARA MANIPULAÇÃO DE ARRAYS QUE RECEBEM FUNÇÕES ANÔNIMA&lt;/h2&gt;
&lt;p&gt;O PHP tem definido algumas funções para manipularmos Arrays que tem definido o envio de uma função anônima como parâmetro. Essa funções, implementão algumas características e funcionalidades encontradas em linguagens funcionais.&lt;/p&gt;
&lt;p&gt;Nesse momento, vamos estudar as funções &lt;tt class="docutils literal"&gt;array_map()&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;array_filter()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementando-a-operacao-externamente"&gt;
&lt;h2&gt;IMPLEMENTANDO A OPERAÇÃO EXTERNAMENTE&lt;/h2&gt;
&lt;p&gt;Um dos grandes benefícios das funções anônimas, é a capacidade que nós temos de implementar externamente ações que irão interferir no processamento interno sem fazer qualquer alteração nessa função.&lt;/p&gt;
&lt;p&gt;Vamos supor uma situação onde existe uma lista de valores e é necessário realizar algum processamento sobre os itens. Pra isso, nós utilizarmos um laço de repetição e a cada item realizarmos uma determinada operação. Essa é uma forma estática de percorrer os elemtnos e realizar um determinado tratamento sobre os mesmos.&lt;/p&gt;
&lt;p&gt;Agora, nós podemos trabalhar de tal maneira onde não será implementado dentro da função o tratamento que sera dado a cada elemento da lista, o que será feito, é a passagem do elemento através de uma função anônima que será recebida como parâmetro. Dessa forma, nós temos que o processamento irá ocorrer externamente e quem irá implementar o mesmo, não precisa conhecer o funcionamento interno da função e nem ter acesso ao seu código.&lt;/p&gt;
&lt;p&gt;Um detalhe das funções anônimas é que a expicação é complexa, enquanto a implementação geralmente é simples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$quadrado = function($num){&lt;/span&gt;
&lt;span class="x"&gt;    return $num * $num;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;
&lt;span class="x"&gt;$cubo = function($num) use ($quadrado){&lt;/span&gt;
&lt;span class="x"&gt;    return $quadrado($num) * $num;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;
&lt;span class="x"&gt;$soma = function($num){&lt;/span&gt;
&lt;span class="x"&gt;    return $num + $num;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;

&lt;span class="x"&gt;function processa_lista($lista, $func){&lt;/span&gt;
&lt;span class="x"&gt;    foreach($lista as &amp;amp;$item)&lt;/span&gt;
&lt;span class="x"&gt;        $item = $func($item);&lt;/span&gt;
&lt;span class="x"&gt;    return $lista;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;print_r(processa_lista(range(1, 10), $soma));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="funcoes-php-e-funcoes-anonimas"&gt;
&lt;h2&gt;FUNÇÕES PHP E FUNÇÕES ANÔNIMAS&lt;/h2&gt;
&lt;p&gt;O PHP possui algumas funções em que é necessário passar como parâmetro uma função anônima. Por exemplo, existe algumas funções para manipulação de Arrays em que o PHP faz o trabalho pesado e assim, basta implementar uma função anônima e passarmos a mesma como parâmetro para obter algum resultado.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="funcao-array-map"&gt;
&lt;h2&gt;FUNÇÃO &lt;tt class="docutils literal"&gt;array_map()&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;A função &lt;tt class="docutils literal"&gt;array_map()&lt;/tt&gt; tem por objetivo executar uma determinada função em todos elementos contidos em nosso Array. Então, a função anônima que nós passarmos como parâmetro será aplicada para cada elemento da nossa estrutura.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="definicao"&gt;
&lt;h2&gt;DEFINIÇÃO&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;array array_map(callback $callback, array $arr1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$arr = [1, 2, 3, 4, 5];&lt;/span&gt;

&lt;span class="x"&gt;$f = function($x) {&lt;/span&gt;
&lt;span class="x"&gt;    return $x * $x;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;span class="x"&gt;$var_arr = array_map(f, $arr);&lt;/span&gt;
&lt;span class="x"&gt;var_dump($var_arr);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="funcao-array-filter"&gt;
&lt;h2&gt;FUNÇÃO &lt;tt class="docutils literal"&gt;array_filter()&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;A função &lt;tt class="docutils literal"&gt;array_filter()&lt;/tt&gt; proporciona uma maneira fácil para filtrarmos elementos de um Array se baseando na condição implementada na função anônima que é passada como parâmetro.
A função anônima, deverá retornar um valor booleano, se o valor for &lt;tt class="docutils literal"&gt;true&lt;/tt&gt;,  o elemento fará parte do novo Array, do contrário, nós temos que o elemento não será adicionado.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;DEFINIÇÃO&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;array array_map(array $arr1, callback $callback)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//$lista = [1,2,3,4,5,6,7,8,9,10];&lt;/span&gt;
&lt;span class="x"&gt;$lista = [1,2.21,&amp;quot;&amp;quot;,9,4];&lt;/span&gt;

&lt;span class="x"&gt;$f = function ($v) {&lt;/span&gt;
&lt;span class="x"&gt;    return is_int($v);&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;

&lt;span class="x"&gt;$lista_filtrada = array_filter( $lista, $f );&lt;/span&gt;

&lt;span class="x"&gt;print_r( $lista_filtrada );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note que estamos definindo a função com sendo um parâmetro de outra e também, é interessante observar que a implementação da função, ocorre no local onde deve ser passado o parâmetro para outra função.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#PRÁTICA - FUNÇÕES ANÔNIMAS&lt;/span&gt;

&lt;span class="x"&gt;$quadrado = function($item){&lt;/span&gt;
&lt;span class="x"&gt;    return $item * $item;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;
&lt;span class="x"&gt;$cubo = function($item)use($quadrado){&lt;/span&gt;
&lt;span class="x"&gt;    return $quadrado($item) * $item;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;
&lt;span class="x"&gt;$soma = function($item){&lt;/span&gt;
&lt;span class="x"&gt;    return $item + $item;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;

&lt;span class="x"&gt;function processa_lista($lista, $func){&lt;/span&gt;
&lt;span class="x"&gt;    foreach($lista as &amp;amp;$item){&lt;/span&gt;
&lt;span class="x"&gt;        $item = $func($item);&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;    return $lista;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;QUADRADO\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;print_r(processa_lista(range(1,10), $quadrado));&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\nCUBO\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;print_r(processa_lista(range(1,10), $cubo));&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\nSOMA\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;print_r(processa_lista(range(1,10), $soma));&lt;/span&gt;


&lt;span class="x"&gt;//print_r(processa_lista(&lt;/span&gt;
&lt;span class="x"&gt;//    range(1,10),&lt;/span&gt;
&lt;span class="x"&gt;//    function($item){&lt;/span&gt;
&lt;span class="x"&gt;//        return $item - 10;&lt;/span&gt;
&lt;span class="x"&gt;//    }&lt;/span&gt;
&lt;span class="x"&gt;//));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="função"></category><category term="função anonima"></category><category term="lambda"></category><category term="closures"></category><category term="função lambda"></category><category term="função de primeira ordem"></category><category term="função de ordem superior"></category></entry><entry><title>Escopo de nomes das funções anônimas em PHP</title><link href="http://excript.com/php/escopo-de-nome-das-funcoes-anonimas-php.html" rel="alternate"></link><published>2016-06-11T11:00:00-03:00</published><updated>2016-06-11T11:00:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-11:/php/escopo-de-nome-das-funcoes-anonimas-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula entenderemos o escopo de nomes das funções anonimas, bem como as suas características e principais conceitos.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="escopo-de-nome-das-funcoes-anonimas"&gt;
&lt;h2&gt;ESCOPO DE NOME DAS FUNÇÕES ANÔNIMAS&lt;/h2&gt;
&lt;p&gt;Quando declaramos uma função anônima, geralmente, iremos atribuir a mesma a uma variável. A variável servirá como uma espécie de referência, até porque, através dessa variável …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula entenderemos o escopo de nomes das funções anonimas, bem como as suas características e principais conceitos.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="escopo-de-nome-das-funcoes-anonimas"&gt;
&lt;h2&gt;ESCOPO DE NOME DAS FUNÇÕES ANÔNIMAS&lt;/h2&gt;
&lt;p&gt;Quando declaramos uma função anônima, geralmente, iremos atribuir a mesma a uma variável. A variável servirá como uma espécie de referência, até porque, através dessa variável é que poderemos invocar a função, ou melhor, &lt;strong&gt;somente&lt;/strong&gt; com essa variável é que o bloco de código da função anonima poderá ser executado!&lt;/p&gt;
&lt;p&gt;Uma função anônima possui o seu escopo restrito, então, não é possível fazer acesso direto aos membros externos. Em suma, &lt;a class="reference external" href="http://excript.com/php/introducao-as-funcoes-php.html"&gt;o escopo de uma função anônima funciona de maneira análoga a de uma função convencional&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dessa forma, para acessarmos variáveis externas a função anônima, temos que explicitamente declarar, no cabeçalho da função, que determinadas variáveis devem estar visíveis dentro da função que estamos definindo.&lt;/p&gt;
&lt;p&gt;Para que seja possível essa manipulação no escopo das variáveis, foi definido a instrução &lt;code&gt;use&lt;/code&gt; que funciona como complemento da declaração das funções anonimas, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$x = 10;&lt;/span&gt;
&lt;span class="x"&gt;$func = function() use ($x) {&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;O valor de x é: $x&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;

&lt;span class="x"&gt;$func();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No código acima, declaramos uma variável de nome &lt;code&gt;$x&lt;/code&gt; e inicializamo-a com o número inteiro 10. Em seguida, definimos uma função anonima e nesta declaramos, com a instrução &lt;code&gt;use&lt;/code&gt;, que a variável &lt;code&gt;$x&lt;/code&gt; deve estar acessível internamente.&lt;/p&gt;
&lt;p&gt;Por essa razão é que conseguimos acessar a variável &lt;code&gt;$x&lt;/code&gt;, até porque, por padrão, funções anonimas não possuem acesso aos membros externos, como já estudado.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="passagem-de-referencia-e-de-valor"&gt;
&lt;h2&gt;PASSAGEM DE REFERÊNCIA E DE VALOR&lt;/h2&gt;
&lt;p&gt;Funções anonimas funcionam de maneira análoga a qualquer outra função, logo, estas possuem o escopo restrito. Da mesma forma, temos que ao inserirmos variáveis no escopo de uma função, o que estamos de fato fazendo, é declarando uma variável de mesmo nome e inicializando-a com o valor igual a variável externa.&lt;/p&gt;
&lt;p&gt;Desta forma, se alterarmos o valor das variáveis inseridas no escopo local, o que será alterado, é só e somente só a variável de mesmo nome re-declarada no escopo local da função anonima. Logo, se desejarmos alterar a variável cujo escopo é externo a função, temos de passar a sua referência e não o seu valor. Para isso, basta precedermos o seu nome pelo uso de um &amp;amp; comercial.&lt;/p&gt;
&lt;p&gt;Vejamos o código a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$x = 10;&lt;/span&gt;
&lt;span class="x"&gt;$y = 10;&lt;/span&gt;
&lt;span class="x"&gt;$func = function() use ($x, &amp;amp;$y) {&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;O valor de x é: $x&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;O valor de y é: $y&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;    $x = 0;&lt;/span&gt;
&lt;span class="x"&gt;    $y = 0;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;

&lt;span class="x"&gt;$func();&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;-----&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;O valor de x é: $x&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;O valor de y é: $y&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No exemplo acima, podemos facilmente observar que somente a variável externa &lt;code&gt;$y&lt;/code&gt; é que teve o seu valor alterado, isso porque, a referência da mesma foi inserida no escopo local da função anonima.&lt;/p&gt;
&lt;p&gt;A seguir, implementamos mais um exemplo para avançarmos ainda mais em nosso estudo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$var1 = 10;&lt;/span&gt;
&lt;span class="x"&gt;$num = [&amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;três&amp;quot;];&lt;/span&gt;
&lt;span class="x"&gt;$func = function() use ($var1, &amp;amp;$num) {&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;Variável externa $var1&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;

&lt;span class="x"&gt;$func();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#FUNÇÕES ANÔNIMAS - ESCOPO DE NOMES&lt;/span&gt;

&lt;span class="x"&gt;$num = 100;&lt;/span&gt;
&lt;span class="x"&gt;$num2 = 100;&lt;/span&gt;

&lt;span class="x"&gt;$func = function() use(&amp;amp;$num, $num2) {&lt;/span&gt;
&lt;span class="x"&gt;//    echo &amp;quot;Anônima: &amp;quot; . $num;&lt;/span&gt;
&lt;span class="x"&gt;    $num = 1500;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;

&lt;span class="x"&gt;$func();&lt;/span&gt;

&lt;span class="x"&gt;echo $num;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="use"></category><category term="função"></category><category term="função anonima"></category><category term="lambda"></category><category term="closures"></category><category term="função lambda"></category><category term="função de primeira ordem"></category><category term="função de ordem superior"></category><category term="blog"></category></entry><entry><title>Introdução às Funções Anônimas em PHP</title><link href="http://excript.com/php/introducao-funcao-anonima-php.html" rel="alternate"></link><published>2016-06-11T10:00:00-03:00</published><updated>2016-06-11T10:00:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-11:/php/introducao-funcao-anonima-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos o conceito de função anonima e, como utiliza-las na linguagem PHP. Também faremos um exemplo onde será possível observar as vantagens dessa definição.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="funcoes-anonimas"&gt;
&lt;h2&gt;FUNÇÕES ANONIMAS&lt;/h2&gt;
&lt;p&gt;As &lt;strong&gt;funções anônimas&lt;/strong&gt;, também chamadas de &lt;strong&gt;closures&lt;/strong&gt;, &lt;strong&gt;lambda functions&lt;/strong&gt;, &lt;strong&gt;funções de primeira ordem&lt;/strong&gt;, &lt;strong&gt;funções de ordem superior&lt;/strong&gt;, são blocos de instruções que …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos o conceito de função anonima e, como utiliza-las na linguagem PHP. Também faremos um exemplo onde será possível observar as vantagens dessa definição.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="funcoes-anonimas"&gt;
&lt;h2&gt;FUNÇÕES ANONIMAS&lt;/h2&gt;
&lt;p&gt;As &lt;strong&gt;funções anônimas&lt;/strong&gt;, também chamadas de &lt;strong&gt;closures&lt;/strong&gt;, &lt;strong&gt;lambda functions&lt;/strong&gt;, &lt;strong&gt;funções de primeira ordem&lt;/strong&gt;, &lt;strong&gt;funções de ordem superior&lt;/strong&gt;, são blocos de instruções que não possuem nome, podem receber parâmetros e são interpretadas pela linguagem como expressões.&lt;/p&gt;
&lt;p&gt;Uma função anônima possui um bloco de instrução, porém, não possuem referência que as identifiquem e, por conseguinte, não estarão no escopo para que possamos invoca-las.&lt;/p&gt;
&lt;p&gt;A vantagem das funções anônimas e, que as tornam especiais, é que podemos armazena-las e manipula-las como fazemos com variáveis, e assim, podemos envia-las como sendo um parâmetro de uma função. A função receptora por sua vez, será capaz de executar a função anônima que foi recebida como parâmetro e ainda, passar os argumentos definidos no cabeçalho da mesma e recebendo a resposta da execução.&lt;/p&gt;
&lt;p&gt;Assim, temos que uma função anônima possui todas as características e, funciona com os mesmo princípios que qualquer função, porém, como o nome sugere, esta não possui um nome - por isso: anônima!&lt;/p&gt;
&lt;p&gt;É comum a utilização de funções anônimas como &lt;tt class="docutils literal"&gt;callback&lt;/tt&gt;, isto é, passarmos a função anônima como parâmetro e num determinado momento, a função que a recebeu, invoque a função e de continuidade ao processamento.&lt;/p&gt;
&lt;p&gt;Para atribuirmos uma função anonima a uma variável, basta declararmos um bloco e atribuirmos este, diretamente, a uma determinada variável, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# o bloco de instrução a seguir, será atribuido à&lt;/span&gt;
&lt;span class="x"&gt;# variável de nome $func e, para executar o código&lt;/span&gt;
&lt;span class="x"&gt;# utilizaremos o nome da variável&lt;/span&gt;
&lt;span class="x"&gt;$func = function($num){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;Valor do parâmetro recebido &amp;quot; . $num;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;

&lt;span class="x"&gt;# aqui, estamos invocando a função anonima&lt;/span&gt;
&lt;span class="x"&gt;# declarada nas linhas acima&lt;/span&gt;
&lt;span class="x"&gt;$func(10);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No bloco de código acima, definimos uma função anonima e, ainda na definição, atribuimos a sua referência à variável &lt;code&gt;$func&lt;/code&gt;. Em seguida, utilizamos a instrução que já estudamos para a definição de funções - &lt;code&gt;function&lt;/code&gt;, definimos um parâmetro de nome &lt;code&gt;$num&lt;/code&gt; e, por fim, definimos o bloco de instrução da função anonima com uma par de chaves. Feito isso, temos um bloco de instrução como qualquer outra, a única diferença é que podemos retornar valores com o uso da instrução &lt;code&gt;return&lt;/code&gt; que, também já foi estudada.&lt;/p&gt;
&lt;p&gt;Funções anônimas são expressões como quaisquer outras (como atribuição de números ou manipulação de string), logo, estas podem ser adicionada a uma variável, atribuida a um array e etc.&lt;/p&gt;
&lt;p&gt;Como prova de que as funções anonimas são expressões, somos obrigados a utilizar um ponto e vírgula após a definição do bloco de instrução, até porque, a mesma não é uma função, mas sim, uma expressão e, como sabemos, toda expressão é finalizada com ponto-e-vírgula.&lt;/p&gt;
&lt;p&gt;Após atribuirmos a função a uma variável, para invoca-la, basta adicionarmos os parêntesis após o nome [da variável´] e, definir os parâmetros conforme a declaração.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#FUNÇÕES ANÔNIMAS&lt;/span&gt;


&lt;span class="x"&gt;$func = function($nome){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;O nome enviado como parâmetro é: $nome&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;

&lt;span class="x"&gt;function teste($f){&lt;/span&gt;
&lt;span class="x"&gt;    $f(&amp;quot;Cláudio&amp;quot;);&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;teste($func);&lt;/span&gt;
&lt;span class="x"&gt;//$func(&amp;quot;eXcript&amp;quot;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="função"></category><category term="função anonima"></category><category term="lambda"></category><category term="closures"></category><category term="função lambda"></category><category term="função de primeira ordem"></category><category term="função de ordem superior"></category><category term="blog"></category></entry><entry><title>Herança em PHP</title><link href="http://excript.com/php/heranca-php.html" rel="alternate"></link><published>2016-06-11T06:10:00-03:00</published><updated>2016-06-11T06:10:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-11:/php/heranca-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o conceito de herança segundo a Orientação a Objetos. Em seguida, faremos um exemplo para estudarmos a aplicação do conceito da herança em uma situação real.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="heranca"&gt;
&lt;h2&gt;HERANÇA&lt;/h2&gt;
&lt;p&gt;A herança representa uma das principais características da &lt;strong&gt;Orientação a Objetos&lt;/strong&gt;, até porque, somos capazes de implementar tipos de dados …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o conceito de herança segundo a Orientação a Objetos. Em seguida, faremos um exemplo para estudarmos a aplicação do conceito da herança em uma situação real.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="heranca"&gt;
&lt;h2&gt;HERANÇA&lt;/h2&gt;
&lt;p&gt;A herança representa uma das principais características da &lt;strong&gt;Orientação a Objetos&lt;/strong&gt;, até porque, somos capazes de implementar tipos de dados hierarquicamente. Através do conceito de herança, conseguimos implementar classes de uso geral, que possuam características comuns a várias entidades relacionadas.&lt;/p&gt;
&lt;p&gt;Essas classes poderão ser estendidas por outras, produzindo assim, classes mais especializadas e, que implementem funcionalidades que as tornam únicas.&lt;/p&gt;
&lt;p&gt;Através da herança, poderemos utilizar propriedades e métodos definidos na superclasse. Uma boa maneira de pensarmos neste conceito é sob a perspectiva de obter objetos mais especializados conforme aumente a hierarquia. Devemos tomar cuidado com o conceito de hereditariedade animal, até porque, os filhotes não possuem, necessariamente, as características dos pais. Já, o conceito de herança na Orientação a Objetos define que, todo herdeiro receberá o conjunto de características definidas como público e privado e, terá acesso total as funcionalidades definidas na superclasse. Assim, a única maneira de restringir os herdeiros é definindo membros privados, até porque, do contrário, todo e qualquer herdeiro poderá alterar quaisquer informação.&lt;/p&gt;
&lt;p&gt;É comum que classes derivadas sejam novamente utilizadas como base para outras. Assim, somos capazes de estender qualquer classe que não tenha o seu construtor definido como privado.&lt;/p&gt;
&lt;p&gt;Se tomarmos como exemplo a ideia de frutas, temos que a classe fruta conterá o código que define as propriedades e funções de todas as frutas, enquanto que a classe &lt;tt class="docutils literal"&gt;Maçã&lt;/tt&gt;, receberá as funções e atributos de todas as frutas, e implementará as propriedades e funções que somente as maçãs possuem.&lt;/p&gt;
&lt;p&gt;Toda &lt;strong&gt;classe poderá ser herdada&lt;/strong&gt; e para isso, não é preciso fazer nada de especial, ou seja, o uso da herança se resume a definição explicita na declaração de uma nova classe que a mesma será uma &amp;quot;continuação&amp;quot; de outra.&lt;/p&gt;
&lt;p&gt;Classes que são herdadas são chamadas de &lt;strong&gt;Classe Base&lt;/strong&gt;, &lt;strong&gt;Super&lt;/strong&gt;, &lt;strong&gt;SuperClasse&lt;/strong&gt;. Classe herdeira são chamadas de &lt;strong&gt;Classes Derivadas&lt;/strong&gt;, ou &lt;strong&gt;SubClasse&lt;/strong&gt;. Também é comum chamarmos as classes base de superclasses, e as classes que herdam desta, como sendo subclasses.&lt;/p&gt;
&lt;p&gt;O PHP não suporta herança múltipla, porém, o mesmo disponibiliza a utilização de &lt;tt class="docutils literal"&gt;traits&lt;/tt&gt;, que permite a definição de conjuntos de características. &lt;tt class="docutils literal"&gt;Traits&lt;/tt&gt; serão estudadas posteriormente e também, não podemos confundir o conceito de herança múltipla com &lt;tt class="docutils literal"&gt;traits&lt;/tt&gt;, até porque, numa análise superficial há semelhanças, mas em teoria, são conceitos distintos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-sintaxe-para-uso-da-heranca"&gt;
&lt;h2&gt;A SINTAXE PARA USO DA HERANÇA&lt;/h2&gt;
&lt;p&gt;Uma classe herdeira, deverá, por definição, utilizar a instrução &lt;cite&gt;extends&lt;/cite&gt; e, em seguida, definir a classe que será estendida. O código a seguir faz uma breve demonstração da nomenclatura que deve ser utilizada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;class Pai()&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;class Filho extends Pai&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    #a classe filha utiliza a instrução `extends` e em seguida define&lt;/span&gt;
&lt;span class="x"&gt;    # o nome da classe que está sendo estendida&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Como podemos ver no trecho de código acima, a classe &lt;cite&gt;Pai&lt;/cite&gt; está sendo estendida pela classe de nome &lt;cite&gt;Filha&lt;/cite&gt; e, para isso, utilizou-se a instrução &lt;cite&gt;extends&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="como-a-subclasse-utiliza-os-membros-da-super"&gt;
&lt;h2&gt;COMO A SUBCLASSE UTILIZA OS MEMBROS DA SUPER&lt;/h2&gt;
&lt;p&gt;Toda SubClasse poderá acessar os membros da &lt;strong&gt;super&lt;/strong&gt; diretamente, como se estes membros tivessem sido declarados em seu corpo. Segundo a teoria da Orientação a Objetos, toda classe herdeira deve ter acesso direto ao membros públicos e protegidos da super.&lt;/p&gt;
&lt;p&gt;Assim, salvo se lermos o código, não será possível saber em qual nível hierarquico que determinado membro foi definido.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;class SuperClasse {&lt;/span&gt;

&lt;span class="x"&gt;    public $a = &amp;#39;variável $a&amp;#39;;&lt;/span&gt;

&lt;span class="x"&gt;    public function ola()&lt;/span&gt;
&lt;span class="x"&gt;    {&lt;/span&gt;
&lt;span class="x"&gt;        echo &amp;quot;SuperClasse-&amp;gt;ola()&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;class SubClasse extends SuperClasse {&lt;/span&gt;

&lt;span class="x"&gt;    #nada será declarado na SubClasse a fim de melhor entendermos&lt;/span&gt;
&lt;span class="x"&gt;    # o funcionamento da herança de propriedades e funcionalidades&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;$super = new SuperClasse();&lt;/span&gt;
&lt;span class="x"&gt;$super-&amp;gt;ola();&lt;/span&gt;
&lt;span class="x"&gt;$super-&amp;gt;a = 10;&lt;/span&gt;

&lt;span class="x"&gt;$sub = new SubClasse();&lt;/span&gt;
&lt;span class="x"&gt;$sub-&amp;gt;ola();&lt;/span&gt;
&lt;span class="x"&gt;$sub-&amp;gt;a = 10;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="{filename}../curso-php/0106_visibilidade-funcao-php.rst"&gt;A visibilidade dos membros de classe será estudada em detalhes em aulas posteriores&lt;/a&gt;, porém, desde já tenha em mente que, classes herdeiras só são privadas de acessar os membros definidos como &lt;code&gt;private&lt;/code&gt;, isto é, definidos como sendo privado!&lt;/p&gt;
&lt;p&gt;No geral, todo herdeiro &lt;strong&gt;deve possuir acesso&lt;/strong&gt; aos demais membros, sejam eles públicos ou protegidos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heranca-na-pratica"&gt;
&lt;h2&gt;HERANÇA NA PRÁTICA&lt;/h2&gt;
&lt;p&gt;Agora, vamos implementar as classes de &lt;strong&gt;Pessoa Física&lt;/strong&gt; e &lt;strong&gt;Pessoa Jurídica&lt;/strong&gt; e, ambas serão herdeiras da classe &lt;tt class="docutils literal"&gt;Pessoa&lt;/tt&gt;. A ideia é que a classe &lt;tt class="docutils literal"&gt;Pessoa&lt;/tt&gt; implemente o que é de uso comum entre as 2 definições de pessoas: física ou jurídicas. Enquanto que as classe PF e PJ implementem somente as informações referentes ao seu tipo de pessoa.&lt;/p&gt;
&lt;p&gt;A ideia é ter um tipo de pessoa genérica e também, as pessoas especializadas, isso porque, um PF poderia, por exemplo, ser um paciente, um cliente, um vendedor, logo, seremos capazes de saber, por exemplo, as várias finalidades referentes a uma mesma Pessoa. Da mesma forma, temos que um PJ poderia ser um fornecedor, uma revenda, um cliente e etc.&lt;/p&gt;
&lt;p&gt;É interessante observar que, um cliente, normalmente, pode ser tanto PF como também PJ. Assim, ao implementarmos o cadastro de Clientes, temos que disponibilizar ambas as opções o que atrapalhará o desenvolvimento. Por outro lado, uma mesma pessoa por ter 2 razões sociais, isto é, 2 CNPJ distintos e assim, a pessoa de maneira geral será a mesma para as 2 pessoas jurídicas distintas.&lt;/p&gt;
&lt;p&gt;Existem alguma nomenclaturas distintas que encontraremos na literatura especializada da relação entre níveis diferentes das classes. Todas as terminologias aqui utilizadas forma retiradas do &lt;a class="reference external" href="http://excript.com/dicionario/indice.html"&gt;dicionário técnico eXcript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Herança: capacidade de herdar as características de outra classe
Classe: projeto de todo objeto - instância
SuperClasse: a classe pai; classe que esta sendo estendida.
SubClasse: nome da classe que está implementando outra.
Classe-pai: classe utilizada como base para a criação de outras.
Classe-base: sinônimo a SuperClasse&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# HERANÇA I&lt;/span&gt;

&lt;span class="x"&gt;class SuperClasse{&lt;/span&gt;

&lt;span class="x"&gt;    public $a = &amp;#39;variável $a&amp;#39;;&lt;/span&gt;

&lt;span class="x"&gt;    public function ini(){&lt;/span&gt;
&lt;span class="x"&gt;        echo &amp;quot;SuperClasse-&amp;gt;ini()&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;class SubClasse extends SuperClasse{&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;$super = new SuperClasse();&lt;/span&gt;
&lt;span class="x"&gt;$super-&amp;gt;ini();&lt;/span&gt;
&lt;span class="x"&gt;$super-&amp;gt;a = &amp;quot;&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;$sub = new SubClasse();&lt;/span&gt;
&lt;span class="x"&gt;$sub-&amp;gt;ini();&lt;/span&gt;
&lt;span class="x"&gt;$sub-&amp;gt;a = &amp;quot;qualquer valor&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="veja-tambem"&gt;
&lt;h2&gt;VEJA TAMBÉM&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/primeira-classe-php.html"&gt;Aula 91: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/membro-de-classe-php.html"&gt;Aula 92: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0093_criacao-objetos-php.rst"&gt;Aula 93: Criação de Objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0094_acessando-membros-classe-php.rst"&gt;Aula 94: Acessando Membros de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/implementando-funcionalidades-classe-php.html"&gt;Aula 95: Implementando Funcionalidades na Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0096_pseudo-variavel-this-php.rst"&gt;Aula 96: Pseudo variável $this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0097_gerenciando-atributos-classe-php.rst"&gt;Aula 97: Gerenciando atributos de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-php.html"&gt;Aula 98: Construtor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-personalizado-php.html"&gt;Aula 99: Construtores Personalizados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/destrutores-php.html"&gt;Aula 100: Destrutores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php.html"&gt;Aula 101: Encapsulamento I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php-parte2.html"&gt;Aula 102: Encapsulamento II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/heranca-php.html"&gt;Aula 103: Herança I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0104_heranca-php-ii.rst"&gt;Aula 104: Herança II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0105_modificador-acesso-php.rst"&gt;Aula 105: Modificadores de Acesso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0106_visibilidade-funcao-php.rst"&gt;Aula 106: Visibilidade das Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0107_funcoes-modificadoras-php.rst"&gt;Aula 107: Funções Modificadoras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/sobrescrita-funcao-php.html"&gt;Aula 108: Sobrescrita de Funções&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="links-externos"&gt;
&lt;h2&gt;LINKS EXTERNOS&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://php.net/manual/pt_BR/language.oop5.basic.php"&gt;Classes em PHP (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.tutsplus.com/pt/tutorials/object-oriented-php-for-beginners--net-12762"&gt;Objetos e Classes (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikibooks.org/wiki/PHP_Programming/Classes"&gt;PHP Programming: Classe (en)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="programação orientada a objetos"></category><category term="poo"></category><category term="herança"></category><category term="encapsulamento"></category><category term="classe"></category><category term="objeto"></category><category term="instância"></category><category term="blog"></category></entry><entry><title>Visão Geral do PHP</title><link href="http://excript.com/php/visao-geral-php.html" rel="alternate"></link><published>2016-06-10T18:00:00-03:00</published><updated>2016-06-10T18:00:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-10:/php/visao-geral-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula teremos uma visão geral sobre a linguagem PHP, veremos seus principais recursos, suas principais características e a razão pela qual há tantas pessoas utilizando essa linguagem ao redor do mundo.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;VISÃO GERAL DO PHP&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;introdução&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;O PHP é uma das linguagens mais utilizadas do mundo e, para o …&lt;/p&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula teremos uma visão geral sobre a linguagem PHP, veremos seus principais recursos, suas principais características e a razão pela qual há tantas pessoas utilizando essa linguagem ao redor do mundo.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;VISÃO GERAL DO PHP&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;introdução&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;O PHP é uma das linguagens mais utilizadas do mundo e, para o desenvolvimento Web a mesma ainda é a mais utilizada. Isso não significa que o PHP seja a melhor linguagem, mas sim que o mesmo possui uma grande adoção pela comunidade de desenvolvimento.&lt;/p&gt;
&lt;p class="last"&gt;Atualmente, todos que desenvolvem para WEB possuem no mínimo, uma noção da linguagem PHP, isso porque, a mesma deriva da linguagem C e C++, mesmo que em suas primeiras versões, tenha sido criada com a linguagem PERL.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;o que significa PHP?&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;O ermos PHP é um assíncrono de &lt;strong&gt;Hypertext Preprocessor&lt;/strong&gt;, ou seja, uma linguagem de processamento de hipertexto. Hipertexto é chamado todo texto que possui links internos para a navegação entre diferentes páginas.&lt;/p&gt;
&lt;p class="last"&gt;Antigamente, nas primeiras versões da linguagem PHP, dizia-se que o termo era um assíncrono de &lt;strong&gt;Personal Home Page&lt;/strong&gt;, porém, atualmente, essa definição vem sendo negada até pela documentação oficial e, infelizmente, poucos ousam a relembrar as verdadeiras origens do termo.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;server-side&lt;/dt&gt;
&lt;dd&gt;O termos server-side vem do Inglês e significa que o código é executado do lado do servidor. Server vem de servidor e side significa lado, por isso Server-Side, ou seja: Do lado do servidor.&lt;/dd&gt;
&lt;dt&gt;documentação e comunidade&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Uma tecnologia para fazer sucesso precisa, antes de tudo, de excelente documentação. Até porque, não há como um conhecimento se difundir quando não existe uma fonte primária para consultar e assim, aprender e ensinar algum conceito.&lt;/p&gt;
&lt;p&gt;Por isso, quando você tiver algum problema ou então, não souber utilizar alguma instrução, esteja certo que, muito provavelmente, alguém já teve a mesma dúvida que você e por isso, encontrarás alguma documentação em alguma parte da Web.&lt;/p&gt;
&lt;p class="last"&gt;A comunidade PHP é gigantesca no mundo e esse talvez seja o fenômeno do porque, tudo está tão bem documentado e com tantos exemplos disponíveis. Seja em inglês, português ou espanhol, há centenas de sites que trazem bastante documentação sobre qualquer aspecto da linguagem.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;grandes frameworks&lt;/dt&gt;
&lt;dd&gt;Existem grandes frameworks escritos em PHP, como por exemplo o Wordpress e o Magento que são, respectivamente, o maior sistema de blog e loja virtual do mundo. Ainda que isso não prove muita coisa é um excelente indicador do quão robusta está determinada tecnologia.&lt;/dd&gt;
&lt;dt&gt;produtividade ao extremo&lt;/dt&gt;
&lt;dd&gt;A linguagem PHP é uma linguagem viva e a cada nova versão a sintaxe e performance vem sendo aprimorada. Logo, conseguimos com o PHP uma produtividade que beira ao extremo e um processamento que equipara-se com as maiores tecnologias concorrentes.&lt;/dd&gt;
&lt;dt&gt;fácil aprendizado&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;Observa-se que muitas pessoas tem como primeira linguagem o PHP, logo, o mesmo vem, indiretamente demonstrando que, pode ser uma excelente opção como primeira linguagem de programação.&lt;/p&gt;
&lt;p class="last"&gt;O Curso de PHP da eXcript é um excelente lugar para todos que estejam dando os primeiros passos com a programação ou então, para aqueles que nunca antes ouviram falar sobre programação. Todo o nosso curso parte do princípio de que o aluno nada sabe e nada conhece, logo, abordamos o estudo desde o início, desde os fundamentos da Web e da lógica de programação.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;interpretado&lt;/dt&gt;
&lt;dd&gt;A linguagem PHP, ao contrário das linguagens C e C++ é interpretada, isto é, a mesma não possui as fases de compilação e geração de código binário. Até é possível compilar um código PHP, porém, normalmente, o código é interpretado no momento em que for solicitado.&lt;/dd&gt;
&lt;dt&gt;paradigmas suportados&lt;/dt&gt;
&lt;dd&gt;O PHP suporta vários paradigmas de programação, como a orientação a objetos, programação procedural, funcional dentre outros. Neste curso aprenderemos os diversos paradigmas separadamente.&lt;/dd&gt;
&lt;dt&gt;multiplataforma&lt;/dt&gt;
&lt;dd&gt;Hoje, existem interpretadores da linguagem PHP para praticamente todas as plataformas que rodam do lado do servidor. Por isso, é comum dizermos que o PHP é multiplataforma, ou seja, que pode ser executado em diversos sistemas operacionais e obter resultados semelhantes.&lt;/dd&gt;
&lt;dt&gt;acesso a banco de dados&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;O interpretador da linguagem PHP foi escrito em C e C++, logo, podemos facilmente extender a linguagem, criar extensões e implementar funcionalidades, como por exemplo a conexão a banco de dados. De fábrica, o PHP se conecta ao SQLite e MySQL, porém, basta baixarmos extensões para nos conectarmos a outras bases de dados.&lt;/p&gt;
&lt;p class="last"&gt;Por isso dizemo que a linguagem é extensível, pois, qualquer pessoa pode, facilmente, criar recursos e disponibilizar novas funções.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="história do php"></category></entry><entry><title>A Orientação a Objetos em PHP</title><link href="http://excript.com/php/orientacao-a-objetos-em-php.html" rel="alternate"></link><published>2016-06-10T01:45:00-03:00</published><updated>2016-06-10T01:45:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-10:/php/orientacao-a-objetos-em-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula teremos uma introdução à Programação Orientada a Objeto e, estudaremos os principais conceitos relacionados.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;Orientação a Objetos&lt;/strong&gt; é uma paradigma de programação, isto é, uma metodologia para o desenvolvimento de software. A definição de orientação, utilizando a definição como sendo um Verbo transitivo direto e indireto …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula teremos uma introdução à Programação Orientada a Objeto e, estudaremos os principais conceitos relacionados.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;Orientação a Objetos&lt;/strong&gt; é uma paradigma de programação, isto é, uma metodologia para o desenvolvimento de software. A definição de orientação, utilizando a definição como sendo um Verbo transitivo direto e indireto, significa, determinar a posição, orientar, indicar o rumo, guiar, dirigir, nortear. Objeto, por sua vez, é tudo que pode ser manipulado, possui características e desempenha funcionalidades.&lt;/p&gt;
&lt;p&gt;Podemos aferir que o termo &lt;strong&gt;Orientação&lt;/strong&gt; é o modelo utilizado, o que norteará tudo e, &lt;strong&gt;objeto&lt;/strong&gt;, a definição de cada parte do modelo.&lt;/p&gt;
&lt;p&gt;Segundo a análise das definições acima a respeito de &lt;strong&gt;orientação&lt;/strong&gt; e de &lt;strong&gt;objeto&lt;/strong&gt;, podemos aferir também que o &lt;strong&gt;Paradigma Orientado a Objetos&lt;/strong&gt; é o modelo de projeto onde todas as informações serão definidas e utilizadas como sendo objetos, isto é, entidades representativas, ou então, podemos dizer que tudo tornar-se-á objetos e poderá ser manipulado como sendo uma entidade.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-filosofia-e-a-orientacao-a-objetos"&gt;
&lt;h2&gt;A FILOSOFIA E A ORIENTAÇÃO A OBJETOS&lt;/h2&gt;
&lt;p&gt;O estudo teórico da orientação a objeto está recheado de conceitos filosóficos e suas definições. A primeira, evidentemente, é o conceito da natureza do objeto. Comumente, diz-se que objeto é tudo que é físico e que pode ser visto ou então, segurado nas mãos. Porém, se falarmos sobre empresas, no plural, temos que o conceito é ou não é um objeto?&lt;/p&gt;
&lt;p&gt;Para a filosofia clássica, o plural é um conceito abstrato e que só existirá se houver, antes de tudo, alguma empresa fisicamente. A programação orientada a objetos analisa, geralmente, o conceito de empresa abstrato. Da mesma forma podemos perguntar o que é uma floresta? Floresta é a observação de arvores independentes observadas como pertences a um conjunto, no caso - a floresta.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="objeto"&gt;
&lt;h2&gt;OBJETO&lt;/h2&gt;
&lt;p&gt;Em nosso mundo, &lt;strong&gt;objeto&lt;/strong&gt; é tudo que é físico e portanto, que pode ser manipulado. Tudo que é físico possui, por definição do termo &lt;strong&gt;físico&lt;/strong&gt; características e portanto, pode desempenhar atividades.&lt;/p&gt;
&lt;p&gt;Se tomarmos como exemplo uma pedra, temos que está é um objeto, existe fisicamente, possui propriedades e, pode desempenhar alguma função. Toda pedra desempenha uma função? Não sei lhe dizer, mas garanto que podemos decidir que determinada pedra desempenha alguma funcionalidade. Quais as funcionalidades que uma pedrão pode desempenhar? Tudo que as suas características nos fornecerem como uma forma de utiliza-la.&lt;/p&gt;
&lt;p&gt;Toda objeto, ou melhor, todas as pedras possuem características, como por exemplo, peso, dimensão, coloração, densidade, propriedades fisico-químicas e etc. Toda característica pode ser explorada, isto é, servir para algum fim. O peso da pedra, por exemplo, pode ser utilizado para travar uma porta. A coloração de uma pedra pode ser utilizada como decoração de muros e paredes. As propriedades físico-químicas podem ser utilizadas para ativar ou desativar uma reação e assim por diante.&lt;/p&gt;
&lt;p&gt;O que precisamos entender nesse momento é que &lt;strong&gt;todo objeto&lt;/strong&gt; possui &lt;strong&gt;propriedades&lt;/strong&gt; e &lt;strong&gt;todo objeto&lt;/strong&gt; possui &lt;strong&gt;funcionalidades&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="propriedades"&gt;
&lt;h2&gt;PROPRIEDADES&lt;/h2&gt;
&lt;p&gt;Propriedade é toda e qualquer característica dos objetos. É importante saber que &lt;strong&gt;propriedade&lt;/strong&gt;, &lt;strong&gt;característica&lt;/strong&gt; e &lt;strong&gt;atributo&lt;/strong&gt; são, na orientação a objetos, sinônimos.&lt;/p&gt;
&lt;p&gt;A afirmação de que todo objeto possui propriedades é verdadeira e, aquele que disser o contrário, que demonstre o objeto que não existe, até porque, existir é a primeira propriedade de &lt;strong&gt;TODO&lt;/strong&gt; objeto que, também pode ser considerado uma funcionalidade.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="funcao"&gt;
&lt;h2&gt;FUNÇÃO&lt;/h2&gt;
&lt;p&gt;A função é aquilo que o objeto desempenha. Nem todo objeto terá definido funções explicitamente, até porque, há objetos cuja funcionalidade é guardar valores, ou seja, guardar propriedades.&lt;/p&gt;
&lt;p&gt;Todo objeto pode desempenhar 2 tipos de funcionalidades: interna e externa. Um objeto pode, por exemplo, alterar suas propriedades sem interagir com o meio em que está contido. Da mesma forma que um objeto pode alterar suas propriedades pela interação com o meio.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="informacao-vs-propriedade"&gt;
&lt;h2&gt;INFORMAÇÃO vs PROPRIEDADE&lt;/h2&gt;
&lt;p&gt;Já estudamos que todo objeto possui propriedades, agora, vamos estudar o que são realmente as propriedades.&lt;/p&gt;
&lt;p&gt;É correto dizer que os objetos físicos possuem cor. Logo, todo objeto físico deve ter a propriedade cor, porém, se analisarmos com atenção, objetos não possuem propriedades e sim uma cor propriamente dita. Parece simples e até idiota a análise, no entanto, vejamos que, o projeto de todo objeto possui propriedades, enquanto que os objetos, em sua definição, possuem por exemplo, uma cor e não uma propriedade.&lt;/p&gt;
&lt;p&gt;O que temos de entender do conceito exposto é, que a orientação a objetos, inicialmente, trabalha com o projeto de como será cada objeto, em seguida, quando houver um objeto criado através do projeto, teremos algo físico que possui características que, iremos chamar de propriedades, mesmo sabendo que somente o projeto é que possui a definição de propriedade.&lt;/p&gt;
&lt;p&gt;Podemos resumir todo o exposto pela análise do conjunto e da unidade. A POO faz com que criemos entidades representativas e, nos obriga a definir as propriedades e funcionalidades dessas entidades. Podemos dizer então, que num primeiro momento estaremos trabalhando com o conjunto, isto é, definimos as características e funcionalidades que &lt;strong&gt;todos&lt;/strong&gt; objetos criados terão. Em seguida, após definir o projeto, escreveremos que desejamos que seja criado um objeto e que este possua determinados valores segundo as propriedades anteriormente definidas. Assim, temos que entender as 2 fases da POO, onde a primeira será a definição do projeto e a segunda a utilização propriamente dita.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="objetos-especializados"&gt;
&lt;h2&gt;OBJETOS ESPECIALIZADOS&lt;/h2&gt;
&lt;p&gt;Especialização é o aprimoramento de determinada característica. Se estudarmos as frutas, inicialmente iremos definir o conceito de fruta propriamente dito. Em seguida, iremos por exemplo, estudar as melancias que são, antes de mais nada frutas, porém, possuem características únicas.&lt;/p&gt;
&lt;p&gt;A análise de frutas de maneira geral é o projeto pelo qual todas as frutas são baseadas, logo, é correto dizer que, todas as frutas possuem um conjunto de características e funcionalidades iguais. Assim, quando formos definir o projeto da melancia iremos utilizar como base o projeto das frutas, do contrário, teremos projetos redundantes.&lt;/p&gt;
&lt;p&gt;O projeto das melancias terá definições que toda melancia possui, logo, quando criarmos uma melancia através deste projeto, teremos um objeto que é, ao mesmo tempo uma fruta e uma melancia. Isso porque, a melancia foi projetada se valendo do projeto das frutas, logo, toda melancia é uma fruta, mas nem toda fruta será uma melancia.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="definicao-de-objetos-que-nao-sao-objetos"&gt;
&lt;h2&gt;DEFINIÇÃO DE OBJETOS QUE NÃO SÃO OBJETOS&lt;/h2&gt;
&lt;p&gt;O estudo filosófico da OO é sem dúvida intrigante, até porque, o mesmo nos orienta a representar toda e qualquer informação como sendo entidades isoladas. Porém, muitas serão as entidades que precisaremos criar uma representação física, porém, no mundo real, a mesma possui uma definição abstrata.&lt;/p&gt;
&lt;p&gt;Tomemos por exemplo o setor de RH e a necessidade de informatizar o mesmo. Para isso, nossa primeira atividade será, o estudo de como o setor funciona. Vamos criar uma situação hipotética para facilitar o estudo.&lt;/p&gt;
&lt;p&gt;Observamos que o setor de RH faz o cadastro dos colaboradores. O RH também gerencia aqueles que desejam se tornar colaboradores. O RH define o salário e a função de cada colaborador e, conforme a função definida pelo RH para determinado colaborador, este terá acesso as várias partes do nosso programa.&lt;/p&gt;
&lt;p&gt;Então, concluimos que, o setor de RH precisa, num primeiro momento de um cadastro de colaboradores e de um cadastro daqueles que desejam tornar-se colaboradores. Logo, desenhamos num papel que:&lt;/p&gt;
&lt;p&gt;Colaboradores
* Nome
* Idade
* Cargo
* Ativo/Demitido
* Data admissão&lt;/p&gt;
&lt;p&gt;Acabamos de definir algumas propriedades dos colaboradores, e coloca-mo-as numa espécie de lista. Assim, temos as propriedades, agora, quais seriam as funções desses colaboradores? Nesse momento vamos deixar essa resposta em aberto.&lt;/p&gt;
&lt;p&gt;Vamos supor que tenhamos programado um cadastro que contenha a lista de informações elucidadas para os Colaboradores. Esse cadastro nos forneceu a capacidade de Incluir, Alterar e Excluir Colaboradores. Até esse momento, o nosso trabalho foi a implementação de algo que ocorre fisicamente, isto é, quando não há um sistema informatizado, há papeis, formulários físicos que são utilizados para este fim.&lt;/p&gt;
&lt;p&gt;Agora vamos supor que um Colaborar tenha sido demitido, logo, vamos marcar o campo Ativo como sendo igual a Falso, até porque, o Colaborador não está ativo. Agora, vamos supor que 2 anos depois o Colaborador foi re-contratado pela empresa, logo, quando o RH for fazer o cadastro, o mesmo não poderá cadastrar alguém que já possui cadastrado, correto? Então, num primeiro momento concluímos que, o RH marque o cadastro do Colaborador como sendo ativo e num primeiro momento, passamos a acreditar que tudo está funcionando normalmente.&lt;/p&gt;
&lt;p&gt;Em um determinado dia, um chefe resolve analisar os lucros da empresa e, para isso, o mesmo utilizará o nosso sistema. Logo, o mesmo gera um relatório que contém toda a receita da empresa no ano passado menos o valor das despesas. A primeira pergunta a ser feita é: o Colaborador que teve o seu cadastrado recém ativado estará ou não no cálculo das despesas do ano que passou? Se o nosso sistema funcionar segundo a definição que acabamos de estudar, o colaborador será considerado uma despesa caso a data de admissão seja igual a data da sua primeira contratação. Porém, se alterarmos a data de admissão, este problema está resolvido! Mas, se o chefe quiser um relatório de lucro de 2 anos atrás, isto é, da época em que este colaborador estava ativo, o mesmo não entrará no relatório, até porque, a sua data de admissão foi alterada!&lt;/p&gt;
&lt;p&gt;Deste problema concluímos que, além do cadastro de colaboradores, é necessário um cadastro do período trabalhado. Agora, após a análise do problema, acabamos por ter uma informação que é totalmente abstrata e, o pior de tudo, a mesma nem possui um nome propriamente dito e a mesma nem existia na época em que não havia o nosso sistema! Obviamente que, o nosso programa irá criar uma entidade, isto é, um objeto para representar esse fenômeno, porém, na prática, a contratação e a demissão são objetos ou simplesmente ações?&lt;/p&gt;
&lt;p&gt;A moral da análise anterior é que com a POO, tudo tornar-se-á objetos, que possuirá identificador, propriedades e funcionalidades, porém, o paradoxo é que no mundo físico não há objeto de admissão e demissão, mas, no mundo virtual, onde não existem objetos físicos, haverá um objeto que conterá a definição de contratado, demitido, e em qual período ocorreu... o objeto ou a ação?&lt;/p&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="programação orientada a objetos"></category><category term="poo"></category></entry><entry><title>Primeira Classe em PHP</title><link href="http://excript.com/php/primeira-classe-php.html" rel="alternate"></link><published>2016-06-01T03:45:00-03:00</published><updated>2016-06-01T03:45:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-01:/php/primeira-classe-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula implementaremos a nossa primeira classe em PHP. Também estudaremos alguns conceitos sobre a programação orientada a objetos e os seus beneficios.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="os-objetos-e-o-php"&gt;
&lt;h2&gt;OS OBJETOS E O PHP&lt;/h2&gt;
&lt;p&gt;Nesta aula iniciaremos o estudo da Orientação a Objetos utilizando a linguagem PHP.&lt;/p&gt;
&lt;p&gt;Inicialmente temos de saber que o PHP incorporou os …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula implementaremos a nossa primeira classe em PHP. Também estudaremos alguns conceitos sobre a programação orientada a objetos e os seus beneficios.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="os-objetos-e-o-php"&gt;
&lt;h2&gt;OS OBJETOS E O PHP&lt;/h2&gt;
&lt;p&gt;Nesta aula iniciaremos o estudo da Orientação a Objetos utilizando a linguagem PHP.&lt;/p&gt;
&lt;p&gt;Inicialmente temos de saber que o PHP incorporou os conceitos da orientação a objetos e não o contrário. Ou seja, POO é uma definição para o desenvolvimento de software e que é utilizado por várias linguagens de programação de computadores. Programação Orientada a Objetos não é uma linguagem e não possui sintaxe definida. Trata-se de um conceito que utiliza a definição de objetos do mundo real para a construção de entidades representativas que contenham informações e um conjunto de funções e métodos para manipulação dos dados internos.&lt;/p&gt;
&lt;p&gt;Inicialmente, o PHP dispunha somente do paradigma de programação procedural, onde as aplicações eram construídas pela definição de funções em diversos arquivos e conforme necessário as funções iam sendo invocadas.&lt;/p&gt;
&lt;p&gt;Esse paradigma de programação, ou melhor, essa prática de desenvolvimento continua sendo válida na construção de códigos e, geralmente, é a porta de entrada dos novos programadores. Até porque, num primeiro momento, a literatura e os professores de PHP ensinam a utilizar funções sem nem ao menos declararmos uma função. Ou seja, colocamos todas as funções no corpo do arquivo que possui extensão *.php e executamos no browser.&lt;/p&gt;
&lt;p&gt;Assim, é comum em PHP utilizarmos os 2 paradigmas de programação e mais um terceiro, o paradigma de programação funcional. Logo, temos que o PHP suporta, basicamente, 3 paradigmas para o desenvolvimento de Scripts e aplicativos, são eles:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1. Paradigma de programação procedural
2. Paradigma de programação Orientado a Objetos
3. Paradigma de programação funcional
&lt;/pre&gt;
&lt;p&gt;A verdade é que não existe paradigma melhor ou pior, cada um busca servir a um propósito bem especifico e, mesmo sendo possível fazer em qualquer paradigma o que é feito em outro, a estrutura e a organização do código possui grande diferença, seja na leitura, seja na performance de sua execução.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conceito-de-classe"&gt;
&lt;h2&gt;CONCEITO DE CLASSE&lt;/h2&gt;
&lt;p&gt;Classe é um Tipo Abstrato de Dados (TAD), isto é, uma forma para declararmos um novo tipo de informação e, implementar os estados e os comportamentos do novo tipo de dado.&lt;/p&gt;
&lt;p&gt;Por definição, as classe permitem a definição de estado e de comportamento. Assim, conseguimos manter as informações e as funções que as manipulam numa mesma entidade representativa.&lt;/p&gt;
&lt;p&gt;Devemos entender o conceito de &lt;strong&gt;estado&lt;/strong&gt; como sendo os atributos, isto é, as variáveis propriamente ditas. Enquanto que o comportamento, são as funções, isto é, blocos de códigos que irão trabalhar e manipular os estados.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;estado&lt;/dt&gt;
&lt;dd&gt;atributos referentes as classes&lt;/dd&gt;
&lt;dt&gt;comportamento&lt;/dt&gt;
&lt;dd&gt;funções que manipulam os estados&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="primeira-classe"&gt;
&lt;h2&gt;PRIMEIRA CLASSE&lt;/h2&gt;
&lt;p&gt;Vamos criar a nossa primeira classe em PHP. Para isso, faremos uso da palavra-chave &lt;tt class="docutils literal"&gt;class&lt;/tt&gt; que, do Inglês, significa classe. Após o uso da instrução &lt;tt class="docutils literal"&gt;class&lt;/tt&gt;, temos que abrir e fechar chaves, definindo assim, o escopo de nomes público da classe.&lt;/p&gt;
&lt;p&gt;Isso quer dizer que todas as variáveis e funções deverão, obrigatoriamente, serem definidas entre os parêntesis que compreendem o bloco de instrução da classe, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;class &amp;lt; nome &amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    # &amp;lt;bloco de instrução da classe&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No código acima, definimos o esquema para a declaração de classes em PHP. Inicialmente, utilizamos a palavra reservada &lt;code&gt;class&lt;/code&gt;, em seguida, definimos o nome da classe e, por fim, abrimos e fechamos chaves definindo assim, o bloco de instrução que estarão contidos &lt;strong&gt;todas&lt;/strong&gt; as funções e propriedades da classe.&lt;/p&gt;
&lt;p&gt;Toda classe em POO deverá, obrigatoriamente, possuir um nome. &lt;a class="reference external" href="http://excript.com/php/nomenclatura-variavel-php.html"&gt;A composição de nomes segue as mesmas regras estudadas na definição de nomes de variáveis em PHP&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nomenclatura-convencional"&gt;
&lt;h2&gt;NOMENCLATURA CONVENCIONAL&lt;/h2&gt;
&lt;p&gt;É comum a composição de nome de classe seguindo o padrão CamelCase, isto é, a primeira letra de cada palavra deve estar em letra maiúscula. Por exemplo, &lt;tt class="docutils literal"&gt;ClasseTeste&lt;/tt&gt;. Como podemos ver, o nome fictício que definimos está composto por 2 palavras: clase e teste. Logo, para compormos um nome de classe com esses 2 termos, colaríamos as iniciais e maiúsculas e os uniriamos diretamente &lt;tt class="docutils literal"&gt;ClasseTeste&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Obviamente que, sendo você o programador, a nomenclatura que seguirás é aquela que desejares, porém, quando outro programador for ler o seu código, o nível de dificuldade se acentuará caso não estejas utilizando algum padrão. E, se por ventura, vieres a distribuir o seu código, será importante seguir as convenções já estabelecidas, até porque, é dessa forma que a comunidade está acostumada a ler e a estudar códigos PHP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="peculiaridade-na-nomenclatura-de-classe"&gt;
&lt;h2&gt;PECULIARIDADE NA NOMENCLATURA DE CLASSE&lt;/h2&gt;
&lt;p&gt;Aprendemos em aulas anteriores que o PHP é uma linguagem Case Sensitive, isto é, referências constituidas por letras maiúsculas e minúsculas são nomes diferentes de e fazem referência a entidades diferentes. Por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$nome_a = 10;&lt;/span&gt;
&lt;span class="x"&gt;$nome_A = 20;&lt;/span&gt;

&lt;span class="x"&gt;if ($nome_a == $nome_A)&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;1&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;if ($nome_A == $nome_A)&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;2&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#PRIMEIRA CLASSE EM PHP&lt;/span&gt;

&lt;span class="x"&gt;class Pessoa{&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="veja-tambem"&gt;
&lt;h2&gt;VEJA TAMBÉM&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/primeira-classe-php.html"&gt;Aula 91: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/membro-de-classe-php.html"&gt;Aula 92: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0093_criacao-objetos-php.rst"&gt;Aula 93: Criação de Objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0094_acessando-membros-classe-php.rst"&gt;Aula 94: Acessando Membros de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/implementando-funcionalidades-classe-php.html"&gt;Aula 95: Implementando Funcionalidades na Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0096_pseudo-variavel-this-php.rst"&gt;Aula 96: Pseudo variável $this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0097_gerenciando-atributos-classe-php.rst"&gt;Aula 97: Gerenciando atributos de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-php.html"&gt;Aula 98: Construtor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-personalizado-php.html"&gt;Aula 99: Construtores Personalizados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/destrutores-php.html"&gt;Aula 100: Destrutores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php.html"&gt;Aula 101: Encapsulamento I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php-parte2.html"&gt;Aula 102: Encapsulamento II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/heranca-php.html"&gt;Aula 103: Herança I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0104_heranca-php-ii.rst"&gt;Aula 104: Herança II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0105_modificador-acesso-php.rst"&gt;Aula 105: Modificadores de Acesso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0106_visibilidade-funcao-php.rst"&gt;Aula 106: Visibilidade das Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0107_funcoes-modificadoras-php.rst"&gt;Aula 107: Funções Modificadoras&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="links-externos"&gt;
&lt;h2&gt;LINKS EXTERNOS&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://php.net/manual/pt_BR/language.oop5.basic.php"&gt;Classes em PHP (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.tutsplus.com/pt/tutorials/object-oriented-php-for-beginners--net-12762"&gt;Objetos e Classes (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikibooks.org/wiki/PHP_Programming/Classes"&gt;PHP Programming: Classe (en)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="classe"></category><category term="programação orientada a objetos"></category><category term="poo"></category><category term="objeto"></category><category term="instância"></category><category term="blog"></category></entry><entry><title>Membros de Classe em PHP</title><link href="http://excript.com/php/membro-de-classe-php.html" rel="alternate"></link><published>2016-06-01T03:00:00-03:00</published><updated>2016-06-01T03:00:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-01:/php/membro-de-classe-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula o que são membros de classe, como defini-los e quais as características de melhores formas para defini-los e utiliza-los pelas nossas classes.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="adicionando-membros-a-nossa-classe-pessoa"&gt;
&lt;h2&gt;ADICIONANDO MEMBROS À NOSSA CLASSE &lt;tt class="docutils literal"&gt;PESSOA&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Estudamos que uma classe é um projeto e que quando executada se tornará num objeto. Assim, ao criarmos uma instância …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula o que são membros de classe, como defini-los e quais as características de melhores formas para defini-los e utiliza-los pelas nossas classes.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="adicionando-membros-a-nossa-classe-pessoa"&gt;
&lt;h2&gt;ADICIONANDO MEMBROS À NOSSA CLASSE &lt;tt class="docutils literal"&gt;PESSOA&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Estudamos que uma classe é um projeto e que quando executada se tornará num objeto. Assim, ao criarmos uma instância da classe, teremos um objeto construido a partir do código implementado nessa classe. Todo objeto, virtual ou físico, possui por definição do termo &amp;quot;objeto&amp;quot; atributos, ou seja, um objeto físico sempre possui uma cor, um peso, um formato e etc, já, um objeto virtual pode ter esses atributos ou então, qualquer outro.&lt;/p&gt;
&lt;p&gt;Como estudamos, podemos definir variáveis em quaisquer parte do nosso código e utilizar estas para armazenarmos o que bem entendermos. O conceito por detrás da definição de variáveis dentro do escopo de classe é fazer com que a informação dessa variável esteja relacionada a outras informação de determinado objeto. Por isso a definição de propriedades e por isso a utilização de variáveis.&lt;/p&gt;
&lt;p&gt;Cada instância terá todas as variáveis definidas em seu projeto, isto é, em sua classe. Logo, a alteração de uma variável na instância A não implica na alteração da variável de mesmo nome na instância B. Ambas instâncias forma criadas de um mesmo projeto, no entanto, são objetos distintos e a unica relação entre ambos é o projeto de sua construção.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;class Pessoa {&lt;/span&gt;
&lt;span class="x"&gt;    var $nome;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Toda variável contida em nossa classe é chamada de membro de classe, ou então, de propriedade ou atributo. Assim, temos que um objeto possui propriedades e estas são armazenadas nas variáveis que foram declaradas no escopo da classe da sua origem.&lt;/p&gt;
&lt;p&gt;Cada nova instância irá possuir as suas proprias propriedades e essas só poderão ser acessadas através da instância em que estão contidas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="palavra-chave-var-e-public"&gt;
&lt;h2&gt;PALAVRA-CHAVE &lt;tt class="docutils literal"&gt;var&lt;/tt&gt; E &lt;tt class="docutils literal"&gt;public&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;A declaração de variáveis numa classe ocorre de maneira um pouco diferente daquela que estudamos anteriormente, no início do nosso Curso de PHP. Aprendemos que basta definirmos um nome a atribuirmos a este um valor que já teremos uma variável. O que na declaração de variáveis dentro de classe é que a mesma deve ser precedida pelo seu nível de visibilidade. Inicialmente, estudaremos que as variáveis dentro de classe devem ser precedidas com a palavra-chave &lt;tt class="docutils literal"&gt;public&lt;/tt&gt;. No caso, estudaremos dessa forma pois estamos dizendo que todas as variáveis podem ser acessadas externamente, bastando somente a utilização de seu nome.&lt;/p&gt;
&lt;p&gt;Ainda é bastante comum encontrarmos código legado utilizando a palavra-chave para declaração de variáveis &lt;tt class="docutils literal"&gt;var&lt;/tt&gt;. Porém, essa é uma forma de declaração que entrou em desuso e o correto, atualmente, é utilizar uma das 3 opções:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estas 3 palavra-chaves, como pode ser deduzido, definem o nível de visibilidade que cada membro de classe terá. Nesse momento não estudaremos a visibilidade dos membros, então, utilizaremos em todos os exemplos a palavra-chave &lt;tt class="docutils literal"&gt;public&lt;/tt&gt;. Neste curso teremos, no mínimo, uma aulas para estudarmos a visibilidade dos membros de classe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;class Pessoa{&lt;/span&gt;
&lt;span class="x"&gt;    public $nome;&lt;/span&gt;
&lt;span class="x"&gt;    public $idade;&lt;/span&gt;

&lt;span class="x"&gt;    var $teste;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No código acima que foi feito na vídeo-aula, estamos definindo 3 variáveis públicas. As 2 primeiras estão precedidas pela palavra-chave &lt;tt class="docutils literal"&gt;public&lt;/tt&gt; e a última pela palavra-chave &lt;tt class="docutils literal"&gt;var&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Como já dito, a declaração de variáveis com o uso da palavra-chave &lt;tt class="docutils literal"&gt;var&lt;/tt&gt; não deve ser utilizada e só estamos demonstrando seu uso pois, ainda existe códigos definidos dessa maneira.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="veja-tambem"&gt;
&lt;h2&gt;VEJA TAMBÉM&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/primeira-classe-php.html"&gt;Aula 91: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/membro-de-classe-php.html"&gt;Aula 92: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0093_criacao-objetos-php.rst"&gt;Aula 93: Criação de Objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0094_acessando-membros-classe-php.rst"&gt;Aula 94: Acessando Membros de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/implementando-funcionalidades-classe-php.html"&gt;Aula 95: Implementando Funcionalidades na Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0096_pseudo-variavel-this-php.rst"&gt;Aula 96: Pseudo variável $this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0097_gerenciando-atributos-classe-php.rst"&gt;Aula 97: Gerenciando atributos de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-php.html"&gt;Aula 98: Construtor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-personalizado-php.html"&gt;Aula 99: Construtores Personalizados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/destrutores-php.html"&gt;Aula 100: Destrutores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php.html"&gt;Aula 101: Encapsulamento I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php-parte2.html"&gt;Aula 102: Encapsulamento II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/heranca-php.html"&gt;Aula 103: Herança I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0104_heranca-php-ii.rst"&gt;Aula 104: Herança II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0105_modificador-acesso-php.rst"&gt;Aula 105: Modificadores de Acesso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0106_visibilidade-funcao-php.rst"&gt;Aula 106: Visibilidade das Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0107_funcoes-modificadoras-php.rst"&gt;Aula 107: Funções Modificadoras&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="links-externos"&gt;
&lt;h2&gt;LINKS EXTERNOS&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://php.net/manual/pt_BR/language.oop5.basic.php"&gt;Classes em PHP (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.tutsplus.com/pt/tutorials/object-oriented-php-for-beginners--net-12762"&gt;Objetos e Classes (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikibooks.org/wiki/PHP_Programming/Classes#Members"&gt;PHP Programming: Membros de Classe (en)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="programação orientada a objetos"></category><category term="poo"></category><category term="classe"></category><category term="objeto"></category><category term="instância"></category><category term="blog"></category></entry><entry><title>Introdução às Estruturas de Repetição em PHP</title><link href="http://excript.com/php/estruturas-de-repeticao-php.html" rel="alternate"></link><published>2016-06-01T00:30:00-03:00</published><updated>2016-06-01T00:30:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-06-01:/php/estruturas-de-repeticao-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula iniciaremos o estudo das Estruturas de Repetição. Estudaremos as instrução que a linguagem PHP oferece para iterarmos estruturas e percorrermos os elementos de um Array.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;Estrutura de repetição é uma ferramenta que as linguagens de programação proporcionam para que possamos executar um determinado bloco de instrução mais …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula iniciaremos o estudo das Estruturas de Repetição. Estudaremos as instrução que a linguagem PHP oferece para iterarmos estruturas e percorrermos os elementos de um Array.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;Estrutura de repetição é uma ferramenta que as linguagens de programação proporcionam para que possamos executar um determinado bloco de instrução mais do que uma vez. Ou seja, o objetivo é proporcionar uma meio de execução de um trecho de código enquanto uma determinada condição for verdadeira.&lt;/p&gt;
&lt;p&gt;As expressões construídas com estas instrução podem ser utilizadas para decidirmos se vamos ou não executar um determinado bloco de instrução, ou então, para definirmos que um bloco será executado e por quantas vezes o será.&lt;/p&gt;
&lt;p&gt;O importante é termos em mente que a definição de condições é o que norteia a lógica de programação, até porque, se entendermos como uma expressão é construída, bastara aprendermos as estruturas da linguagem, e definir em cada uma a respectiva expressão lógica.&lt;/p&gt;
&lt;p&gt;Todos os operadores e todas as construções que estudamos anteriormente podem ser utilizadas na construção das expressões das estruturas de repetição, isto é, os operadores relacionais e os operadores lógicos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lacos-de-repeticao"&gt;
&lt;h2&gt;LAÇOS DE REPETIÇÃO&lt;/h2&gt;
&lt;p&gt;Para entendermos o que é um laço de repetição, vamos voltar para a primeira aula de tomada de decisão.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$x = 0;&lt;/span&gt;
&lt;span class="x"&gt;if($x &amp;lt;= 10){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;o valor de x eh &amp;quot; . $x&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Acima declaramos uma variável e estabelecemos uma condição. Agora, vamos copiar o código, porém, ao invés de utilizarmos a instrução &lt;tt class="docutils literal"&gt;if&lt;/tt&gt;, vamos alterar para &lt;tt class="docutils literal"&gt;while&lt;/tt&gt;. Do inglês, &lt;tt class="docutils literal"&gt;while&lt;/tt&gt; significa &lt;tt class="docutils literal"&gt;enquanto&lt;/tt&gt;, e na programação, a instrução &lt;tt class="docutils literal"&gt;while&lt;/tt&gt;, executará o seu bloco de instrução até que a condição definida seja satisfeita.&lt;/p&gt;
&lt;p&gt;Também vamos somar uma unidade a variável &lt;tt class="docutils literal"&gt;$x&lt;/tt&gt; dentro do bloco de instrução. Agora, vamos comparar ambos os código e estudar as semelhanças.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$x = 0;&lt;/span&gt;
&lt;span class="x"&gt;while($x &amp;lt; 10){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;o valor de x eh &amp;quot; . $x&lt;/span&gt;
&lt;span class="x"&gt;    $x = $x + 1;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Quando utilizamos a instrução &lt;tt class="docutils literal"&gt;if&lt;/tt&gt;, estamos verificando uma condição e caso a mesma for verdadeira, o bloco de instrução será executado (uma única vez). Da mesma forma temos com a instrução &lt;tt class="docutils literal"&gt;while&lt;/tt&gt;, enquanto a condição definida no cabeçalho for verificada, o bloco será executado. Ou seja, o bloco será executado &lt;tt class="docutils literal"&gt;enquanto&lt;/tt&gt; a condição estabelecida for atendida.&lt;/p&gt;
&lt;p&gt;Nós incrementando uma unidade à variável &lt;tt class="docutils literal"&gt;$x&lt;/tt&gt; a cada ciclo e também, verificamos o valor da variável no cabeçalho da estrutura, desta forma, conseguimos perceber que em um determinado momento o valor da condição será atendido, até porque, incrementando o valor da variável que utilizamos na expressão que decide se o bloco deve ou não ser executado.&lt;/p&gt;
&lt;p&gt;Por fim, se entendermos a instrução condicional &lt;tt class="docutils literal"&gt;if&lt;/tt&gt;, conseguimos entender também, a instrução &lt;tt class="docutils literal"&gt;while&lt;/tt&gt;, haja vista que ambas funcionam da mesma forma e o que diferencia as estruturas, é a quantidade de vezes que o bloco será repetido.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//ESTRUTURAS DE REPETIÇÃO&lt;/span&gt;

&lt;span class="x"&gt;$x = 10;&lt;/span&gt;
&lt;span class="x"&gt;while($x&amp;lt;=20){&lt;/span&gt;
&lt;span class="x"&gt;    $x = $x + 1;&lt;/span&gt;
&lt;span class="x"&gt;    echo $x . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;//    echo &amp;quot;O valor da variável x é menor do que zero.&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="laços de repetição"></category><category term="estrutura de repetição"></category><category term="looping"></category><category term="while"></category><category term="for"></category><category term="if"></category><category term="operadores relacionais"></category><category term="operadores lógicos"></category><category term="blog"></category></entry><entry><title>Lista de Parâmetros em PHP</title><link href="http://excript.com/php/lista-parametro-php.html" rel="alternate"></link><published>2016-05-28T10:00:00-03:00</published><updated>2016-05-28T10:00:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-05-28:/php/lista-parametro-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a enviar como parâmetro de uma função uma lista de valores. Da mesma forma, aprenderemos a implementar a função de forma a ser capaz de receber uma listagem arbitrária como argumento.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="lista-de-parametros"&gt;
&lt;h2&gt;LISTA DE PARÂMETROS&lt;/h2&gt;
&lt;p&gt;Estudamos que ao invocar uma função é necessário definir cada argumento por ela …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a enviar como parâmetro de uma função uma lista de valores. Da mesma forma, aprenderemos a implementar a função de forma a ser capaz de receber uma listagem arbitrária como argumento.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="lista-de-parametros"&gt;
&lt;h2&gt;LISTA DE PARÂMETROS&lt;/h2&gt;
&lt;p&gt;Estudamos que ao invocar uma função é necessário definir cada argumento por ela definida, do contrário, será levantado uma exceção e o nosso Script será interrompido.&lt;/p&gt;
&lt;p&gt;No entanto, há situações em que é necessário enviar como argumento um conjunto de valores, isto é, enviar um conjunto de parâmetros que não está definido na declaração da função.&lt;/p&gt;
&lt;p&gt;A verdade é que qualquer função por padrão pode receber mais parâmetros do que foi em sua declaração definido. Logo, não estudaremos a forma como enviar um conjunto arbitrário de parâmetros e sim, como recebe-los dentro da implementação da função.&lt;/p&gt;
&lt;p&gt;Funções capazes de receber quantidades arbitrárias de parâmetros são comumente chamadas de funções variádicas. Nesse momento, vamos estudar a forma antiga para a manipulação de lista de parâmetro e por essa razão, não estamos utilizando a nomenclatura correta. O que estamos estudando é código legal e o mesmo só deve ser utilizado nas situações em que o nosso Script for executado em versões antigas do PHP, ou então, quando encontrarmos um código implementado dessa forma.&lt;/p&gt;
&lt;p&gt;Estudaremos a maneira antiga de manipular lista de parâmetros nesta e &lt;a class="reference external" href="http://excript.com/php/lista-parametro-php-ii.html"&gt;na próxima aula&lt;/a&gt; . Na sequência estudaremos &lt;a class="reference external" href="http://excript.com/php/funcao-variadica-php.html"&gt;as funções variádicas propriamente ditas, ou seja, a forma como devemos atualmente manipular listas arbitrárias de parâmetros na próxima aula&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;O mais importante a saber nesse momento é que as funções que o PHP disponibiliza manipulam a lista de parâmetros como sendo um Array. Logo, o primeiro parâmetro terá índice igual a 0, o segundo parâmetro índice igual a 1 e assim por diante.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="funcoes-recebendo-lista-de-parametros"&gt;
&lt;h2&gt;FUNÇÕES - RECEBENDO LISTA DE PARÂMETROS&lt;/h2&gt;
&lt;p&gt;As versões antigas da linguagem PHP definiram 3 funções que podem ser invocadas de quaisquer outra função para ler a lista de parâmetro que foi enviada, são elas:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;func_get_arg(&amp;lt;índice&amp;gt;)&lt;/span&gt;&lt;/tt&gt; - lê um parâmetro conforme o índice passado como argumento&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;func_get_args()&lt;/tt&gt; - retorna um array com a lista de parâmetros recebido&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;func_num_args()&lt;/tt&gt; - retorna a quantidade de parâmetros recebidos&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="funcao-func-get-arg"&gt;
&lt;h2&gt;FUNÇÃO &lt;tt class="docutils literal"&gt;func_get_arg()&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;A função &lt;tt class="docutils literal"&gt;func_get_arg()&lt;/tt&gt; retorna o valor referente ao índice passado como parâmetro, ou seja, se passarmos o valor 0, será retornado o valor referente ao elemento vinculado ao índice 0.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function soma()&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    $a = func_get_arg(0);&lt;/span&gt;
&lt;span class="x"&gt;    $b = func_get_arg(1);&lt;/span&gt;

&lt;span class="x"&gt;    $x = $a + $b;&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;A soma dos parâmetros é: &amp;quot; . $x;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;soma(1, 2);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Se executarmos o código acima, será impresso a soma dos 2 primeiros números passados como parâmetro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="funcoes-func-get-arg-e-func-num-args"&gt;
&lt;h2&gt;FUNÇÕES &lt;tt class="docutils literal"&gt;func_get_arg()&lt;/tt&gt; E &lt;tt class="docutils literal"&gt;func_num_args()&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Algumas vezes não saberemos quantos parâmetros que foram enviados, logo, não é uma boa prática testar se existe algum valor definido nas primeiras posições com a função &lt;tt class="docutils literal"&gt;func_get_arg()&lt;/tt&gt;. Então, temos que o PHP nos fornece 2 outras funções para trabalharmos com a lista de parâmetros que está sendo enviada, são elas &lt;tt class="docutils literal"&gt;func_get_arg()&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;func_num_args()&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function soma()&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    $num = func_num_args();&lt;/span&gt;
&lt;span class="x"&gt;    $args = func_get_args();&lt;/span&gt;

&lt;span class="x"&gt;    #imprime os parâmetros enviados&lt;/span&gt;
&lt;span class="x"&gt;    $a = func_get_args();&lt;/span&gt;
&lt;span class="x"&gt;    foreach ($a as $v) {&lt;/span&gt;
&lt;span class="x"&gt;        echo $v;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;    #soma os parâmetros enviados&lt;/span&gt;
&lt;span class="x"&gt;    $total = 0;&lt;/span&gt;
&lt;span class="x"&gt;    for ($i = 0; $i &amp;lt; $num; $i++)&lt;/span&gt;
&lt;span class="x"&gt;        $total += $args[$i];&lt;/span&gt;

&lt;span class="x"&gt;    echo &amp;quot;A soma dos parâmetros é: &amp;quot; . $total;&lt;/span&gt;

&lt;span class="x"&gt;    soma(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function soma(){&lt;/span&gt;

&lt;span class="x"&gt;    $total = func_get_arg(0) + func_get_arg(1);&lt;/span&gt;

&lt;span class="x"&gt;    echo $total;&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;soma(10, 2);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="função"></category><category term="parâmetro"></category><category term="argumento"></category><category term="função variádica"></category><category term="blog"></category></entry><entry><title>Curso PHP</title><link href="http://excript.com/curso-php.html" rel="alternate"></link><published>2016-05-01T10:00:00-03:00</published><updated>2016-05-01T10:00:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-05-01:/curso-php.html</id><summary type="html">&lt;div class="section" id="sobre-o-curso"&gt;
&lt;h2&gt;SOBRE O CURSO&lt;/h2&gt;
&lt;p&gt;O &lt;a class="reference external" href="http://www.excript.com/curso-php.html"&gt;Curso de PHP&lt;/a&gt; da &lt;a class="reference external" href="http://www.excript.com/"&gt;eXcript&lt;/a&gt; parte do princípio que o aluno está iniciando na programação e assim, todos os passos iniciais são descritos detalhadamente a fim de contemplar a todos os níveis.&lt;/p&gt;
&lt;p&gt;Se você está chegando agora na programação, seja muito bem-vindo e saiba que o …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="sobre-o-curso"&gt;
&lt;h2&gt;SOBRE O CURSO&lt;/h2&gt;
&lt;p&gt;O &lt;a class="reference external" href="http://www.excript.com/curso-php.html"&gt;Curso de PHP&lt;/a&gt; da &lt;a class="reference external" href="http://www.excript.com/"&gt;eXcript&lt;/a&gt; parte do princípio que o aluno está iniciando na programação e assim, todos os passos iniciais são descritos detalhadamente a fim de contemplar a todos os níveis.&lt;/p&gt;
&lt;p&gt;Se você está chegando agora na programação, seja muito bem-vindo e saiba que o nosso curso guiará você pelo caminho de se tornar um programador. Este curso não há pré-requisito, logo, não existe a necessidade de ter qualquer conhecimento prévio.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="e-a-logica-de-programacao"&gt;
&lt;h2&gt;E A LÓGICA DE PROGRAMAÇÃO?&lt;/h2&gt;
&lt;p&gt;Você aprenderá a lógica de programação com a linguagem &lt;strong&gt;PHP&lt;/strong&gt; ! Este curso ensina lógica de programação utilizando a linguagem PHP, logo, você aprende 2 coisas ao mesmo tempo!&lt;/p&gt;
&lt;p&gt;Pode até ser interessante para algumas pessoas criar seus primeiros programas numa linguagem onde tudo está em Português, porém, na prática, nem sempre essa é a melhor solução, até porque, são muito poucas as palavras em Inglês que precisamos saber. E tambem, todas as instruções que aprendermos em Português, não terão qualquer utilidade futuramente.&lt;/p&gt;
&lt;p&gt;Por isso, &lt;strong&gt;NÃO EXISTE&lt;/strong&gt; a necessidade de você aprender uma linguagem para depois aprender outra! Ou seja, se você aprende lógica de programação e somente depois parte para o estudo da linguagem que desejas programar, estarás fazendo um caminho muito maior e muito provavelmente, trilharás uma caminho desnecessário.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="php-logica-de-programacao"&gt;
&lt;h2&gt;PHP + LÓGICA DE PROGRAMAÇÃO&lt;/h2&gt;
&lt;p&gt;Cada estrutura encontrada nas principais Linguagens de Programação será estudada durante o Curso de PHP. Assim, você aprendera verificar se uma condição é ou não verdadeira, como também, executar uma instrução por uma quantidade de vezes, invocar e definir funções e tudo mais utilizando a linguagem &lt;strong&gt;PHP&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ao término dessas aulas terás o mesmo conhecimento de um aluno que estudou lógica de programação num curso que o ensinou só e somente so a Lógica de Programação. A diferença deste curso é lhe proporcionar o estudo da Lógica junto com a &lt;strong&gt;Linguagem de Programação PHP&lt;/strong&gt;, assim, ao término, saberás tanto a linguagem PHP, como também, a Lógica de Programação.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lista-das-aulas"&gt;
&lt;h2&gt;LISTA DAS AULAS&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="links-externos"&gt;
&lt;h2&gt;LINKS EXTERNOS&lt;/h2&gt;
&lt;p&gt;Link oficial do site da &lt;a class="reference external" href="http://php.net/"&gt;linguagem PHP&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="curso de php"></category><category term="aula de php"></category><category term="eXcript"></category><category term="blog"></category></entry><entry><title>Sobrescrita de Funções em PHP</title><link href="http://excript.com/php/sobrescrita-funcao-php.html" rel="alternate"></link><published>2016-02-21T10:09:00-03:00</published><updated>2016-02-21T10:09:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-02-21:/php/sobrescrita-funcao-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nessa aula estudaremos a sobrescrita de funções em classes derivadas. Essa é uma das formas de trabalharmos com polimorfismo atribuindo a funções de mesmo nome funcionalidades diferentes e também, é uma excelente maneira para especializarmos funcionalidades nas subclasses.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# SOBREESCRITA DE FUNÇÕES&lt;/span&gt;

&lt;span class="x"&gt;class Pessoa{&lt;/span&gt;
&lt;span class="x"&gt;    private $nome;&lt;/span&gt;
&lt;span class="x"&gt;    private …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nessa aula estudaremos a sobrescrita de funções em classes derivadas. Essa é uma das formas de trabalharmos com polimorfismo atribuindo a funções de mesmo nome funcionalidades diferentes e também, é uma excelente maneira para especializarmos funcionalidades nas subclasses.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# SOBREESCRITA DE FUNÇÕES&lt;/span&gt;

&lt;span class="x"&gt;class Pessoa{&lt;/span&gt;
&lt;span class="x"&gt;    private $nome;&lt;/span&gt;
&lt;span class="x"&gt;    private $sobrenome;&lt;/span&gt;

&lt;span class="x"&gt;    public function getNome() : string&lt;/span&gt;
&lt;span class="x"&gt;    {&lt;/span&gt;
&lt;span class="x"&gt;        return $this-&amp;gt;nome;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;    public function setNome(string $nome)&lt;/span&gt;
&lt;span class="x"&gt;    {&lt;/span&gt;
&lt;span class="x"&gt;        $this-&amp;gt;nome = $nome;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;    public function getSobrenome() : string&lt;/span&gt;
&lt;span class="x"&gt;    {&lt;/span&gt;
&lt;span class="x"&gt;    return $this-&amp;gt;sobrenome;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;    public function setSobrenome(string $sobrenome)&lt;/span&gt;
&lt;span class="x"&gt;    {&lt;/span&gt;
&lt;span class="x"&gt;        $this-&amp;gt;sobrenome = $sobrenome;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;    public function getNomeCompleto() : string&lt;/span&gt;
&lt;span class="x"&gt;    {&lt;/span&gt;
&lt;span class="x"&gt;        return $this-&amp;gt;getNome() . &amp;quot; &amp;quot; . $this-&amp;gt;getSobrenome();&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;class PFisica extends Pessoa{&lt;/span&gt;

&lt;span class="x"&gt;//    public function getNomeCompleto() : string&lt;/span&gt;
&lt;span class="x"&gt;//    {&lt;/span&gt;
&lt;span class="x"&gt;//        return &amp;quot;PFisica: {$this-&amp;gt;getNome()} {$this-&amp;gt;getSobrenome()}&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;//    }&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="veja-tambem"&gt;
&lt;h2&gt;VEJA TAMBÉM&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/primeira-classe-php.html"&gt;Aula 91: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/membro-de-classe-php.html"&gt;Aula 92: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0093_criacao-objetos-php.rst"&gt;Aula 93: Criação de Objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0094_acessando-membros-classe-php.rst"&gt;Aula 94: Acessando Membros de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/implementando-funcionalidades-classe-php.html"&gt;Aula 95: Implementando Funcionalidades na Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0096_pseudo-variavel-this-php.rst"&gt;Aula 96: Pseudo variável $this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0097_gerenciando-atributos-classe-php.rst"&gt;Aula 97: Gerenciando atributos de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-php.html"&gt;Aula 98: Construtor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-personalizado-php.html"&gt;Aula 99: Construtores Personalizados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/destrutores-php.html"&gt;Aula 100: Destrutores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php.html"&gt;Aula 101: Encapsulamento I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php-parte2.html"&gt;Aula 102: Encapsulamento II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/heranca-php.html"&gt;Aula 103: Herança I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0104_heranca-php-ii.rst"&gt;Aula 104: Herança II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0105_modificador-acesso-php.rst"&gt;Aula 105: Modificadores de Acesso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0106_visibilidade-funcao-php.rst"&gt;Aula 106: Visibilidade das Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0107_funcoes-modificadoras-php.rst"&gt;Aula 107: Funções Modificadoras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/sobrescrita-funcao-php.html"&gt;Aula 108: Sobrescrita de Funções&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="links-externos"&gt;
&lt;h2&gt;LINKS EXTERNOS&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://php.net/manual/pt_BR/language.oop5.basic.php"&gt;Classes em PHP (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.tutsplus.com/pt/tutorials/object-oriented-php-for-beginners--net-12762"&gt;Objetos e Classes (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikibooks.org/wiki/PHP_Programming/Classes"&gt;PHP Programming: Classe (en)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="programação orientada a objetos"></category><category term="poo"></category><category term="oo"></category><category term="orientação a objetos"></category><category term="modificadores"></category><category term="modificador de acesso"></category><category term="classe"></category><category term="objeto"></category><category term="instância"></category><category term="herança"></category><category term="subclasse"></category><category term="superclasse"></category><category term="polimorfismo"></category></entry><entry><title>Encapsulamento em PHP (parte II)</title><link href="http://excript.com/php/encapsulamento-php-parte2.html" rel="alternate"></link><published>2016-02-06T18:30:00-02:00</published><updated>2016-02-06T18:30:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-02-06:/php/encapsulamento-php-parte2.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula daremos continuidade ao estudo dos conceito de encapsulamento, bem como as razões para utilização desse conceitos e os beneficios que podemos obter ao empregar essa metodologia de desenvolvimento.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="veja-tambem"&gt;
&lt;h2&gt;VEJA TAMBÉM&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/primeira-classe-php.html"&gt;Aula 91: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/membro-de-classe-php.html"&gt;Aula 92: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0093_criacao-objetos-php.rst"&gt;Aula 93: Criação de Objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0094_acessando-membros-classe-php.rst"&gt;Aula 94: Acessando Membros de …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula daremos continuidade ao estudo dos conceito de encapsulamento, bem como as razões para utilização desse conceitos e os beneficios que podemos obter ao empregar essa metodologia de desenvolvimento.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="veja-tambem"&gt;
&lt;h2&gt;VEJA TAMBÉM&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/primeira-classe-php.html"&gt;Aula 91: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/membro-de-classe-php.html"&gt;Aula 92: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0093_criacao-objetos-php.rst"&gt;Aula 93: Criação de Objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0094_acessando-membros-classe-php.rst"&gt;Aula 94: Acessando Membros de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/implementando-funcionalidades-classe-php.html"&gt;Aula 95: Implementando Funcionalidades na Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0096_pseudo-variavel-this-php.rst"&gt;Aula 96: Pseudo variável $this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0097_gerenciando-atributos-classe-php.rst"&gt;Aula 97: Gerenciando atributos de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-php.html"&gt;Aula 98: Construtor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-personalizado-php.html"&gt;Aula 99: Construtores Personalizados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/destrutores-php.html"&gt;Aula 100: Destrutores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php.html"&gt;Aula 101: Encapsulamento I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php-parte2.html"&gt;Aula 102: Encapsulamento II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/heranca-php.html"&gt;Aula 103: Herança I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0104_heranca-php-ii.rst"&gt;Aula 104: Herança II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0105_modificador-acesso-php.rst"&gt;Aula 105: Modificadores de Acesso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0106_visibilidade-funcao-php.rst"&gt;Aula 106: Visibilidade das Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0107_funcoes-modificadoras-php.rst"&gt;Aula 107: Funções Modificadoras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/sobrescrita-funcao-php.html"&gt;Aula 108: Sobrescrita de Funções&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="links-externos"&gt;
&lt;h2&gt;LINKS EXTERNOS&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://php.net/manual/pt_BR/language.oop5.basic.php"&gt;Classes em PHP (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.tutsplus.com/pt/tutorials/object-oriented-php-for-beginners--net-12762"&gt;Objetos e Classes (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikibooks.org/wiki/PHP_Programming/Classes"&gt;PHP Programming: Classe (en)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="programação orientada a objetos"></category><category term="poo"></category><category term="encapsulamento"></category><category term="classe"></category><category term="objeto"></category><category term="instância"></category></entry><entry><title>Encapsulamento em PHP</title><link href="http://excript.com/php/encapsulamento-php.html" rel="alternate"></link><published>2016-02-05T12:37:00-02:00</published><updated>2016-02-05T12:37:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-02-05:/php/encapsulamento-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula iniciaremos o estudo sobre o encapsulamento. Inicialmente, estudaremos o conceito prático encapsulamento ao analisarmos uma situação prática da necessidade da utilização. Em seguida, estudaremos os conceitos teóricos do encapsulamento segundo os conceitos da orientação a objetos.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;Uma classe é uma estrutura que contém um conjunto de dados …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula iniciaremos o estudo sobre o encapsulamento. Inicialmente, estudaremos o conceito prático encapsulamento ao analisarmos uma situação prática da necessidade da utilização. Em seguida, estudaremos os conceitos teóricos do encapsulamento segundo os conceitos da orientação a objetos.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;Uma classe é uma estrutura que contém um conjunto de dados, um conjunto de operações e tem implementado as funcionalidade necessárias para a correta manipulação das informações.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="encapsulamento"&gt;
&lt;h2&gt;ENCAPSULAMENTO&lt;/h2&gt;
&lt;p&gt;Todo objeto é, por definição, uma estrutura de dados especializada, também chamado de tipo abstraido de dados &lt;tt class="docutils literal"&gt;TAD&lt;/tt&gt;. As &lt;tt class="docutils literal"&gt;estruturas de dados&lt;/tt&gt;, normalmente, irão possuir membros de classes que armazenam valores - as variáveis; e membros de classe que desempenham alguma ação - as funções.&lt;/p&gt;
&lt;p&gt;Os membros de classe que são utilizados internamente, devem estar inacessíveis externamente. É interessante observar que isso não é meramente uma definição, mas sim, um conceito utilizado amplamente, inclusive pela própria natureza.&lt;/p&gt;
&lt;p&gt;Há várias formas para entendermos o encapsulamento, porém, talvez a mais importante seja a capacidade de definirmos um novo tipo de informação e fazer com que instâncias desse novo tipo sejam capazes de manter a integridade de suas informações.&lt;/p&gt;
&lt;p&gt;A única maneira para mantermos a integridade é verificando os dados que são enviados pelos membros de classe e estabelecendo através destes as regras para a correta atribuição de informações.&lt;/p&gt;
&lt;p&gt;Encapsular implica na modificação da visibilidade de membros de classe e portanto, foram definidos algumas palavras-chaves para explicitamente definirmos o escopo de cada membro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="abstracao"&gt;
&lt;h2&gt;ABSTRAÇÃO&lt;/h2&gt;
&lt;p&gt;A abstração é uma das característica de um bom encapsulamento. Entretanto, podemos escrever um código que abstrai um processo sem encapsular o mesmo. Por exemplo, um função que resolve uma somatória abstrai o cálculo através do uso de funções, porém, só com o uso de funções, não haverá encapsulamento de informação nem funcionalidade.&lt;/p&gt;
&lt;p&gt;Ao ocultarmos informações, estamos protegemos nossa estrutura da má utilização por parte do usuário e por conseguinte, acabamos protegendo o usuário de uma eventual má implementação.&lt;/p&gt;
&lt;p&gt;Assim, a abstração também é a simplificação de processos complexos. Um programa é uma abstração de algoritmos em partes independentes e que são projetados para se conectarem a outras abstrações.&lt;/p&gt;
&lt;p&gt;Uma função abstrai um processo tornando-o acessível através de um nome e seus parâmetros; uma classe abstraí um tipo de dado e suas funções de tratamento e manipulação.&lt;/p&gt;
&lt;p&gt;Quando encapsulamos um processo estaremos abstraíndo a implementação e também, os possíveis dados que são utilizados. O objetivo com a encapsulação e a abstração, é ocultar os processos e dados internos, mas disponibilizar uma interface simples para a utilização desse tipo abstrato de dados. Até porque, não existe encapsulação e abstração se não houver uma forma para o acesso das informações e funcionalidades encapsuladas. Se não houver uma interface de comunicação, nós temos um módulo independente, que é executado isoladamente e não há razão para mantermos esse código dentro de qualquer outro. Se não houver uma maneira de acesso, não haverá, por definição, utilidade e uso do código.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# ENCAPSULAMENTO&lt;/span&gt;

&lt;span class="x"&gt;class Pessoa{&lt;/span&gt;

&lt;span class="x"&gt;    private $nome;&lt;/span&gt;

&lt;span class="x"&gt;    function setNome($nome){&lt;/span&gt;
&lt;span class="x"&gt;        $this -&amp;gt; nome = $nome;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;    function getNome(){&lt;/span&gt;
&lt;span class="x"&gt;        return $this -&amp;gt; nome;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;$p1 = new Pessoa();&lt;/span&gt;
&lt;span class="x"&gt;//$p1 -&amp;gt; setNome(&amp;quot;eXcript&amp;quot;);&lt;/span&gt;
&lt;span class="x"&gt;$p1 -&amp;gt; nome = &amp;quot;&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="veja-tambem"&gt;
&lt;h2&gt;VEJA TAMBÉM&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/primeira-classe-php.html"&gt;Aula 91: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/membro-de-classe-php.html"&gt;Aula 92: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0093_criacao-objetos-php.rst"&gt;Aula 93: Criação de Objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0094_acessando-membros-classe-php.rst"&gt;Aula 94: Acessando Membros de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/implementando-funcionalidades-classe-php.html"&gt;Aula 95: Implementando Funcionalidades na Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0096_pseudo-variavel-this-php.rst"&gt;Aula 96: Pseudo variável $this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0097_gerenciando-atributos-classe-php.rst"&gt;Aula 97: Gerenciando atributos de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-php.html"&gt;Aula 98: Construtor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-personalizado-php.html"&gt;Aula 99: Construtores Personalizados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/destrutores-php.html"&gt;Aula 100: Destrutores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php.html"&gt;Aula 101: Encapsulamento I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php-parte2.html"&gt;Aula 102: Encapsulamento II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/heranca-php.html"&gt;Aula 103: Herança I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0104_heranca-php-ii.rst"&gt;Aula 104: Herança II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0105_modificador-acesso-php.rst"&gt;Aula 105: Modificadores de Acesso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0106_visibilidade-funcao-php.rst"&gt;Aula 106: Visibilidade das Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0107_funcoes-modificadoras-php.rst"&gt;Aula 107: Funções Modificadoras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/sobrescrita-funcao-php.html"&gt;Aula 108: Sobrescrita de Funções&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="links-externos"&gt;
&lt;h2&gt;LINKS EXTERNOS&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://php.net/manual/pt_BR/language.oop5.basic.php"&gt;Classes em PHP (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.tutsplus.com/pt/tutorials/object-oriented-php-for-beginners--net-12762"&gt;Objetos e Classes (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikibooks.org/wiki/PHP_Programming/Classes"&gt;PHP Programming: Classe (en)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="programação orientada a objetos"></category><category term="poo"></category><category term="encapsulamento"></category><category term="classe"></category><category term="objeto"></category><category term="instância"></category></entry><entry><title>Destrutores em PHP</title><link href="http://excript.com/php/destrutores-php.html" rel="alternate"></link><published>2016-01-19T19:10:00-02:00</published><updated>2016-01-19T19:10:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-01-19:/php/destrutores-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a implementação de funções destrutoras que são invocadas no momento que precede a remoção de uma instância da memória.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="destrutores"&gt;
&lt;h2&gt;DESTRUTORES&lt;/h2&gt;
&lt;p&gt;A linguagem PHP tem definido uma função que é invocada todas as vezes em que uma instância estiver sendo criada e também, possui uma função que será …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a implementação de funções destrutoras que são invocadas no momento que precede a remoção de uma instância da memória.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="destrutores"&gt;
&lt;h2&gt;DESTRUTORES&lt;/h2&gt;
&lt;p&gt;A linguagem PHP tem definido uma função que é invocada todas as vezes em que uma instância estiver sendo criada e também, possui uma função que será invocada, todas as vezes em que um instância estiver sendo destruida.&lt;/p&gt;
&lt;p&gt;A função que destruira a instância e removerás qualquer valor associado possui o nome de &lt;tt class="docutils literal"&gt;__destruct()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Basicamente, podemos dizer que o destrutor é invocado quando nenhuma variável estiver referenciando este, ou então, quando a função &lt;tt class="docutils literal"&gt;unset()&lt;/tt&gt; for invocada passando como parâmetro a instância.&lt;/p&gt;
&lt;p&gt;A função destrutor de uma classe sempre será invocado antes da classe ser removida da memória, portanto, somos capazes de executar qualquer código antes que a instância seja destruida.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="funcao-que-destroi-a-instancia-passada-como-parametro"&gt;
&lt;h2&gt;FUNÇÃO QUE DESTROI A INSTÂNCIA PASSADA COMO PARÂMETRO&lt;/h2&gt;
&lt;p&gt;Já trabalhamos com a função &lt;tt class="docutils literal"&gt;unset()&lt;/tt&gt; quando estavamos estudando Arrays, e fizemos uso da mesma para removermos um elemento da estrutura e também, remove-lo da memória.&lt;/p&gt;
&lt;p&gt;Durante a implementação de destrutores iremos fazer uso extensivo da função unset(), haja vista que essa é a maneira mais simples e segura que um objeto realmente será destruido, ou melhor, será enviado para o Garbage Collector.&lt;/p&gt;
&lt;p&gt;A melhor maneira para testarmos se a função de destruição de um objeto está funcionando corretamente.&lt;/p&gt;
&lt;p&gt;Vale ressaltar que a função &lt;tt class="docutils literal"&gt;unset()&lt;/tt&gt; ocasiona da destruição e remoção dos valores da memória de maneira irreversível, após invocarmos passando como parâmetro uma instância, não existira função para voltar atrás.&lt;/p&gt;
&lt;blockquote&gt;
A função &lt;tt class="docutils literal"&gt;unset()&lt;/tt&gt; desvincula uma instância de toda e qualquer estrutura ou então, outra instância.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="garbage-collector"&gt;
&lt;h2&gt;GARBAGE COLLECTOR&lt;/h2&gt;
&lt;p&gt;O coletor de lixo, ou então, o &lt;tt class="docutils literal"&gt;Garbage Collector&lt;/tt&gt; é uma entidade especializada em remover os dados da memória que não estão mais sendo utilizados.&lt;/p&gt;
&lt;p&gt;A utilização de um coletor de lixo simplifica o trabalho do programador e evitar a grande maioria dos problemas de software, até porque, fazer acesso a uma região de memória que foi desalocada pode ocasionar problemas bizarros e que são muito dificeis de serem depurados.&lt;/p&gt;
&lt;p&gt;Então, pense no coletor de lixo como o agente responsavel em liberar toda e qualquer informação que não esteja mais em uso e principalmente, fazer todo esse trabalho de gerenciamento e averiguação de quais instâncias não estão mais em uso num bloco de instrução.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;unset($r);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#DESTRUTORES&lt;/span&gt;

&lt;span class="x"&gt;class Pessoa{&lt;/span&gt;

&lt;span class="x"&gt;    function __construct(){&lt;/span&gt;
&lt;span class="x"&gt;        echo &amp;quot;Função construtora invocada.&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;    function __destruct(){&lt;/span&gt;
&lt;span class="x"&gt;        echo &amp;quot;Função destrutora invocada.&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;$p1 = new Pessoa;&lt;/span&gt;
&lt;span class="x"&gt;unset($p1);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="veja-tambem"&gt;
&lt;h2&gt;VEJA TAMBÉM&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/primeira-classe-php.html"&gt;Aula 91: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/membro-de-classe-php.html"&gt;Aula 92: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0093_criacao-objetos-php.rst"&gt;Aula 93: Criação de Objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0094_acessando-membros-classe-php.rst"&gt;Aula 94: Acessando Membros de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/implementando-funcionalidades-classe-php.html"&gt;Aula 95: Implementando Funcionalidades na Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0096_pseudo-variavel-this-php.rst"&gt;Aula 96: Pseudo variável $this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0097_gerenciando-atributos-classe-php.rst"&gt;Aula 97: Gerenciando atributos de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-php.html"&gt;Aula 98: Construtor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-personalizado-php.html"&gt;Aula 99: Construtores Personalizados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/destrutores-php.html"&gt;Aula 100: Destrutores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php.html"&gt;Aula 101: Encapsulamento I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php-parte2.html"&gt;Aula 102: Encapsulamento II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/heranca-php.html"&gt;Aula 103: Herança I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0104_heranca-php-ii.rst"&gt;Aula 104: Herança II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0105_modificador-acesso-php.rst"&gt;Aula 105: Modificadores de Acesso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0106_visibilidade-funcao-php.rst"&gt;Aula 106: Visibilidade das Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0107_funcoes-modificadoras-php.rst"&gt;Aula 107: Funções Modificadoras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/sobrescrita-funcao-php.html"&gt;Aula 108: Sobrescrita de Funções&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="links-externos"&gt;
&lt;h2&gt;LINKS EXTERNOS&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://php.net/manual/pt_BR/language.oop5.basic.php"&gt;Classes em PHP (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.tutsplus.com/pt/tutorials/object-oriented-php-for-beginners--net-12762"&gt;Objetos e Classes (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikibooks.org/wiki/PHP_Programming/Classes"&gt;PHP Programming: Classe (en)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="curso-php"></category><category term="curso"></category><category term="php"></category><category term="programação orientada a objetos"></category><category term="poo"></category><category term="destrutor"></category><category term="construtor"></category><category term="classe"></category><category term="objeto"></category><category term="instância"></category></entry><entry><title>Construtores Personalizados em PHP</title><link href="http://excript.com/php/construtor-personalizado-php.html" rel="alternate"></link><published>2016-01-19T12:07:00-02:00</published><updated>2016-01-19T12:07:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-01-19:/php/construtor-personalizado-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula daremos continuidade sobre a utilização de funções construtoras e os seus beneficios na construção e implementação de classes.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="construtores-personalizados"&gt;
&lt;h2&gt;CONSTRUTORES PERSONALIZADOS&lt;/h2&gt;
&lt;p&gt;A definição de construtores é praticamente igual a definição de funções, então, seguindo a definição de funções, é permitido a declaração de parâmetros no cabeçalho do construtor. Está …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula daremos continuidade sobre a utilização de funções construtoras e os seus beneficios na construção e implementação de classes.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="construtores-personalizados"&gt;
&lt;h2&gt;CONSTRUTORES PERSONALIZADOS&lt;/h2&gt;
&lt;p&gt;A definição de construtores é praticamente igual a definição de funções, então, seguindo a definição de funções, é permitido a declaração de parâmetros no cabeçalho do construtor. Está é a melhor forma para definirmos os principais valores de um objeto ainda em sua inicialização, prática essa muito utilizada quando estamos trabalhando com banco de dados.&lt;/p&gt;
&lt;p&gt;A definição de parâmetros no construtor, implica na obrigatoriedade de enviar esses valores, todas as vezes em que uma nova instância estiver sendo definida.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="visibilidade-dos-construtores"&gt;
&lt;h2&gt;VISIBILIDADE DOS CONSTRUTORES&lt;/h2&gt;
&lt;p&gt;Se a visibilidade de um construtor não for definida, assume-se que o mesmo é público. Temos que o funcionamento da visibilidade dos construtores é igual a visibilidade dos métodos.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$p1 = new Pessoa(&amp;quot;João&amp;quot;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A utilização de construtores faz com que nossos objetos se tornem mais lógicos e acessíveis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#CONSTRUTORES PERSONALIZADOS&lt;/span&gt;

&lt;span class="x"&gt;class A{&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;class Pessoa{&lt;/span&gt;

&lt;span class="x"&gt;    public $a;&lt;/span&gt;

&lt;span class="x"&gt;    public $nome;&lt;/span&gt;
&lt;span class="x"&gt;    public $idade = 0;&lt;/span&gt;

&lt;span class="x"&gt;    function __construct($nome, $idade){&lt;/span&gt;

&lt;span class="x"&gt;        $this -&amp;gt; a = new A();&lt;/span&gt;

&lt;span class="x"&gt;        $this -&amp;gt; nome = $nome;&lt;/span&gt;
&lt;span class="x"&gt;        $this -&amp;gt; idade = $idade;&lt;/span&gt;

&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;$p1 = new Pessoa(&amp;quot;eXcript&amp;quot;, 2);&lt;/span&gt;
&lt;span class="x"&gt;var_dump($p1);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="veja-tambem"&gt;
&lt;h2&gt;VEJA TAMBÉM&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/primeira-classe-php.html"&gt;Aula 91: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/membro-de-classe-php.html"&gt;Aula 92: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0093_criacao-objetos-php.rst"&gt;Aula 93: Criação de Objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0094_acessando-membros-classe-php.rst"&gt;Aula 94: Acessando Membros de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/implementando-funcionalidades-classe-php.html"&gt;Aula 95: Implementando Funcionalidades na Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0096_pseudo-variavel-this-php.rst"&gt;Aula 96: Pseudo variável $this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0097_gerenciando-atributos-classe-php.rst"&gt;Aula 97: Gerenciando atributos de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-php.html"&gt;Aula 98: Construtor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-personalizado-php.html"&gt;Aula 99: Construtores Personalizados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/destrutores-php.html"&gt;Aula 100: Destrutores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php.html"&gt;Aula 101: Encapsulamento I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php-parte2.html"&gt;Aula 102: Encapsulamento II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/heranca-php.html"&gt;Aula 103: Herança I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0104_heranca-php-ii.rst"&gt;Aula 104: Herança II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0105_modificador-acesso-php.rst"&gt;Aula 105: Modificadores de Acesso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0106_visibilidade-funcao-php.rst"&gt;Aula 106: Visibilidade das Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0107_funcoes-modificadoras-php.rst"&gt;Aula 107: Funções Modificadoras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/sobrescrita-funcao-php.html"&gt;Aula 108: Sobrescrita de Funções&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="links-externos"&gt;
&lt;h2&gt;LINKS EXTERNOS&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://php.net/manual/pt_BR/language.oop5.basic.php"&gt;Classes em PHP (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.tutsplus.com/pt/tutorials/object-oriented-php-for-beginners--net-12762"&gt;Objetos e Classes (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikibooks.org/wiki/PHP_Programming/Classes"&gt;PHP Programming: Classe (en)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="programação orientada a objetos"></category><category term="poo"></category><category term="construtor"></category><category term="classe"></category><category term="objeto"></category><category term="instância"></category></entry><entry><title>Construtores em PHP</title><link href="http://excript.com/php/construtor-php.html" rel="alternate"></link><published>2016-01-18T12:17:00-02:00</published><updated>2016-01-18T12:17:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-01-18:/php/construtor-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nessa aula estudaremos os construtores de classe, ou seja, funções que são invocadas no momento em que uma nova instância de classe está sendo criada. Também estudaremos a inicialização de classe, ou seja, veremos quais os passos ocorridos a cada nova instância criada.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="construtores"&gt;
&lt;h2&gt;CONSTRUTORES&lt;/h2&gt;
&lt;p&gt;Construtor é um bloco de instrução …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nessa aula estudaremos os construtores de classe, ou seja, funções que são invocadas no momento em que uma nova instância de classe está sendo criada. Também estudaremos a inicialização de classe, ou seja, veremos quais os passos ocorridos a cada nova instância criada.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="construtores"&gt;
&lt;h2&gt;CONSTRUTORES&lt;/h2&gt;
&lt;p&gt;Construtor é um bloco de instrução, semelhante a uma função, definido implicita ou explicitamente por todas as classes, que é invocado automaticamente pela Máquina Virtual, todas as vezes que um objeto está sendo criado. Construtores são definidos como sendo funções, porém, não o são! Isso porque, funções retornam valores e o único valor que um construtor poderia retornar, seria a instância que está sendo no mesmo instante definida.&lt;/p&gt;
&lt;p&gt;Porém, num primeiro momento, vamos pensar num construtor como sendo um método, até porque, o mesmo possui um nome, um corpo e pode receber parâmetros. Porém, um construtor não pode ser invocado quando desejarmos, ou melhor, o construtor é um bloco de código que será invocado &lt;strong&gt;só e somente só na criação de novas instâncias&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- Uma classe pode conter quantos construtores forem necessário, desde que a assinatura destes sejam diferentes. --&gt;
&lt;/div&gt;
&lt;div class="section" id="definicao"&gt;
&lt;h2&gt;DEFINIÇÃO&lt;/h2&gt;
&lt;p&gt;O nome do construtor de todas as classes sempre será &lt;code&gt;__construct()&lt;/code&gt;. Essa é uma convenção da linguagem e não há como trabalhar de maneira diferente. Dessa forma, é fácil identificarmos o construtor da classe, até porque, todas utilizarão o padrão.&lt;/p&gt;
&lt;p&gt;A seguir, temos algumas regras que se aplicão aos contrutores.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;O construtor que será invocado na criação de novos objetos tem o nome de:  &lt;tt class="docutils literal"&gt;__construct&lt;/tt&gt;. Os dois &lt;tt class="docutils literal"&gt;underlines&lt;/tt&gt; a frente do nome é obrigatório.&lt;/li&gt;
&lt;li&gt;Construtores são geralmente utilizados para trabalharmos com valores não literais, isto é, para trabalharmos com objetos. A razão é bastante simples: todo objeto precisa ser criado e isso é feito dentro de algum bloco de instrução.&lt;/li&gt;
&lt;li&gt;O PHP primeiro cria uma nova instância de um objeto para somente então invocar o seu construtor. Do contrário, não seria possível, por exemplo, acessar os membros da classe e nem fazer uso da pseudo-variável &lt;tt class="docutils literal"&gt;$this&lt;/tt&gt;. Assim, primeiro cria-se uma nova instância e, somente depois é que o construtor será invocado.&lt;/li&gt;
&lt;li&gt;As variáveis de uma classe são inicializadas antes do construtor ser invocado, assim, se alterarmos o valor de um atributo dentro do bloco do construtor, este passará a ser o valor assumido por todas as instâncias.&lt;/li&gt;
&lt;li&gt;O PHP tem definido que, construtores que não recebem parâmetros poderão ter suas instâncias criadas sem a utilização do par de parêntesis.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- Isto pode ser utilizado para tornar os valores iniciais das propriedades dependentes dos parâmetros passados quando o objecto é criado. --&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#CONSTRUTORES&lt;/span&gt;

&lt;span class="x"&gt;class Pessoa{&lt;/span&gt;

&lt;span class="x"&gt;    public $idade = 0;&lt;/span&gt;
&lt;span class="x"&gt;    public $nome;&lt;/span&gt;

&lt;span class="x"&gt;    function aaa(){&lt;/span&gt;

&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;    function bbb(){&lt;/span&gt;

&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;    function __construct(){&lt;/span&gt;
&lt;span class="x"&gt;        echo &amp;quot;teste\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;        var_dump($this);&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;$p1 = new Pessoa();&lt;/span&gt;
&lt;span class="x"&gt;$p2 = new Pessoa();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="veja-tambem"&gt;
&lt;h2&gt;VEJA TAMBÉM&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/primeira-classe-php.html"&gt;Aula 91: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/membro-de-classe-php.html"&gt;Aula 92: Primeira Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0093_criacao-objetos-php.rst"&gt;Aula 93: Criação de Objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0094_acessando-membros-classe-php.rst"&gt;Aula 94: Acessando Membros de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/implementando-funcionalidades-classe-php.html"&gt;Aula 95: Implementando Funcionalidades na Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0096_pseudo-variavel-this-php.rst"&gt;Aula 96: Pseudo variável $this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0097_gerenciando-atributos-classe-php.rst"&gt;Aula 97: Gerenciando atributos de Classe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-php.html"&gt;Aula 98: Construtor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/construtor-personalizado-php.html"&gt;Aula 99: Construtores Personalizados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/destrutores-php.html"&gt;Aula 100: Destrutores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php.html"&gt;Aula 101: Encapsulamento I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/encapsulamento-php-parte2.html"&gt;Aula 102: Encapsulamento II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/heranca-php.html"&gt;Aula 103: Herança I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0104_heranca-php-ii.rst"&gt;Aula 104: Herança II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0105_modificador-acesso-php.rst"&gt;Aula 105: Modificadores de Acesso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0106_visibilidade-funcao-php.rst"&gt;Aula 106: Visibilidade das Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="{filename}../curso-php/0107_funcoes-modificadoras-php.rst"&gt;Aula 107: Funções Modificadoras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://excript.com/php/sobrescrita-funcao-php.html"&gt;Aula 108: Sobrescrita de Funções&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="links-externos"&gt;
&lt;h2&gt;LINKS EXTERNOS&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://php.net/manual/pt_BR/language.oop5.basic.php"&gt;Classes em PHP (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.tutsplus.com/pt/tutorials/object-oriented-php-for-beginners--net-12762"&gt;Objetos e Classes (pt_BR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikibooks.org/wiki/PHP_Programming/Classes"&gt;PHP Programming: Classe (en)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="programação orientada a objetos"></category><category term="poo"></category><category term="construtor"></category><category term="classe"></category><category term="objeto"></category><category term="instância"></category><category term="blog"></category></entry><entry><title>Variáveis superglobais do PHP</title><link href="http://excript.com/php/variavel-superglobal-php.html" rel="alternate"></link><published>2016-01-10T17:08:00-02:00</published><updated>2016-01-10T17:08:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-01-10:/php/variavel-superglobal-php.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a implementação e uso de variáveis que possuem escopo global, bem como a sua utilização em escopos restritos, como o escopo de funções.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="variável"></category><category term="global"></category><category term="superglobal"></category></entry><entry><title>Método POST com PHP</title><link href="http://excript.com/php/metodo-post-php.html" rel="alternate"></link><published>2016-01-10T11:42:00-02:00</published><updated>2016-01-10T11:42:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-01-10:/php/metodo-post-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos o envio de requisições do tipo POST, bem como o seu funcionamento e suas diferenças do tipo de requisição GET.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;p&gt;Este código utiliza também o código da aula anterior.&lt;/p&gt;
&lt;p&gt;Nome do Arquivo: &lt;tt class="docutils literal"&gt;metodo_post.php&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//var_dump($_GET);&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;#39;Nome: &amp;#39; . ($_POST[&amp;#39;nome&amp;#39;] ?? &amp;#39;&amp;#39;) . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;#39;E-mail …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos o envio de requisições do tipo POST, bem como o seu funcionamento e suas diferenças do tipo de requisição GET.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;p&gt;Este código utiliza também o código da aula anterior.&lt;/p&gt;
&lt;p&gt;Nome do Arquivo: &lt;tt class="docutils literal"&gt;metodo_post.php&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//var_dump($_GET);&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;#39;Nome: &amp;#39; . ($_POST[&amp;#39;nome&amp;#39;] ?? &amp;#39;&amp;#39;) . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;#39;E-mail: &amp;#39; . ($_POST[&amp;#39;email&amp;#39;] ?? &amp;#39;&amp;#39;) . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="método"></category><category term="post"></category></entry><entry><title>Formulários HTML e PHP</title><link href="http://excript.com/php/formulario-html-php.html" rel="alternate"></link><published>2016-01-10T11:40:00-02:00</published><updated>2016-01-10T11:40:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-01-10:/php/formulario-html-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o que é um formulário Web, como construí-los, quais os tipos para o envio de informações, bem como, o recebimento dos dados pelos Scripts PHP e sua posterior manipulação.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="requisicoes-post"&gt;
&lt;h2&gt;REQUISIÇÕES &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O método &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;, ao contrário do &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt;, não expõem os valores que estão sendo enviados na …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o que é um formulário Web, como construí-los, quais os tipos para o envio de informações, bem como, o recebimento dos dados pelos Scripts PHP e sua posterior manipulação.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="requisicoes-post"&gt;
&lt;h2&gt;REQUISIÇÕES &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O método &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;, ao contrário do &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt;, não expõem os valores que estão sendo enviados na URL, mas sim, o mesmo encapsula os dados no cabeçalho da requisição HTTP que está sendo enviada ao servidor WEB.&lt;/p&gt;
&lt;p&gt;Raramente iremos ter um cadastro que utilizará o método &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; para envio dos dados, e também, quando estivermos trabalhando com informações confidências, o método &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; será por sua definição e sua abstração, muito mais seguro.&lt;/p&gt;
&lt;p&gt;Quando trabalhamos com informações criptografadas, estaremos trabalhando também, com o método &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;, e então, temos que a criptografação das informações, irá acontecer, no cabeçalho da requisição que está sendo enviado para o servidor.&lt;/p&gt;
&lt;p&gt;Assim, a diferença entre o método &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; é a forma como os dados são trafegados, ou seja, a forma como os dados serão expostos. Até porque, a maneira em que as informações serão enviadas é a mesma, ou seja, com o método &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;, cada campo do formulário terá o seu valor associado ao seu nome e a String decorrente dessas associações, terá a mesma estrutura, do que a String gerada pelo método GET.&lt;/p&gt;
&lt;p&gt;Então, a diferença será, só e somente só, na exposição destes dados, ou seja, o método &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; passa os valores pela URL, enquanto o método &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; passa as informações pelo cabeçalho HTML. Porém, a String gerada será igual em ambos os casos e também, o recebimento e trabamento dessas informações pelo PHP, ocorrerá de maneira análoga.&lt;/p&gt;
&lt;p&gt;Internamente, o recebimento de dados pelo método &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; em PHP, se da de maneira análoga ao recebimento de dados pelo méto &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; já estudado.&lt;/p&gt;
&lt;p&gt;A diferença em nosso código PHP para o recebimento das informações enviadas pelo método POST, será o nome da variável global em que os parâmetros enviados serão associados, ou seja, ao invés de utilizarmos a variável global &lt;tt class="docutils literal"&gt;$_GET&lt;/tt&gt;, nós iremos utilizar a variável global &lt;tt class="docutils literal"&gt;$_POST&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="html-e-requisicoes-get-e-post"&gt;
&lt;h2&gt;HTML E REQUISIÇÕES &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; E &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;As requisições do tipo &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; são feitas pelo endereço que desejamos acessar, logo, não há nenhuma informação adicional. Basta informar o caminho absoluto do Script e em seguida, passar os parâmetros.&lt;/p&gt;
&lt;p&gt;Requisições do tipo &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; são comumente enviadas através de formulários HTML, porém, também, é possível trabalhar com formulários do tipo &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Cada campo contido no formulários HTML chegará no Script PHP através do Array Associativo, a chave do campo será o seu nome no documento HTML e o valor associado, será o valor informado pelo usuário (caso haja algum).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="formularios-html"&gt;
&lt;h2&gt;FORMULÁRIOS HTML&lt;/h2&gt;
&lt;p&gt;A forma mais comum para o envio de dados é através do uso de formulário HTML. Um formulário é construído através do uso da TAG &lt;tt class="docutils literal"&gt;&amp;lt;form&amp;gt;&lt;/tt&gt; e nesta é definido o script para onde este formulário deve ser enviado, no caso, o atributo &lt;tt class="docutils literal"&gt;action&lt;/tt&gt; e também, o método em que as informações deverão ser submetidas, no caso, temos que definir se o formulário será enviado através do métodos GET ou então do método POST no atributo de nome &lt;tt class="docutils literal"&gt;method&lt;/tt&gt; da TAG.&lt;/p&gt;
&lt;p&gt;Como estudamos, é possível o envio de valores através do método GET pela construção de uma URL, porém, quando estamos trabalhando com o envio de dados através do método POST, o comum é utilizarmos um formulário.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="criando-formulario-com-html"&gt;
&lt;h2&gt;CRIANDO FORMULÁRIO COM HTML&lt;/h2&gt;
&lt;p&gt;No HTML, a TAG de um formulário é &lt;tt class="docutils literal"&gt;&amp;lt;form&amp;gt;&lt;/tt&gt;. Na definição, a TAG &lt;tt class="docutils literal"&gt;&amp;lt;form&amp;gt;&lt;/tt&gt; possui 2 atributos, são eles:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;action&lt;/li&gt;
&lt;li&gt;method&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;O atributo &lt;tt class="docutils literal"&gt;action&lt;/tt&gt; é a URL absoluta até o Script PHP, ou seja, é o local para onde desejamos enviar o formulário.&lt;/p&gt;
&lt;p&gt;O atributo &lt;tt class="docutils literal"&gt;method&lt;/tt&gt; especifica o tipo da requisição, isto é: &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; ou &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Cada &lt;tt class="docutils literal"&gt;input&lt;/tt&gt; contido no formulário deve conter o atributo &lt;tt class="docutils literal"&gt;name&lt;/tt&gt;, haja vista que os valores são associados com a propriedade &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; de cada &lt;tt class="docutils literal"&gt;input&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="criando-um-formulario-em-html"&gt;
&lt;h2&gt;CRIANDO UM FORMULÁRIO EM HTML&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;A seguir temos um formulário básico de contato, neste é pedido 3 informações:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;nome&lt;/li&gt;
&lt;li&gt;e-mail&lt;/li&gt;
&lt;li&gt;mensagem&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;form id=&amp;quot;formulario&amp;quot; action=&amp;quot;#&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;fieldset&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;        &amp;lt;legend&amp;gt;Informações&amp;lt;/legend&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;label for=&amp;quot;nome&amp;quot;&amp;gt;Nome: &amp;lt;em class=&amp;quot;required&amp;quot;&amp;gt;(obrigatório)&amp;lt;/em&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;input name=&amp;quot;nome&amp;quot; id=&amp;quot;nome&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;        &amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;label for=&amp;quot;email&amp;quot;&amp;gt;Email Address:&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;input name=&amp;quot;email&amp;quot; id=&amp;quot;email&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;/fieldset&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;Enviar&amp;quot; id=&amp;quot;enviar&amp;quot;/&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="recebendo-as-informacoes-do-formulario"&gt;
&lt;h2&gt;RECEBENDO AS INFORMAÇÕES DO FORMULÁRIO&lt;/h2&gt;
&lt;p&gt;Quando recebemos uma requisição com o envio de um formulário do tipo &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;, a variável global &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$_POST['']&lt;/span&gt;&lt;/tt&gt; irá conter a lista dos campos e a estes, estarão vinculados os valores.&lt;/p&gt;
&lt;p&gt;Inicialmente, vamos verificar se os campos que compõem o formulário estão contidos e somente então, daremos continuidade no processamento das informações.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;p&gt;formulario.php&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="c1"&gt;#FORMULÁRIO HTML&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html lang=&amp;quot;pt-br&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;title&amp;gt;Fomulário HTML - Curso PHP - eXcript&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;form action=&amp;quot;metodo_post.php?xget=50&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;fieldset&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;legend&amp;gt;Formulário HTML&amp;lt;/legend&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;        &amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;label for=&amp;quot;nome&amp;quot;&amp;gt;Nome: &amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;nome&amp;quot; id=&amp;quot;nome&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;        &amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;label for=&amp;quot;email&amp;quot;&amp;gt;E-mail: &amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;lt;input type=&amp;quot;email&amp;quot; name=&amp;quot;email&amp;quot; id=&amp;quot;email&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;/fieldset&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Enviar&amp;quot; id=&amp;quot;enviar&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;


&lt;span class="x"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;metodo_get.php
.. code-block:: php&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;?php&lt;/p&gt;
&lt;p&gt;//var_dump($_GET);&lt;/p&gt;
&lt;p&gt;echo 'Nome: ' . ($_GET['nome'] ?? '') . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
echo 'E-mail: ' . ($_GET['email'] ?? '') . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="form"></category><category term="formulário"></category><category term="html"></category></entry><entry><title>Método GET em PHP</title><link href="http://excript.com/php/metodo-get-php.html" rel="alternate"></link><published>2016-01-06T18:38:00-02:00</published><updated>2016-01-06T18:38:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-01-06:/php/metodo-get-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as requisições do tipo GET, bem como suas características, definições e quando devemos fazer uso das mesmas.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="requisicoes-get"&gt;
&lt;h2&gt;REQUISIÇÕES &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Requisições do tipo &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; são as mais comuns e todo mundo que navega pela Web conhece a sua estrutura. Isso porque, uma requisição do tipo &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; é composta …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as requisições do tipo GET, bem como suas características, definições e quando devemos fazer uso das mesmas.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="requisicoes-get"&gt;
&lt;h2&gt;REQUISIÇÕES &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Requisições do tipo &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; são as mais comuns e todo mundo que navega pela Web conhece a sua estrutura. Isso porque, uma requisição do tipo &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; é composta somente por uma URL.&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://www.meusite.com.br/script.php?var1=valor1"&gt;http://www.meusite.com.br/script.php?var1=valor1&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Uma URL do tipo GET é composta pelo caminho absoluto do arquivo de Script PHP e em seguida, ma mesma recebe parâmetros através de uma convenção definida no protocolo HTTP. Essa convenção diz que após o caminho absoluto do Script, deve haver uma interrogação e então, inicia-se o processo de associação chave-valor, e os parâmetros devem ser delimitados por um &amp;amp;.&lt;/p&gt;
&lt;p&gt;Vamos analisar a seguinte URL:&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://www.meusite.com.br/script.php?var1=valor1&amp;amp;var2=valor2"&gt;http://www.meusite.com.br/script.php?var1=valor1&amp;amp;var2=valor2&lt;/a&gt;&lt;/blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Caminho absoluto é: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://www.meusite.com.br/script.php&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&amp;amp;&lt;/li&gt;
&lt;li&gt;var1=valor1&lt;/li&gt;
&lt;li&gt;var2=valor2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Após o caractere de interrogação, temos um valor sendo associado a outro, em seguida, temos a adição de um &amp;amp; e então, temos outros valor sendo associado. Essa requisição será entregue ao Script PHP e todos os valores associados, serão passados ao Script pelo Array &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$_GET['']&lt;/span&gt;&lt;/tt&gt;. Cada chave-valor estará numa posição do Array associativo e então, bastara o nosso Script processar a requisição.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#METODO GET&lt;/span&gt;

&lt;span class="x"&gt;var_dump($_GET);&lt;/span&gt;

&lt;span class="x"&gt;echo $_GET[&amp;#39;a&amp;#39;] . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo $_GET[&amp;#39;b&amp;#39;] . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo $_GET[&amp;#39;c&amp;#39;] . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="método"></category><category term="get"></category><category term="post"></category></entry><entry><title>Introdução às Requisições Web em PHP</title><link href="http://excript.com/php/introducao-as-requisicoes-web-php.html" rel="alternate"></link><published>2016-01-06T18:32:00-02:00</published><updated>2016-01-06T18:32:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-01-06:/php/introducao-as-requisicoes-web-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os conceitos de uma requisição Web, como ocorre o envio e o recebimento de dados e como enviar e receber informações através do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="recebimento-de-dados"&gt;
&lt;h2&gt;RECEBIMENTO DE DADOS&lt;/h2&gt;
&lt;p&gt;Toda vez que um navegador envia uma requisição a um servidor Web, o mesmo também envia, um cabeçalho que contém …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os conceitos de uma requisição Web, como ocorre o envio e o recebimento de dados e como enviar e receber informações através do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="recebimento-de-dados"&gt;
&lt;h2&gt;RECEBIMENTO DE DADOS&lt;/h2&gt;
&lt;p&gt;Toda vez que um navegador envia uma requisição a um servidor Web, o mesmo também envia, um cabeçalho que contém as informações referentes a requisição.&lt;/p&gt;
&lt;p&gt;Todas as requisições enviadas serão recebidas por um servidor Web, como por exemplo o Apache. Este analisará o cabeçalho para ver do que se trata e então, irá repassar o mesmo para o Script contido nessa solicitação. Todas as vezes que o Servidor Web invocar um Script será passado o cabeçalho recebido da Web e que contém as informações referentes a solicitação.&lt;/p&gt;
&lt;p&gt;O que temos que entender desse processo, é que todas as vezes em quem um Script for executado haverá um cabeçalho contendo as informações da requisição. As informações contidas nesse cabeçalho podem, por exemplo, ser as informações preenchidas num formulário Web.&lt;/p&gt;
&lt;p&gt;A maior parte dos Scripts PHP irão interagir com as informações enviadas, bem como, com as demais informações contidas no cabeçalho da requisição.&lt;/p&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="web"></category></entry><entry><title>Aspas Duplas vs Aspas Simples em PHP</title><link href="http://excript.com/php/aspas-duplas-vs-aspas-simples-php.html" rel="alternate"></link><published>2016-01-02T18:09:00-02:00</published><updated>2016-01-02T18:09:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-01-02:/php/aspas-duplas-vs-aspas-simples-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula iniciaremos o estudo sobre os tipos  de String existentes no PHP, quais suas diferenças e quando utilizar as diferentes estruturas. Também aprenderemos a trabalhar com caracteres que são tratados como especiais pela linguagem.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#STRING COM ASPA SIMPLES E DUPLA&lt;/span&gt;

&lt;span class="x"&gt;#ASPAS SIMPLES&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;#39;eX\\\&amp;#39;cript …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula iniciaremos o estudo sobre os tipos  de String existentes no PHP, quais suas diferenças e quando utilizar as diferentes estruturas. Também aprenderemos a trabalhar com caracteres que são tratados como especiais pela linguagem.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#STRING COM ASPA SIMPLES E DUPLA&lt;/span&gt;

&lt;span class="x"&gt;#ASPAS SIMPLES&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;#39;eX\\\&amp;#39;cript&amp;#39;;# eX\&amp;#39;cript&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;#39;Vá para diretório C:\\&amp;#39;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="string"></category><category term="aspas"></category><category term="aspas simples"></category><category term="aspas duplas"></category></entry><entry><title>String Aspas Duplas em PHP</title><link href="http://excript.com/php/string-aspas-duplas-php.html" rel="alternate"></link><published>2016-01-02T18:09:00-02:00</published><updated>2016-01-02T18:09:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-01-02:/php/string-aspas-duplas-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as String definidas com o uso de aspas duplas. Aprenderemos quais os conceitos dessa definição e as diferenças entre as Strings definidas com aspas simples e as Strings definidas com aspas duplas&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#STRING DOUBLE-QUOTED&lt;/span&gt;

&lt;span class="x"&gt;#concatenar a + b&lt;/span&gt;
&lt;span class="x"&gt;#interpolar&lt;/span&gt;

&lt;span class="x"&gt;$num = 55;&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;O valor …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as String definidas com o uso de aspas duplas. Aprenderemos quais os conceitos dessa definição e as diferenças entre as Strings definidas com aspas simples e as Strings definidas com aspas duplas&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#STRING DOUBLE-QUOTED&lt;/span&gt;

&lt;span class="x"&gt;#concatenar a + b&lt;/span&gt;
&lt;span class="x"&gt;#interpolar&lt;/span&gt;

&lt;span class="x"&gt;$num = 55;&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;O valor da variável num é: &amp;quot; . $num . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;O valor da variável num é: $num \n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;$arr = [&amp;quot;Preto&amp;quot;, &amp;quot;Azul&amp;quot;, &amp;quot;Amarelo&amp;quot;];&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;A cor da bola é: $arr[1] \n&amp;quot;;&lt;/span&gt;


&lt;span class="x"&gt;$a = 10;&lt;/span&gt;
&lt;span class="x"&gt;$$a = 50;&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;O valor de a é: $a e o valor de aa é: $a \n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;O valor de a é: $a e o valor de aa é: ${$a} \n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;${$arr[2]} = &amp;#39;Marrom&amp;#39;;&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;Var: $arr[2] , ${$arr[2]}&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="string"></category><category term="aspas"></category><category term="aspas duplas"></category></entry><entry><title>String heredoc e nowdoc em PHP</title><link href="http://excript.com/php/string-heredoc-nowdoc-php.html" rel="alternate"></link><published>2016-01-02T18:09:00-02:00</published><updated>2016-01-02T18:09:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-01-02:/php/string-heredoc-nowdoc-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o que são as Strings chamadas de heredoc e as Strings chamadas de nowdoc. Estudaremos os conceitos dessas definições e a diferença entre ambas implementações.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#HEREDOC E NOWDOC&lt;/span&gt;

&lt;span class="x"&gt;# HEREDOC == &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;$x = 50;&lt;/span&gt;

&lt;span class="x"&gt;$heredoc =&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;&amp;lt;&amp;lt;TESTE&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;div&amp;gt;O valor da variável x é: $x&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;TESTE …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o que são as Strings chamadas de heredoc e as Strings chamadas de nowdoc. Estudaremos os conceitos dessas definições e a diferença entre ambas implementações.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#HEREDOC E NOWDOC&lt;/span&gt;

&lt;span class="x"&gt;# HEREDOC == &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;$x = 50;&lt;/span&gt;

&lt;span class="x"&gt;$heredoc =&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;&amp;lt;&amp;lt;TESTE&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;div&amp;gt;O valor da variável x é: $x&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;TESTE;&lt;/span&gt;

&lt;span class="x"&gt;echo $heredoc;&lt;/span&gt;


&lt;span class="x"&gt;#NOWDOC  == &amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="x"&gt;$nowdoc = &amp;lt;&amp;lt;&amp;lt;&amp;#39;EOT&amp;#39;&lt;/span&gt;

&lt;span class="x"&gt;    class NowDoc{&lt;/span&gt;

&lt;span class="x"&gt;        function __construct(){}&lt;/span&gt;

&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;EOT;&lt;/span&gt;

&lt;span class="x"&gt;echo $nowdoc;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="string"></category><category term="heredoc"></category><category term="nowdoc"></category></entry><entry><title>Introdução às Strings em PHP</title><link href="http://excript.com/php/introducao-as-string-php.html" rel="alternate"></link><published>2016-01-02T18:08:00-02:00</published><updated>2016-01-02T18:08:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2016-01-02:/php/introducao-as-string-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula iniciaremos o estudo das String em PHP. Veremos as terminologias utilizadas e aprendemos os principais conceitos que envolvem a utilizam e uso dessa que é, sem dúvida, a principal estrutura de qualquer linguagem de programação.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao-as-strings"&gt;
&lt;h2&gt;INTRODUÇÃO ÀS STRINGS&lt;/h2&gt;
&lt;p&gt;em branco.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#STRING&lt;/span&gt;

&lt;span class="x"&gt;$str = &amp;quot;abc&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;echo …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula iniciaremos o estudo das String em PHP. Veremos as terminologias utilizadas e aprendemos os principais conceitos que envolvem a utilizam e uso dessa que é, sem dúvida, a principal estrutura de qualquer linguagem de programação.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao-as-strings"&gt;
&lt;h2&gt;INTRODUÇÃO ÀS STRINGS&lt;/h2&gt;
&lt;p&gt;em branco.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#STRING&lt;/span&gt;

&lt;span class="x"&gt;$str = &amp;quot;abc&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;echo $str . &amp;quot;123\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;//echo $str[3] . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;//echo $str{0};&lt;/span&gt;

&lt;span class="x"&gt;$len = strlen($str);&lt;/span&gt;
&lt;span class="x"&gt;for($i = 0; $i &amp;lt; $len; $i++){&lt;/span&gt;
&lt;span class="x"&gt;    echo $str[$i] . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="string"></category><category term="caractere"></category></entry><entry><title>Parâmetros por Referência em PHP II</title><link href="http://excript.com/php/parametro-por-referencia-php-ii.html" rel="alternate"></link><published>2015-12-12T12:19:00-02:00</published><updated>2015-12-12T12:19:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-12:/php/parametro-por-referencia-php-ii.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta segunda aula sobre a passagem de parâmetros por referência, implementaremos um código para estudarmos as vantagens e as principais diferenças nesse tipo de abordagem.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="c1"&gt;#====================&lt;/span&gt;
&lt;span class="c1"&gt;#  == eXcript.com ==&lt;/span&gt;
&lt;span class="c1"&gt;#====================&lt;/span&gt;


&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$valor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$valor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Parâmetros por Referência em PHP</title><link href="http://excript.com/php/argumento-por-referencia-php.html" rel="alternate"></link><published>2015-12-11T17:06:00-02:00</published><updated>2015-12-11T17:06:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-11:/php/argumento-por-referencia-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a diferença entre a passagem de argumentos por valor e por referência. Também aprenderemos como funciona a passagem por referência e a forma como o PHP manipula os parâmetros.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="argumentos-por-referencia"&gt;
&lt;h2&gt;ARGUMENTOS POR REFERÊNCIA&lt;/h2&gt;
&lt;p&gt;Quando definimos uma variável como sendo argumento de uma função, ocorre que o valor contido …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a diferença entre a passagem de argumentos por valor e por referência. Também aprenderemos como funciona a passagem por referência e a forma como o PHP manipula os parâmetros.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="argumentos-por-referencia"&gt;
&lt;h2&gt;ARGUMENTOS POR REFERÊNCIA&lt;/h2&gt;
&lt;p&gt;Quando definimos uma variável como sendo argumento de uma função, ocorre que o valor contido nessa variável é copiado para a variável-parâmetro da função. Na maior parte das vezes esse tipo de funcionamento é o ideal, porém, se estivermos trabalhando com um Array que contenha por exemplo, 100.000 elementos, teremos uma situação em que ao invocarmos a função todos os itens desse Array serão copiados para a variável-parâmetro.&lt;/p&gt;
&lt;p&gt;A linguagem nos disponibiliza uma forma de passarmos um parâmetro enviando o endereço de uma variável ao invés de passarmos uma cópia do valor de uma variável. Ao passarmos o endereço de uma variável teremos uma situação em que todas as ações que forem feitas nessa variável irão alterar a estrutura original.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$a = [1,2,3];&lt;/span&gt;
&lt;span class="x"&gt;$b = $a;&lt;/span&gt;

&lt;span class="x"&gt;$a[1] = 5;&lt;/span&gt;

&lt;span class="x"&gt;print_r($a);&lt;/span&gt;
&lt;span class="x"&gt;print_r($b);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$a = [1,2,3];&lt;/span&gt;
&lt;span class="x"&gt;$b = &amp;amp;$a;&lt;/span&gt;

&lt;span class="x"&gt;$a[1] = 5;&lt;/span&gt;

&lt;span class="x"&gt;print_r($a);&lt;/span&gt;
&lt;span class="x"&gt;print_r($b);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Funções variádicas em PHP</title><link href="http://excript.com/php/funcao-variadica-php.html" rel="alternate"></link><published>2015-12-10T18:11:00-02:00</published><updated>2015-12-10T18:11:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-10:/php/funcao-variadica-php.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos o que são funções variádicas, como implementa-las e as diversas situações em que devemos fazer uso desse conceito.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function cubo($num){&lt;/span&gt;

&lt;span class="x"&gt;    $x = ($num * $num * $num);&lt;/span&gt;

&lt;span class="x"&gt;    return $x;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;echo cubo(3);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="função"></category><category term="parâmetro"></category><category term="argumento"></category><category term="função variádica"></category></entry><entry><title>Retorno de Valores pela função em PHP</title><link href="http://excript.com/php/retorno-valor-funcao-php.html" rel="alternate"></link><published>2015-12-10T18:09:00-02:00</published><updated>2015-12-10T18:09:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-10:/php/retorno-valor-funcao-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nessa aula, estudaremos, como utilizar a instrução return para retornarmos valores por uma função a quem a invocou.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="retornando-valores"&gt;
&lt;h2&gt;RETORNANDO VALORES&lt;/h2&gt;
&lt;p&gt;Para retornarmos um valor, basta passarmos o mesmo através da palavra-chave &lt;tt class="docutils literal"&gt;return&lt;/tt&gt;. Após o uso da instrução &lt;tt class="docutils literal"&gt;return&lt;/tt&gt; a função é finalizada e o valor definido retornado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function soma()&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    $num …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nessa aula, estudaremos, como utilizar a instrução return para retornarmos valores por uma função a quem a invocou.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="retornando-valores"&gt;
&lt;h2&gt;RETORNANDO VALORES&lt;/h2&gt;
&lt;p&gt;Para retornarmos um valor, basta passarmos o mesmo através da palavra-chave &lt;tt class="docutils literal"&gt;return&lt;/tt&gt;. Após o uso da instrução &lt;tt class="docutils literal"&gt;return&lt;/tt&gt; a função é finalizada e o valor definido retornado.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function soma()&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    $num = func_num_args();&lt;/span&gt;
&lt;span class="x"&gt;    $args = func_get_args();&lt;/span&gt;

&lt;span class="x"&gt;    $total = 0;&lt;/span&gt;
&lt;span class="x"&gt;    for ($i = 0; $i &amp;lt; $num; $i++)&lt;/span&gt;
&lt;span class="x"&gt;        $total += $args[$i];&lt;/span&gt;

&lt;span class="x"&gt;    return $total;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;soma(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function media(...$valores){&lt;/span&gt;

&lt;span class="x"&gt;    $total = array_sum($valores);&lt;/span&gt;
&lt;span class="x"&gt;    $total = $total / count($valores);&lt;/span&gt;
&lt;span class="x"&gt;    return $total;&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;echo media(5,5,6);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="função"></category><category term="retorno de valor"></category><category term="return"></category></entry><entry><title>Funções e Escopo de Variáveis em PHP</title><link href="http://excript.com/php/funcao-escopo-de-variaveis-php.html" rel="alternate"></link><published>2015-12-10T16:35:00-02:00</published><updated>2015-12-10T16:35:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-10:/php/funcao-escopo-de-variaveis-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o escopo de variáveis definidas em funções, bem como os vários conceitos envolvidos.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="funcoes-e-o-escopo-de-variaveis"&gt;
&lt;h2&gt;FUNÇÕES E O ESCOPO DE VARIÁVEIS&lt;/h2&gt;
&lt;p&gt;As funções em PHP possuem seu escopo restrito de forma a tornar o bloco de instrução da função isolado. Temos que de dentro de uma função, não existe …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o escopo de variáveis definidas em funções, bem como os vários conceitos envolvidos.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="funcoes-e-o-escopo-de-variaveis"&gt;
&lt;h2&gt;FUNÇÕES E O ESCOPO DE VARIÁVEIS&lt;/h2&gt;
&lt;p&gt;As funções em PHP possuem seu escopo restrito de forma a tornar o bloco de instrução da função isolado. Temos que de dentro de uma função, não existe visibilidade das variáveis definidas no script.&lt;/p&gt;
&lt;p&gt;Todas as variáveis que são declaradas no corpo de um arquivo possuem escopo global, isto é, podem ser acessadas de qualquer parte do código. Já, as variáveis declaradas dentro de uma função, não serão visíveis externamente da mesma maneira que não é possível acessar as variáveis de escopo global de dentro de uma função.&lt;/p&gt;
&lt;p&gt;Em PHP temos diversos escopos e iremos no decorrer do curso estudar cada um deles.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Escopo global&lt;/li&gt;
&lt;li&gt;Escopo de funções&lt;/li&gt;
&lt;li&gt;Escopo de classes&lt;/li&gt;
&lt;li&gt;Escopo de namespace&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="escopo-de-funcao"&gt;
&lt;h2&gt;ESCOPO DE FUNÇÃO&lt;/h2&gt;
&lt;p&gt;O primeiro nível de escopo é o escopo de variáveis. É comum chamarmos o escopo de funções como escopo local, logo, tudo que for declarado dentro de uma função será desalocado no momento em que está finalizar a execução.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function funcEstudo(){&lt;/span&gt;
&lt;span class="x"&gt;    $valor1 = 10;&lt;/span&gt;
&lt;span class="x"&gt;    $valor2 = 16;&lt;/span&gt;
&lt;span class="x"&gt;    $total = $valor1 + $valor2;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;funcEstudo();&lt;/span&gt;

&lt;span class="x"&gt;echo $total;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O código acima se executado, levantará uma exceção dizendo que a variável $total não existe. Então, como regra geral, tudo que acontecer dentro de uma função será finalizado com esta.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$x = &amp;#39;Fala&amp;#39;; // global $x&lt;/span&gt;
&lt;span class="x"&gt;function funcaoX()&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    global $x;&lt;/span&gt;
&lt;span class="x"&gt;    $x .= &amp;#39; galera!!!&amp;#39;;&lt;/span&gt;
&lt;span class="x"&gt;    echo $x;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;funcaoX();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Uma outra forma de acesso a variável &lt;tt class="docutils literal"&gt;$x&lt;/tt&gt; é utilizando o array &lt;tt class="docutils literal"&gt;$GLOBALS&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$GLOBALS[&amp;#39;x&amp;#39;] .= &amp;#39; World&amp;#39;; // change global $x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;AS VARIÁVEIS NÃO SÃO DESTRUÍDAS AO TÉRMINO DO BLOCO DE INSTRUÇÃO!!! ALTERAR VÍDEO AULA!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$testando = 10;&lt;/span&gt;
&lt;span class="x"&gt;$a = 10;&lt;/span&gt;
&lt;span class="x"&gt;$b = 5;&lt;/span&gt;

&lt;span class="x"&gt;function estudoEscopo(){&lt;/span&gt;
&lt;span class="x"&gt;    echo $GLOBALS[&amp;quot;a&amp;quot;];&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;


&lt;span class="x"&gt;estudoEscopo();&lt;/span&gt;

&lt;span class="x"&gt;print_r($GLOBALS);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Lista de Parâmetros em PHP II</title><link href="http://excript.com/php/lista-parametro-php-ii.html" rel="alternate"></link><published>2015-12-10T15:28:00-02:00</published><updated>2015-12-10T15:28:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-10:/php/lista-parametro-php-ii.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula daremos continuidade ao estudo de funções que são capazes de receber lista de parâmetros.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="lista-de-parametros-ii"&gt;
&lt;h2&gt;LISTA DE PARÂMETROS II&lt;/h2&gt;
&lt;p&gt;Essa aula é a continuação da aula anterior, logo, &lt;a class="reference external" href="http://excript.com/php/lista-parametro-php.html"&gt;o texto de apoio da aula anterior serve a esta também&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function somaTudo(){&lt;/span&gt;

&lt;span class="x"&gt;    $lista = func_get_args();&lt;/span&gt;
&lt;span class="x"&gt;    $qntd = func_num_args …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula daremos continuidade ao estudo de funções que são capazes de receber lista de parâmetros.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="lista-de-parametros-ii"&gt;
&lt;h2&gt;LISTA DE PARÂMETROS II&lt;/h2&gt;
&lt;p&gt;Essa aula é a continuação da aula anterior, logo, &lt;a class="reference external" href="http://excript.com/php/lista-parametro-php.html"&gt;o texto de apoio da aula anterior serve a esta também&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function somaTudo(){&lt;/span&gt;

&lt;span class="x"&gt;    $lista = func_get_args();&lt;/span&gt;
&lt;span class="x"&gt;    $qntd = func_num_args();&lt;/span&gt;
&lt;span class="x"&gt;    $total = 0;&lt;/span&gt;

&lt;span class="x"&gt;//    for($x = 0; $x&amp;lt;$qntd; $x++)&lt;/span&gt;
&lt;span class="x"&gt;    foreach($lista as $item)&lt;/span&gt;
&lt;span class="x"&gt;    {&lt;/span&gt;
&lt;span class="x"&gt;        $total += $item;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;    echo &amp;quot;A soma de todos parâmetros é: &amp;quot; . $total;&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;somaTudo(1,2,3,4,5,6);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="função"></category><category term="parâmetro"></category><category term="argumento"></category><category term="função variádica"></category></entry><entry><title>Parâmetros default com PHP</title><link href="http://excript.com/php/parametros-default-php.html" rel="alternate"></link><published>2015-12-07T16:49:00-02:00</published><updated>2015-12-07T16:49:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-07:/php/parametros-default-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o conceito de parâmetros default, bem como seus beneficios e situações em que devemos utiliza-los.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="parametros-default"&gt;
&lt;h2&gt;PARÂMETROS DEFAULT&lt;/h2&gt;
&lt;p&gt;Um recurso bastante importante é a definição de valores &lt;tt class="docutils literal"&gt;default&lt;/tt&gt; para os parâmetros. Assim, caso o usuário não defina um valor de um parâmetro, este já terá um valor por …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o conceito de parâmetros default, bem como seus beneficios e situações em que devemos utiliza-los.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="parametros-default"&gt;
&lt;h2&gt;PARÂMETROS DEFAULT&lt;/h2&gt;
&lt;p&gt;Um recurso bastante importante é a definição de valores &lt;tt class="docutils literal"&gt;default&lt;/tt&gt; para os parâmetros. Assim, caso o usuário não defina um valor de um parâmetro, este já terá um valor por padrão.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function login($user=&amp;quot;user&amp;quot;, $senha=&amp;quot;123&amp;quot;)&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;user: &amp;quot; . $user;&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;senha: &amp;quot; . $senha;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;É importante lembrar que se invocarmos uma função sem passarmos os parâmetros que estão definidos, o PHP levantará uma exceção.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function login($user=&amp;quot;root&amp;quot;, $key=&amp;quot;123&amp;quot;){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;user = &amp;quot; . $user;&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;key = &amp;quot; . $key;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;login();&lt;/span&gt;
&lt;span class="x"&gt;login(&amp;quot;eXcript&amp;quot;, &amp;quot;123456&amp;quot;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Definindo parâmetros em PHP</title><link href="http://excript.com/php/definindo-parametro-php.html" rel="alternate"></link><published>2015-12-06T16:11:00-02:00</published><updated>2015-12-06T16:11:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-06:/php/definindo-parametro-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a definir parâmetro que devem ser passados pelas funções quando estas forem invocadas. Estudaremos as vantagens da passagens de valores por parâmetro ao invés da utilização de variáveis globais.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="definindo-parametros"&gt;
&lt;h2&gt;DEFININDO PARÂMETROS&lt;/h2&gt;
&lt;p&gt;Podemos definir parâmetros numa função, para isso, basta adicionarmos o nome de cada parâmetro no cabeçalho …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a definir parâmetro que devem ser passados pelas funções quando estas forem invocadas. Estudaremos as vantagens da passagens de valores por parâmetro ao invés da utilização de variáveis globais.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="definindo-parametros"&gt;
&lt;h2&gt;DEFININDO PARÂMETROS&lt;/h2&gt;
&lt;p&gt;Podemos definir parâmetros numa função, para isso, basta adicionarmos o nome de cada parâmetro no cabeçalho da função. Para declararmos vários parâmetros, basta utilizarmos uma vírgula para separmos cada um.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="parametros-versus-argumentos"&gt;
&lt;h2&gt;PARÂMETROS versus ARGUMENTOS&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function soma($a, $b)&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    $x = $a + $b;&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;A soma dos parâmetros é: &amp;quot; . $x;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Agora, ao invocarmos a função &lt;tt class="docutils literal"&gt;soma()&lt;/tt&gt; devemos passar 2 valores e então, estes serão somados.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;soma(10, 20);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function soma($num1, $num2){&lt;/span&gt;

&lt;span class="x"&gt;    $total = $num1 + $num2;&lt;/span&gt;

&lt;span class="x"&gt;    echo $total;&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;soma(10, 20);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Introdução às Funções em PHP</title><link href="http://excript.com/php/introducao-as-funcoes-php.html" rel="alternate"></link><published>2015-12-06T16:10:00-02:00</published><updated>2015-12-06T16:10:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-06:/php/introducao-as-funcoes-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula iniciaremos o estudo das funções e métodos com a linguagem PHP. Estudaremos qual o conceito e definição de função, método e procedimento.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="definicao"&gt;
&lt;h2&gt;DEFINIÇÃO&lt;/h2&gt;
&lt;p&gt;Para declararmos uma função utilizamos a palavra reservada &lt;tt class="docutils literal"&gt;function&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;A nomenclatura das funções segue as mesmas regras de nomenclatura das variáveis.&lt;/p&gt;
&lt;p&gt;É uma boa prática …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula iniciaremos o estudo das funções e métodos com a linguagem PHP. Estudaremos qual o conceito e definição de função, método e procedimento.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="definicao"&gt;
&lt;h2&gt;DEFINIÇÃO&lt;/h2&gt;
&lt;p&gt;Para declararmos uma função utilizamos a palavra reservada &lt;tt class="docutils literal"&gt;function&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;A nomenclatura das funções segue as mesmas regras de nomenclatura das variáveis.&lt;/p&gt;
&lt;p&gt;É uma boa prática que o nome da função seja composta pela primeira letra de cada palavra em maiúscula, salvo a primeira palavra.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;function minhaFunc()&lt;/span&gt;
&lt;span class="x"&gt;{&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;Fala galera!!&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="invocando-funcoes"&gt;
&lt;h2&gt;INVOCANDO FUNÇÕES&lt;/h2&gt;
&lt;p&gt;Durante o nosso estudo, trabalhamos com várias funções, logo, não há muito segredo sobre como invocar uma função.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;minhaFunc();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Toda vez que invocarmos uma função devemos abrir e fechar parentêsis após o nome da mesma, indiferente se houver parâmetros a serem enviados ou não.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#FUNÇÕES&lt;/span&gt;

&lt;span class="x"&gt;function minhaFunc(){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;Fala galera!&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;minhaFunc();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="função"></category><category term="método"></category><category term="procedimento"></category></entry><entry><title>Manipulação de Arrays em PHP</title><link href="http://excript.com/php/manipula%C3%A7%C3%A3o-arrays-php.html" rel="alternate"></link><published>2015-12-06T15:54:00-02:00</published><updated>2015-12-06T15:54:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-06:/php/manipulação-arrays-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as várias formas para a manipulação de Arrays bem comos as características e vantagens das diversas abordagens existentes.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#VERIFICA SE A ESTRUTURA É UMA ARRAY&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;FUNÇÃO: is_array() - &amp;quot; . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Valor = [] - &amp;quot; . is_array( [] ) . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Valor = array() - &amp;quot; . is_array( array() ) . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Valor = [1,2 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as várias formas para a manipulação de Arrays bem comos as características e vantagens das diversas abordagens existentes.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#VERIFICA SE A ESTRUTURA É UMA ARRAY&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;FUNÇÃO: is_array() - &amp;quot; . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Valor = [] - &amp;quot; . is_array( [] ) . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Valor = array() - &amp;quot; . is_array( array() ) . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Valor = [1,2,3] - &amp;quot; . is_array( [1,2,3] ) . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Valor = 1 - &amp;quot; . is_array( 1 ) . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo  &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;#RETORNA A QUANTIDADE DE ELEMENTOS&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;FUNÇÃO: count() &amp;quot; . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Valor = [1,2,3,4] - &amp;quot; . count( [1,2,3,4] ) . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Valor = range(0,1000) - &amp;quot; . count( range(0,1000) ) . &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;#VERIFICA SE UM ELEMENTO ESTÁ CONTIDO&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;FUNÇÃO: in_array(valor, array)&amp;quot; .  &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Valor = in_array(2, [1,2,3,4,5]) - &amp;quot; . in_array(2, [1,2,3,4,5]) . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Valor = in_array(6, [1,2,3,4,5]) - &amp;quot; . in_array(6, [1,2,3,4,5]) . &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;#ORDENAÇÃO&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;FUNÇÃO: sort()\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$arr = [&amp;quot;c&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;f&amp;quot;];&lt;/span&gt;
&lt;span class="x"&gt;sort($arr);&lt;/span&gt;
&lt;span class="x"&gt;print_r($arr);&lt;/span&gt;

&lt;span class="x"&gt;#INVERSÃO&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;FUNÇÃO: array_reverse\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$arr = [1, 2, 3, 4];&lt;/span&gt;
&lt;span class="x"&gt;$arr = array_reverse($arr);&lt;/span&gt;
&lt;span class="x"&gt;print_r($arr);&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;#SOMA&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;FUNÇÃO: array_sum()\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$arr = [1, 2, 3, 4];&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;A soma é: &amp;quot; . array_sum($arr);&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;#JUNÇÃO DE ARRAYS&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;FUNÇÃO: array_merge()\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$arr1 = [1, 2];&lt;/span&gt;
&lt;span class="x"&gt;$arr2 = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;];&lt;/span&gt;
&lt;span class="x"&gt;$x = array_merge($arr1, $arr2);&lt;/span&gt;
&lt;span class="x"&gt;print_r($x);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Arrays Multidimensionais em PHP</title><link href="http://excript.com/php/array-multidimensional-php.html" rel="alternate"></link><published>2015-12-06T13:34:00-02:00</published><updated>2015-12-06T13:34:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-06:/php/array-multidimensional-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as estruturas Arrays que possuem mais de uma dimensão.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="arrays-multidimensionais"&gt;
&lt;h2&gt;ARRAYS MULTIDIMENSIONAIS&lt;/h2&gt;
&lt;p&gt;Array Multidimensional é uma estrutura que tem vinculado um outro Array. Podemos construir estruturas com quantas dimensões forem necessárias, porém, na maior parte das vezes trabalharemos com estruturas que tenham 2 dimensões, ou seja, estruturas que …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as estruturas Arrays que possuem mais de uma dimensão.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="arrays-multidimensionais"&gt;
&lt;h2&gt;ARRAYS MULTIDIMENSIONAIS&lt;/h2&gt;
&lt;p&gt;Array Multidimensional é uma estrutura que tem vinculado um outro Array. Podemos construir estruturas com quantas dimensões forem necessárias, porém, na maior parte das vezes trabalharemos com estruturas que tenham 2 dimensões, ou seja, estruturas que armazenam informações tabulares e que também são chamadas de Tabelas, ou então, Planilhas.&lt;/p&gt;
&lt;p&gt;Estruturas multidimensionais em PHP também são representadas como Matrizes onde temos: Linhas * Colunas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$jogo = array&lt;/span&gt;
&lt;span class="x"&gt;(&lt;/span&gt;
&lt;span class="x"&gt;    array(1, &amp;quot;Zé&amp;quot;, 11),&lt;/span&gt;
&lt;span class="x"&gt;    array(2, &amp;quot;José&amp;quot;, 4),&lt;/span&gt;
&lt;span class="x"&gt;    array(3, &amp;quot;Zéca&amp;quot;, 22)&lt;/span&gt;
&lt;span class="x"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A estrutura do Array acima pode também ser representada seguinte maneira:&lt;/p&gt;
&lt;blockquote&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="29%" /&gt;
&lt;col width="29%" /&gt;
&lt;col width="43%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;ID&lt;/td&gt;
&lt;td&gt;NOME&lt;/td&gt;
&lt;td&gt;PONTOS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Zé&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;José&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Zéca&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$jogo = array&lt;/span&gt;
&lt;span class="x"&gt;(&lt;/span&gt;
&lt;span class="x"&gt;    array(1, &amp;quot;Zé&amp;quot;, 11),&lt;/span&gt;
&lt;span class="x"&gt;    array(2, &amp;quot;José&amp;quot;, 4),&lt;/span&gt;
&lt;span class="x"&gt;    array(3, &amp;quot;Zéca&amp;quot;, 22)&lt;/span&gt;
&lt;span class="x"&gt;);&lt;/span&gt;

&lt;span class="x"&gt;for ($linha=0; $linha&amp;lt;3; $linha++) {&lt;/span&gt;
&lt;span class="x"&gt;    for ($coluna=0; $coluna&amp;lt;3; $coluna++) {&lt;/span&gt;
&lt;span class="x"&gt;        echo $jogo[$linha][$coluna].&amp;quot;  &amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;&amp;lt;br/&amp;gt; \n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="arrays-multidimensionais-contendo-estruturas-de-dados"&gt;
&lt;h2&gt;ARRAYS MULTIDIMENSIONAIS CONTENDO ESTRUTURAS DE DADOS&lt;/h2&gt;
&lt;p&gt;É bastante comum encontrarmos código que possuem Arrays associados a chaves e estes, estão representando estruturas de informações que por exemplo, serão enviadas a um componente. A seguir, temos um código demonstrativo de como essas estruturas aparecerão.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$x = [&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;array1&amp;quot; =&amp;gt; [&lt;/span&gt;
&lt;span class="x"&gt;            &amp;quot;aaa&amp;quot;=&amp;gt;100,&lt;/span&gt;
&lt;span class="x"&gt;            &amp;quot;bbb&amp;quot;=&amp;gt;200,&lt;/span&gt;
&lt;span class="x"&gt;            &amp;quot;ccc&amp;quot;=&amp;gt;300&lt;/span&gt;
&lt;span class="x"&gt;        ],&lt;/span&gt;
&lt;span class="x"&gt;        &amp;quot;array2&amp;quot; =&amp;gt; [&lt;/span&gt;
&lt;span class="x"&gt;            &amp;quot;ddd&amp;quot;=&amp;gt;500,&lt;/span&gt;
&lt;span class="x"&gt;            &amp;quot;eee&amp;quot;=&amp;gt;600,&lt;/span&gt;
&lt;span class="x"&gt;            &amp;quot;fff&amp;quot;=&amp;gt;700&lt;/span&gt;
&lt;span class="x"&gt;        ]&lt;/span&gt;
&lt;span class="x"&gt;    ];&lt;/span&gt;

&lt;span class="x"&gt;echo $x[&amp;quot;array&amp;quot;][&amp;quot;bbb&amp;quot;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#   | ID | NOME | PONTOS |&lt;/span&gt;
&lt;span class="x"&gt;#   | 1  | Zé   | 11     |&lt;/span&gt;
&lt;span class="x"&gt;#   | 2  | José | 4      |&lt;/span&gt;
&lt;span class="x"&gt;#   | 3  | Zéca | 22     |&lt;/span&gt;

&lt;span class="x"&gt;//$jogo = array(&lt;/span&gt;
&lt;span class="x"&gt;//    array(&amp;quot;ID&amp;quot;=&amp;gt;1, &amp;quot;NOME&amp;quot;=&amp;gt;&amp;quot;Zé&amp;quot;,   &amp;quot;PONTOS&amp;quot;=&amp;gt;11),&lt;/span&gt;
&lt;span class="x"&gt;//    array(&amp;quot;ID&amp;quot;=&amp;gt;2, &amp;quot;NOME&amp;quot;=&amp;gt;&amp;quot;José&amp;quot;, &amp;quot;PONTOS&amp;quot;=&amp;gt;4),&lt;/span&gt;
&lt;span class="x"&gt;//    array(&amp;quot;ID&amp;quot;=&amp;gt;3, &amp;quot;NOME&amp;quot;=&amp;gt;&amp;quot;Zéca&amp;quot;, &amp;quot;PONTOS&amp;quot;=&amp;gt;22)&lt;/span&gt;
&lt;span class="x"&gt;//);&lt;/span&gt;
&lt;span class="x"&gt;$jogo = [&lt;/span&gt;
&lt;span class="x"&gt;            [&amp;quot;ID&amp;quot;=&amp;gt;1, &amp;quot;NOME&amp;quot;=&amp;gt;&amp;quot;Zé&amp;quot;,   &amp;quot;PONTOS&amp;quot;=&amp;gt;11],&lt;/span&gt;
&lt;span class="x"&gt;            [&amp;quot;ID&amp;quot;=&amp;gt;2, &amp;quot;NOME&amp;quot;=&amp;gt;&amp;quot;José&amp;quot;, &amp;quot;PONTOS&amp;quot;=&amp;gt;4],&lt;/span&gt;
&lt;span class="x"&gt;            [&amp;quot;ID&amp;quot;=&amp;gt;3, &amp;quot;NOME&amp;quot;=&amp;gt;&amp;quot;Zéca&amp;quot;, &amp;quot;PONTOS&amp;quot;=&amp;gt;22]&lt;/span&gt;
&lt;span class="x"&gt;        ];&lt;/span&gt;
&lt;span class="x"&gt;print_r($jogo);&lt;/span&gt;

&lt;span class="x"&gt;echo $jogo[1][&amp;quot;NOME&amp;quot;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="array"></category><category term="multidimensional"></category></entry><entry><title>Arrays Associativos em PHP</title><link href="http://excript.com/php/array-associativo-php.html" rel="alternate"></link><published>2015-12-06T13:28:00-02:00</published><updated>2015-12-06T13:28:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-06:/php/array-associativo-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os Arrays Associativos, aprenderemos suas características e beneficios, bem como a ampla adoção desta estrutura pelas bibliotecas nativas do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="arrays-associativos"&gt;
&lt;h2&gt;ARRAYS ASSOCIATIVOS&lt;/h2&gt;
&lt;p&gt;Arrays associativos são estruturas onde cada elemento é identificado por uma chave única, entao, é indiferente se estamos trabalhando com Arrays Indexados ou Arrays Multidimensionais …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os Arrays Associativos, aprenderemos suas características e beneficios, bem como a ampla adoção desta estrutura pelas bibliotecas nativas do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="arrays-associativos"&gt;
&lt;h2&gt;ARRAYS ASSOCIATIVOS&lt;/h2&gt;
&lt;p&gt;Arrays associativos são estruturas onde cada elemento é identificado por uma chave única, entao, é indiferente se estamos trabalhando com Arrays Indexados ou Arrays Multidimensionais, ambos serão por definição, estruturas associativas.&lt;/p&gt;
&lt;p&gt;As estruturas Associativas do PHP podem vincular qualquer tipo de informação, seja ela um objeto, uma estrutura binária, um Array Multidimensional ou mesmo uma simples string contendo uma URL.&lt;/p&gt;
&lt;p&gt;Os Arrays podem conter chaves e valores dos mais variados tipos numa mesma estrutura, até porque, não existe Arrays tipados. Todas as estruturas são pode definição heterogeneas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$pontos = array(&amp;quot;Zé&amp;quot;=&amp;gt;&amp;quot;11&amp;quot;, &amp;quot;José&amp;quot;=&amp;gt;&amp;quot;4&amp;quot;, &amp;quot;Zéca&amp;quot;=&amp;gt;&amp;quot;22&amp;quot;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No código acima criamos um Array Associativo e vinculamos ao nome de cada participante de um jogo a sua pontuação. Como visto, construimos uma lista vinculando valores inteiros a uma String.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$pontos = array(&amp;quot;Zé&amp;quot;=&amp;gt;&amp;quot;11&amp;quot;, &amp;quot;José&amp;quot;=&amp;gt;&amp;quot;4&amp;quot;, &amp;quot;Zéca&amp;quot;=&amp;gt;&amp;quot;22&amp;quot;);&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;Pontos do Zé: &amp;quot;.$pontos[&amp;quot;Zé&amp;quot;].&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Pontos do José: &amp;quot;.$pontos[&amp;quot;José&amp;quot;].&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Pontos do  Zéca: &amp;quot;.$pontos[&amp;quot;Zéca&amp;quot;].&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="alterando-valores-em-estruturas-associativas"&gt;
&lt;h2&gt;ALTERANDO VALORES EM ESTRUTURAS ASSOCIATIVAS&lt;/h2&gt;
&lt;p&gt;Cada item contido num Array Associativo possui por definição uma chave e está possui um valor vinculado. Da mesma maneira em que podemos associar um novo valor, também é possível fazer a sua alteração.&lt;/p&gt;
&lt;p&gt;Se definirmos um valor a uma chave existente, teremos que o valor desta chave será alterado, do contrário, um novo item será adicionado à estrutura.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="listas-associativas-heterogeneas"&gt;
&lt;h2&gt;LISTAS ASSOCIATIVAS HETEROGENEAS&lt;/h2&gt;
&lt;p&gt;Uma lista heterogenea seria algo do gênero:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$pontos = array(&lt;/span&gt;
&lt;span class="x"&gt;    &amp;quot;url&amp;quot;=&amp;gt;&amp;quot;excript.com/&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;    404=&amp;gt;&amp;quot;excript.com/error/&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;    301=&amp;gt;&amp;quot;excript.com/error301/&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Na estrutura acima vinculamos inicialmente uma String a outra String. Em seguida, definimos 2 outros itens e a estes vinculamos um Inteiro a String.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#ARRAYS ASSOCIATIVOS&lt;/span&gt;

&lt;span class="x"&gt;$pontos = [&amp;quot;Zé&amp;quot;=&amp;gt;11, &amp;quot;José&amp;quot;=&amp;gt;4, &amp;quot;Zéca&amp;quot;=&amp;gt;22];&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;Zé: &amp;quot; . $pontos[&amp;quot;Zé&amp;quot;] . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;José: &amp;quot; . $pontos[&amp;quot;José&amp;quot;] . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Zéca: &amp;quot; . $pontos[&amp;quot;Zéca&amp;quot;] . &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;$pontos[&amp;quot;Zéca&amp;quot;] += 1;&lt;/span&gt;
&lt;span class="x"&gt;echo $pontos[&amp;quot;Zéca&amp;quot;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Estrutura foreach - alterando valores internos</title><link href="http://excript.com/php/foreach-alterando-valores.html" rel="alternate"></link><published>2015-12-05T17:26:00-02:00</published><updated>2015-12-05T17:26:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-05:/php/foreach-alterando-valores.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos como a instrução foreach funciona internamente e como podemos alterar os valores de uma estrutura utilizando essa instrução.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="alteracao-de-valores-e-a-estrutura-foreach"&gt;
&lt;h2&gt;ALTERAÇÃO DE VALORES E A ESTRUTURA FOREACH&lt;/h2&gt;
&lt;p&gt;É recorrente a dúvida do porque não é possível alterar o valor dos elementos quando utilizamos o laço de repetição &lt;tt class="docutils literal"&gt;foreach&lt;/tt&gt;. Para …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos como a instrução foreach funciona internamente e como podemos alterar os valores de uma estrutura utilizando essa instrução.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="alteracao-de-valores-e-a-estrutura-foreach"&gt;
&lt;h2&gt;ALTERAÇÃO DE VALORES E A ESTRUTURA FOREACH&lt;/h2&gt;
&lt;p&gt;É recorrente a dúvida do porque não é possível alterar o valor dos elementos quando utilizamos o laço de repetição &lt;tt class="docutils literal"&gt;foreach&lt;/tt&gt;. Para nós estudarmos essa situação, vamos fazer uma simples implementação e então estudar o que está acontecendo.&lt;/p&gt;
&lt;p&gt;É comum ao iterarmos Arrays precisarmos alterar o valor do elemento que está sendo iterado. Porém, se utilizarmos a definição padrão, não será possível alterar o valor dos elementos e como perceberemos, a alteração irá ocorrer, porém, não no elemento contido no nosso Array.&lt;/p&gt;
&lt;p&gt;Isso acontece, porque o PHP atribui a variavel que nós definimos no cabeçalho da estrutura &lt;tt class="docutils literal"&gt;foreach&lt;/tt&gt; uma cópia do valor do nosso elemento contido no Array, por essa razão, se alterarmos o valor passado pela variável definida no cabeçalho, a alteração não irá ocorrer no elemento contido no Array, mas sim, na variável que está sendo utilizada para iterar o Array.&lt;/p&gt;
&lt;p&gt;A solução a esse problema, é definirmos no cabeçalho da estrutura &lt;tt class="docutils literal"&gt;foreach&lt;/tt&gt; que deve ser passado a referência do elemento contido no nosso Array, e não a copia do valor do elemento.&lt;/p&gt;
&lt;p&gt;Nós ainda não estudamos a passagem de valores através do uso de referência, porém, pense na referência como sendo um ponteiro para uma região na memória em que a variável guarda o valor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#ITERAÇÃO E ALTERAÇÃO DOS VALORES&lt;/span&gt;

&lt;span class="x"&gt;$nums = range(0, 10);&lt;/span&gt;
&lt;span class="x"&gt;//print_r($nums);&lt;/span&gt;
&lt;span class="x"&gt;foreach($nums as $chave =&amp;gt; &amp;amp;$valor){&lt;/span&gt;
&lt;span class="x"&gt;    $valor *= 10;&lt;/span&gt;
&lt;span class="x"&gt;    echo $valor.&amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;span class="x"&gt;print_r($nums);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>O foreach em PHP - Como usar?</title><link href="http://excript.com/php/foreach-como-usar.html" rel="alternate"></link><published>2015-12-05T17:24:00-02:00</published><updated>2015-12-05T17:24:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-05:/php/foreach-como-usar.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta segunda aula sobre a estrutura de repetição foreach faremos um exemplo para aprofundar nosso estudo sobre a instrução foreach.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="estrutura-foreach-ii"&gt;
&lt;h2&gt;ESTRUTURA FOREACH II&lt;/h2&gt;
&lt;p&gt;Estudamos como implementar a estrutura &lt;tt class="docutils literal"&gt;foreach&lt;/tt&gt; e aprendemos que para cada item contido no Array o bloco de código definido na estrutura &lt;tt class="docutils literal"&gt;foreach&lt;/tt&gt; será executado. Então, esse …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta segunda aula sobre a estrutura de repetição foreach faremos um exemplo para aprofundar nosso estudo sobre a instrução foreach.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="estrutura-foreach-ii"&gt;
&lt;h2&gt;ESTRUTURA FOREACH II&lt;/h2&gt;
&lt;p&gt;Estudamos como implementar a estrutura &lt;tt class="docutils literal"&gt;foreach&lt;/tt&gt; e aprendemos que para cada item contido no Array o bloco de código definido na estrutura &lt;tt class="docutils literal"&gt;foreach&lt;/tt&gt; será executado. Então, esse é um conceito simples, porém muito importante, ou seja, cada item no &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; significa a execução do bloco de instrução e a atribuição do respectivo item para a variável que nós definimos no cabeçalho.&lt;/p&gt;
&lt;p&gt;Na primeira aula sobre a instrução &lt;tt class="docutils literal"&gt;foreach&lt;/tt&gt; estudamos uma notação em que o item é atribuido a variável definida no cabeçalho, porém, se fosse necessário a utilização da chave e do valor, nós temos que a primeira notação estudada não é capaz de fornecer.&lt;/p&gt;
&lt;p&gt;Então, agora estudaremos uma variação da estrutura &lt;tt class="docutils literal"&gt;foreach&lt;/tt&gt;, na verdade, iremos definir mais uma variável no cabeçalho para que esta receba a chave do elemento, porém, pode haver confusão porque a localização dos parâmetros é alterado.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#ESTRUTURA FOREACH II&lt;/span&gt;

&lt;span class="x"&gt;$lista = [&amp;quot;Domingo&amp;quot;, &amp;quot;Segunda&amp;quot;, &amp;quot;Terça&amp;quot;, &amp;quot;Quarta&amp;quot;, &amp;quot;Quinta&amp;quot;, &amp;quot;Sexta&amp;quot;, &amp;quot;Sabado&amp;quot;];&lt;/span&gt;

&lt;span class="x"&gt;foreach($lista as $chave =&amp;gt; $valor){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;$chave: $valor \n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Estrutura foreach em PHP</title><link href="http://excript.com/php/foreach-php.html" rel="alternate"></link><published>2015-12-03T22:57:00-02:00</published><updated>2015-12-03T22:57:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-03:/php/foreach-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a estrutura de repetição foreach, ou seja, uma definição evoluida da instrução for. Aprenderemos quando e onde devemos utilizar e implementaremos um código onde estudaremos o seu uso na prática.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="iterando-arrays-estrutura-foreach"&gt;
&lt;h2&gt;ITERANDO ARRAYS - ESTRUTURA &lt;cite&gt;foreach&lt;/cite&gt;&lt;/h2&gt;
&lt;p&gt;A estrutura de iteração &lt;cite&gt;foreach&lt;/cite&gt; é uma instrução especializada na iteração de &lt;cite&gt;Arrays …&lt;/cite&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a estrutura de repetição foreach, ou seja, uma definição evoluida da instrução for. Aprenderemos quando e onde devemos utilizar e implementaremos um código onde estudaremos o seu uso na prática.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="iterando-arrays-estrutura-foreach"&gt;
&lt;h2&gt;ITERANDO ARRAYS - ESTRUTURA &lt;cite&gt;foreach&lt;/cite&gt;&lt;/h2&gt;
&lt;p&gt;A estrutura de iteração &lt;cite&gt;foreach&lt;/cite&gt; é uma instrução especializada na iteração de &lt;cite&gt;Arrays&lt;/cite&gt;, ou seja, uma estrutura que está projetada para percorrer todos os elementos contidos num &lt;cite&gt;Array&lt;/cite&gt;.
Essa estrutura, além de melhorar a legibilidade do código, também evita alguns problemas, como o acesso a elementos que não existem, problema recorrente quando trabalhamos com a estrutura &lt;cite&gt;for&lt;/cite&gt; em sua definição básica.&lt;/p&gt;
&lt;p&gt;Com a estrutura &lt;cite&gt;foreach&lt;/cite&gt; temos acesso total aos elementos, da mesma forma como teríamos se estivessemos utilizando a estrutura &lt;cite&gt;for&lt;/cite&gt; normal.
Então, temos que o laço percorrerá todos elementos e a cada ciclo será definido o próximo elemento contido na estrutura que está sendo iterada.&lt;/p&gt;
&lt;p&gt;Então, temos que pensar na estrutura &lt;cite&gt;foreach&lt;/cite&gt; da seguinte maneira: &amp;quot;a cada elemento do array, execute o bloco definido&amp;quot;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$lista = array(&lt;/span&gt;
&lt;span class="x"&gt;    0 =&amp;gt; &amp;#39;par&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;    1 =&amp;gt; &amp;#39;impar&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;    2 =&amp;gt; &amp;#39;par&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;    3 =&amp;gt; &amp;#39;impar&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;    4 =&amp;gt; &amp;#39;par&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;    5 =&amp;gt; &amp;#39;impar&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;    6 =&amp;gt; &amp;#39;par&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;    7 =&amp;gt; &amp;#39;impar&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;    8 =&amp;gt; &amp;#39;par&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;    9 =&amp;gt; &amp;#39;impar&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;    10 =&amp;gt; &amp;#39;par&amp;#39;&lt;/span&gt;
&lt;span class="x"&gt;);&lt;/span&gt;

&lt;span class="x"&gt;// Imprime os números de 1 até 10&lt;/span&gt;
&lt;span class="x"&gt;foreach( range(0, 10, 2) as $numero ) {&lt;/span&gt;
&lt;span class="x"&gt;    print &amp;quot;$numero = $lista[$numero] \n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;span class="x"&gt;$arr = range(1, 10);&lt;/span&gt;
&lt;span class="x"&gt;foreach($arr as $valor) {&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;$valor\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;span class="x"&gt;$arr = array(1, 2, 3, 17);&lt;/span&gt;
&lt;span class="x"&gt;$i = 0;&lt;/span&gt;

&lt;span class="x"&gt;foreach ($arr as $valor) {&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;\$arr[$i] =&amp;gt; $valor\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;    $i++;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;$lista = array (&lt;/span&gt;
&lt;span class="x"&gt;    &amp;quot;um&amp;quot; =&amp;gt; 1,&lt;/span&gt;
&lt;span class="x"&gt;    &amp;quot;dois&amp;quot; =&amp;gt; 2,&lt;/span&gt;
&lt;span class="x"&gt;    &amp;quot;três&amp;quot; =&amp;gt; 3,&lt;/span&gt;
&lt;span class="x"&gt;    &amp;quot;quatro&amp;quot; =&amp;gt; 4&lt;/span&gt;
&lt;span class="x"&gt;);&lt;/span&gt;

&lt;span class="x"&gt;foreach ($lista as $chave =&amp;gt; $valor) {&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;\$lista[$chave] =&amp;gt; $valor.\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;$lista = array();&lt;/span&gt;
&lt;span class="x"&gt;$lista[0][0] = &amp;quot;a&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$lista[0][1] = &amp;quot;b&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$lista[1][0] = &amp;quot;c&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$lista[1][1] = &amp;quot;d&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;foreach ($lista as $val1) {&lt;/span&gt;
&lt;span class="x"&gt;    foreach ($val1 as $val2) {&lt;/span&gt;
&lt;span class="x"&gt;        echo &amp;quot;$val2\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;span class="x"&gt;foreach ([1, 2, 3, 4, 5] as $valor){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;$valor\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#ESTRUTURA FOREACH&lt;/span&gt;

&lt;span class="x"&gt;$lista = [&amp;quot;Domingo&amp;quot;, &amp;quot;Segunda&amp;quot;, &amp;quot;Terça&amp;quot;, &amp;quot;Quarta&amp;quot;, &amp;quot;Quinta&amp;quot;, &amp;quot;Sexta&amp;quot;, &amp;quot;Sabado&amp;quot;];&lt;/span&gt;

&lt;span class="x"&gt;//for($x=0; $x&amp;lt;count($lista); $x++){&lt;/span&gt;
&lt;span class="x"&gt;//    echo &amp;quot;$x: $lista[$x]\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;//}&lt;/span&gt;

&lt;span class="x"&gt;foreach($lista as $item){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;$item\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Iterando Arrays em PHP</title><link href="http://excript.com/php/iterando-array-php.html" rel="alternate"></link><published>2015-12-03T10:53:00-02:00</published><updated>2015-12-03T10:53:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-03:/php/iterando-array-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a percorrer todos elementos dos Arrays utilizando as estruturas de repetição estudadas nas aulas anteriores.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="iterando-arrays"&gt;
&lt;h2&gt;ITERANDO ARRAYS&lt;/h2&gt;
&lt;p&gt;Das 3 estruturas de repetição por nós estudadas, a melhor para iteração de Arrays e o laço de repetição ..for...
Até porque, nós temos uma variável contadadora, a quantidade de …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a percorrer todos elementos dos Arrays utilizando as estruturas de repetição estudadas nas aulas anteriores.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="iterando-arrays"&gt;
&lt;h2&gt;ITERANDO ARRAYS&lt;/h2&gt;
&lt;p&gt;Das 3 estruturas de repetição por nós estudadas, a melhor para iteração de Arrays e o laço de repetição ..for...
Até porque, nós temos uma variável contadadora, a quantidade de elementos contido na estrutura e a cada ciclo, a variável contadora é incrementada fazendo com que o nosso laço percorra todos os elementos do nosso Array.
Essa é uma maneira bastante eficaz, porém, há formas mais práticas e menos suscetíveis a erros.&lt;/p&gt;
&lt;p&gt;A melhor maneira para iterarmos uma coleção de elementos é pela estrutura ..foreach.., ou seja, uma estrutura de repetição ..for.. especializada em percorrer todos elementos de uma estrutura ..Array...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$lista = [&amp;quot;Domingo&amp;quot;, &amp;quot;Segunda&amp;quot;, &amp;quot;Terça&amp;quot;, &amp;quot;Quarta&amp;quot;, &amp;quot;Quinta&amp;quot;, &amp;quot;Sexta&amp;quot;, &amp;quot;Sabado&amp;quot;];&lt;/span&gt;
&lt;span class="x"&gt;for($x=0; $x&amp;lt;count($lista); $x++){&lt;/span&gt;
&lt;span class="x"&gt;    echo $lista[$x] . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="quantidade-de-elementos-num-array"&gt;
&lt;h2&gt;QUANTIDADE DE ELEMENTOS NUM ARRAY&lt;/h2&gt;
&lt;p&gt;Para sabermos quantos itens estão contidos num Array, temos a disposição a função ..count()... Basta invocarmos a função passando como parâmetro o Array que desejamos conhecer a quantidade de elementos para que seja retornado o montante.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$arr = [&amp;quot;aaa&amp;quot;, &amp;quot;bbb&amp;quot;, &amp;quot;ccc&amp;quot;];&lt;/span&gt;
&lt;span class="x"&gt;echo count($arr);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="iterando-arrays-numericos-estrutura-for"&gt;
&lt;h2&gt;ITERANDO ARRAYS NUMÉRICOS - ESTRUTURA &lt;tt class="docutils literal"&gt;for&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Inicialmente, vamos iterar um Array utilizando a estrutura ..for.. já estudada, até porque, essa é o princípio e também, a forma como as estruturas especializadas funcionam nos bastidores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#ITERANDO ARRAYS&lt;/span&gt;

&lt;span class="x"&gt;$lista = [&amp;quot;Domingo&amp;quot;, &amp;quot;Segunda&amp;quot;, &amp;quot;Terça&amp;quot;, &amp;quot;Quarta&amp;quot;, &amp;quot;Quinta&amp;quot;, &amp;quot;Sexta&amp;quot;, &amp;quot;Sabado&amp;quot;];&lt;/span&gt;
&lt;span class="x"&gt;$qnt = count($lista);&lt;/span&gt;
&lt;span class="x"&gt;echo $qnt . &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;for($x=0; $x&amp;lt;$qnt; $x++){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;$x: $lista[$x]\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Função range() em PHP</title><link href="http://excript.com/php/funcao-range-php.html" rel="alternate"></link><published>2015-12-02T10:32:00-02:00</published><updated>2015-12-02T10:32:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-02:/php/funcao-range-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a função range(), quando devemos utilizar a mesma, quais os beneficios e os principais beneficios da mesma.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="funcao-range"&gt;
&lt;h2&gt;FUNÇÃO &lt;tt class="docutils literal"&gt;range()&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O PHP nos fornece uma função que retorna uma sequência numérica conforme os parâmetros por nós definidos. Essa é uma excelente maneira para nós testarmos e estudarmos os …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a função range(), quando devemos utilizar a mesma, quais os beneficios e os principais beneficios da mesma.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="funcao-range"&gt;
&lt;h2&gt;FUNÇÃO &lt;tt class="docutils literal"&gt;range()&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;O PHP nos fornece uma função que retorna uma sequência numérica conforme os parâmetros por nós definidos. Essa é uma excelente maneira para nós testarmos e estudarmos os &lt;tt class="docutils literal"&gt;Arrays&lt;/tt&gt; como também, é uma função que pode ser amplamente utilizada em nossos scripts quando for necessário definir um Array num intervalo numérico pré-definido.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$x = range(11, 1, 4);&lt;/span&gt;

&lt;span class="x"&gt;$y = range(&amp;quot;a&amp;quot;, &amp;quot;z&amp;quot;, 2);&lt;/span&gt;
&lt;span class="x"&gt;print_r($y);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$x = range(11, 1, 4);&lt;/span&gt;

&lt;span class="x"&gt;$y = range(&amp;quot;a&amp;quot;, &amp;quot;z&amp;quot;, 2);&lt;/span&gt;
&lt;span class="x"&gt;print_r($y);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Definindo, Incluindo, Alterando e Excluindo elementos em PHP</title><link href="http://excript.com/php/definindo-incluindo-alterando-excluindo-elemento-php.html" rel="alternate"></link><published>2015-12-01T10:58:00-02:00</published><updated>2015-12-01T10:58:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-01:/php/definindo-incluindo-alterando-excluindo-elemento-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a incluir, alterar e remover elementos de um Array bem como as características pertencentes a estrutura na manipulação de listas.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="definindo-um-array"&gt;
&lt;h2&gt;DEFININDO UM ARRAY&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$arr = [1,2,3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="incluindo-elementos"&gt;
&lt;h2&gt;INCLUINDO ELEMENTOS&lt;/h2&gt;
&lt;p&gt;Para incluírmos novos elementos podemos utilizar uma das 2 definições a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$arr[] = 4;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="alterando-os-valores-dos-elementos"&gt;
&lt;h2&gt;ALTERANDO OS VALORES DOS …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a incluir, alterar e remover elementos de um Array bem como as características pertencentes a estrutura na manipulação de listas.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="definindo-um-array"&gt;
&lt;h2&gt;DEFININDO UM ARRAY&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$arr = [1,2,3]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="incluindo-elementos"&gt;
&lt;h2&gt;INCLUINDO ELEMENTOS&lt;/h2&gt;
&lt;p&gt;Para incluírmos novos elementos podemos utilizar uma das 2 definições a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$arr[] = 4;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="alterando-os-valores-dos-elementos"&gt;
&lt;h2&gt;ALTERANDO OS VALORES DOS ELEMENTOS&lt;/h2&gt;
&lt;p&gt;Da mesma forma em associamos um valor a uma chave numérica, é possível realizar alterações. Para isto, basta informarmos qual a chave que deve ter o seu valor alterado e então, definir o novo valor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$cores[2] = &amp;quot;Preto&amp;quot;;&amp;lt;1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;1&amp;gt; Estamos dizendo que o elemento de índice igual a 2 deve ter o seu valor alterado para a string &amp;quot;Preto&amp;quot;.&lt;/p&gt;
&lt;p&gt;Para imprimirmos os elementos contidos num Array podemos acessá-los diretamente ou então podemos iterar a coleção.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;echo &amp;quot;As cores são: $cores[0], $cores[1], $cores[2] and $cores[3]&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="removendo-elementos"&gt;
&lt;h2&gt;REMOVENDO ELEMENTOS&lt;/h2&gt;
&lt;p&gt;O PHP permite a remoção de qualquer elemento contido num Array, bastando somente passarmos o elemento a ser removido como parâmetro da função &lt;cite&gt;unset()&lt;/cite&gt;, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$arr = [&amp;quot;aaa&amp;quot;, &amp;quot;bbb&amp;quot;, &amp;quot;ccc&amp;quot;];&lt;/span&gt;
&lt;span class="x"&gt;unset($arr[1]);&amp;lt;1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;1&amp;gt; Remove o elemento &amp;quot;bbb&amp;quot; do Array.&lt;/p&gt;
&lt;p&gt;Quando removemos um elemento de um Array Indexado, temos que o índice do elemento será removido e a estrutura não será reindexada. Assim, se tivermos um Array que possua 3 elementos e removermos o elemento de índice igual a 1, temos que o Array passará a não possuir elemento vinculado ao índice 1, ou seja, remover um elemento não implicar na reindexação da estrutura.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#Definindo o Array&lt;/span&gt;
&lt;span class="x"&gt;$arr = [&amp;quot;zero&amp;quot;, &amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;três&amp;quot;, &amp;quot;quatro&amp;quot;];&lt;/span&gt;

&lt;span class="x"&gt;#Adicionando elementos&lt;/span&gt;
&lt;span class="x"&gt;$arr[] = &amp;quot;cinco&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;#Alterando elementos&lt;/span&gt;
&lt;span class="x"&gt;$arr[1] = &amp;quot;ummm&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$arr[4] = &amp;quot;quatrro&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;#Excluindo elementos&lt;/span&gt;
&lt;span class="x"&gt;unset($arr[3]);&lt;/span&gt;

&lt;span class="x"&gt;print_r($arr);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#Definindo o Array&lt;/span&gt;
&lt;span class="x"&gt;$lista = [&amp;quot;zero&amp;quot;, &amp;quot;um&amp;quot;, &amp;quot;dois&amp;quot;, &amp;quot;três&amp;quot;, &amp;quot;quatro&amp;quot;];&lt;/span&gt;

&lt;span class="x"&gt;#Adicionando elementos&lt;/span&gt;
&lt;span class="x"&gt;$lista[] = &amp;quot;cinco&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;#Alterando elementos&lt;/span&gt;
&lt;span class="x"&gt;$lista[1] = &amp;quot;ummm&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$lista[4] = &amp;quot;quatrro&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;#Excluindo elementos&lt;/span&gt;
&lt;span class="x"&gt;unset($lista[3]);&lt;/span&gt;

&lt;span class="x"&gt;print_r($lista);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Arrays Indexados em PHP</title><link href="http://excript.com/php/array-indexado-php.html" rel="alternate"></link><published>2015-12-01T10:52:00-02:00</published><updated>2015-12-01T10:52:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-01:/php/array-indexado-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os Arrays Indexados, isto é, os Arrays que vinculam a cada elemento um número. Aprenderemos quais os beneficios e quando devemos fazer uso dessa estrutura.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="arrays-indexados-numericos"&gt;
&lt;h2&gt;ARRAYS INDEXADOS (NUMÉRICOS)&lt;/h2&gt;
&lt;p&gt;A primeira forma de manipulação do tipo Array do PHP que estudaremos é o tipo indexado, ou seja, a …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os Arrays Indexados, isto é, os Arrays que vinculam a cada elemento um número. Aprenderemos quais os beneficios e quando devemos fazer uso dessa estrutura.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="arrays-indexados-numericos"&gt;
&lt;h2&gt;ARRAYS INDEXADOS (NUMÉRICOS)&lt;/h2&gt;
&lt;p&gt;A primeira forma de manipulação do tipo Array do PHP que estudaremos é o tipo indexado, ou seja, a estrutura que associa uma número inteiro não negativo a um valor, onde o primeiro elemento é igual a zero.&lt;/p&gt;
&lt;p&gt;Há 4 maneiras para criarmos e adicionarmos elementos a uma estrutura Arrays.&lt;/p&gt;
&lt;p&gt;A primeira, é utilizando o nome do tipo e adicionando os elementos como sendo parâmetros.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$cores = array(&amp;quot;Azul&amp;quot;, &amp;quot;Amarelo&amp;quot;, &amp;quot;Verde&amp;quot;, &amp;quot;Branco&amp;quot;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A segunda maneira, é vinculando o elemento a chave numérica propriamente dita.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$cores[0] = &amp;quot;Azul&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores[1] = &amp;quot;Amarelo&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores[2] = &amp;quot;Verde&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores[3] = &amp;quot;Branco&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A terceira forma é adicionado os elementos sem informar o índice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$cores[] = &amp;quot;Azul&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores[] = &amp;quot;Amarelo&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores[] = &amp;quot;Verde&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores[] = &amp;quot;Branco&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A quarta forma é utilizando os colchetes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$cores = [&amp;quot;Azul&amp;quot;,&amp;quot;Amarelo&amp;quot;,&amp;quot;Verde&amp;quot;,&amp;quot;Branco&amp;quot;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//Primeira definição de Array Indexado&lt;/span&gt;
&lt;span class="x"&gt;$cores = array(&amp;quot;Azul&amp;quot;, &amp;quot;Amarelo&amp;quot;, &amp;quot;Verde&amp;quot;, &amp;quot;Branco&amp;quot;);&lt;/span&gt;

&lt;span class="x"&gt;//Segunda definição de Array Indexado&lt;/span&gt;
&lt;span class="x"&gt;$cores2[10] = &amp;quot;Azul&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores2[11] = &amp;quot;Amarelo&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores2[12] = &amp;quot;Verde&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores2[13] = &amp;quot;Branco&amp;quot;;&lt;/span&gt;


&lt;span class="x"&gt;//Terceira definição de Array Indexado&lt;/span&gt;
&lt;span class="x"&gt;$cores3[] = &amp;quot;Azul&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores3[] = &amp;quot;Amarelo&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores3[] = &amp;quot;Verde&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores3[] = &amp;quot;Branco&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;//Quarta definição de Array Indexado&lt;/span&gt;
&lt;span class="x"&gt;$cores4 = [&amp;quot;Azul&amp;quot;, &amp;quot;Amarelo&amp;quot;, &amp;quot;Verde&amp;quot;, &amp;quot;Branco&amp;quot;];&lt;/span&gt;
&lt;span class="x"&gt;print_r($cores4);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//Primeira definição de Array Indexado&lt;/span&gt;
&lt;span class="x"&gt;$cores = array(&amp;quot;Azul&amp;quot;, &amp;quot;Amarelo&amp;quot;, &amp;quot;Verde&amp;quot;, &amp;quot;Branco&amp;quot;);&lt;/span&gt;
&lt;span class="x"&gt;//print_r($cores);&lt;/span&gt;

&lt;span class="x"&gt;$cores2[10] = &amp;quot;Azul&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores2[11] = &amp;quot;Amarelo&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores2[12] = &amp;quot;Verde&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores2[13] = &amp;quot;Branco&amp;quot;;&lt;/span&gt;


&lt;span class="x"&gt;$cores3[] = &amp;quot;Azul&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores3[] = &amp;quot;Amarelo&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores3[] = &amp;quot;Verde&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$cores3[] = &amp;quot;Branco&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;$cores4 = [&amp;quot;Azul&amp;quot;, &amp;quot;Amarelo&amp;quot;, &amp;quot;Verde&amp;quot;, &amp;quot;Branco&amp;quot;];&lt;/span&gt;
&lt;span class="x"&gt;print_r($cores4);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Introdução aos Arrays em PHP</title><link href="http://excript.com/php/introducao-array-php.html" rel="alternate"></link><published>2015-12-01T10:43:00-02:00</published><updated>2015-12-01T10:43:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-12-01:/php/introducao-array-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula teremos uma instrução sobre a estrutura Array. Aprenderemos a relação entre um Arranjo matemático e um Array e estudaremos as principais características e recursos que os Arrays nos proporcionam.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;Um array é um conjunto de elementos contidos numa mesma estrutura onde é possível definir um chave para …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula teremos uma instrução sobre a estrutura Array. Aprenderemos a relação entre um Arranjo matemático e um Array e estudaremos as principais características e recursos que os Arrays nos proporcionam.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;
&lt;p&gt;Um array é um conjunto de elementos contidos numa mesma estrutura onde é possível definir um chave para cada elemento. Quando pensamos em Arrays, devemos pensar numa estrutura que contém uma lista de elementos e o tipo de cada elemento é indiferente. Em um Array, cada elemento deve, por definição, possuir uma chave diferente dos demais, até porque, a única forma para recuperarmos uma elemento é através de sua chave.&lt;/p&gt;
&lt;p&gt;É importante perceber que o conceito de Array em PHP é diferente do conceito clássico de Array. Então, o nome pode num primeiro momento enganar os programadores que conhecem a definição classica de Array. Por isso é importante deixar claro que a definição de &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; em PHP é bastante diferente da definição encontrada em linguagem como C e C++.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Os arrays não possuem tipo de dado&lt;/li&gt;
&lt;li&gt;É possível adicionar, alterar e remover elementos&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Array para o PHP é uma estrutura de lista que pode ou não funcionar como os Arrays funcionam em linguagens como C++, Pascal e etc. Então, temos que encarar o estudo da estrutura Array do PHP de maneira diferenciada e principalmente, entender que basicamente, qualquer tipo de lista que viermos a precisar, pode ser construida com a estrutura Array e suas dezenas de funções auxiliares.&lt;/p&gt;
&lt;p&gt;Podemos dizer que existem 3 abordagens, ou então, formas de trabalhar com Arrays. É comum encontrarmos essas 3 definições na maior parte da literatura, porém, como aprenderemos, a verdade é que existe uma única definição e as outras abordagens não passam de abordagens distintas de uma mesma definição.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Array Indexados (numéricos)&lt;/li&gt;
&lt;li&gt;Array Associativos (mapas)&lt;/li&gt;
&lt;li&gt;Arrays Multidimensionais&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$a = array(1,2,3);&lt;/span&gt;

&lt;span class="x"&gt;print_r($a);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Precedência e Associatividade de Operadores em PHP</title><link href="http://excript.com/php/precedencia-associatividade-operadores.html" rel="alternate"></link><published>2015-11-30T23:52:00-02:00</published><updated>2015-11-30T23:52:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-11-30:/php/precedencia-associatividade-operadores.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a precedência de operadores da linguagem PHP. Aprenderemos qual a ordem em que uma expressão que faz uso de vários operadores será analisada e resolvida.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Variáveis Variáveis em PHP</title><link href="http://excript.com/php/variaveis-variaveis-php.html" rel="alternate"></link><published>2015-11-30T23:33:00-02:00</published><updated>2015-11-30T23:33:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-11-30:/php/variaveis-variaveis-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos uma forma de variável chamada de variável variável. Entendemos o seu funcionamento e limitação, bem como, a sua declaração e uso. Por fim, estudaremos a aplicação desse conceito com um exemplo prático.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="variaveis-variaveis"&gt;
&lt;h2&gt;VARIÁVEIS VARIÁVEIS&lt;/h2&gt;
&lt;p&gt;Em algumas implementações, é prático a utilização do que chamamos de &amp;quot;variáveis variáveis …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos uma forma de variável chamada de variável variável. Entendemos o seu funcionamento e limitação, bem como, a sua declaração e uso. Por fim, estudaremos a aplicação desse conceito com um exemplo prático.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="variaveis-variaveis"&gt;
&lt;h2&gt;VARIÁVEIS VARIÁVEIS&lt;/h2&gt;
&lt;p&gt;Em algumas implementações, é prático a utilização do que chamamos de &amp;quot;variáveis variáveis&amp;quot;, ou seja, variáveis que são criadas e utilizadas dinâmicamente e o seu nome é o valor de outra variável. A seguir, temos a definição de uma variável qualquer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$var = &amp;quot;teste&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O código acima simplesmente vincula a &lt;tt class="docutils literal"&gt;string&lt;/tt&gt; &lt;tt class="docutils literal"&gt;teste&lt;/tt&gt; ao nome de variável &lt;tt class="docutils literal"&gt;$var&lt;/tt&gt;. Para declararmos uma variável variável nós utilizaremos o valor atribuido a variável &lt;tt class="docutils literal"&gt;$var&lt;/tt&gt; como o nome da nossa próxima variável. Logo, temos que o nome da primeira variável é igual a &lt;tt class="docutils literal"&gt;$var&lt;/tt&gt; e o nome da nossa segunda variável é &lt;tt class="docutils literal"&gt;$$var&lt;/tt&gt; ou então, &lt;tt class="docutils literal"&gt;$hello&lt;/tt&gt;. A ideia de variáveis variáveis é bastante simples: utilizar o valor de uma variável como sendo o nome de outra.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Declarar uma variável&lt;/li&gt;
&lt;li&gt;Atribuir um valor a variável&lt;/li&gt;
&lt;li&gt;Utilizar o valor que foi atribuido a variável como uma espécie de chave para atribuir outro valor.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$varvar = &amp;quot;teste&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$$varvar = 50;&lt;/span&gt;

&lt;span class="x"&gt;echo $varvar . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo $$varvar . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo $teste . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gerando-constantes-dinamicamente"&gt;
&lt;h2&gt;GERANDO CONSTANTES DINÂMICAMENTE&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;define(&amp;quot;TESTE&amp;quot;, 10);&lt;/span&gt;
&lt;span class="x"&gt;for($x=0; $x&amp;lt;5; $x++)&lt;/span&gt;
&lt;span class="x"&gt;    define(&amp;quot;C&amp;quot;.$x, $x);&lt;/span&gt;
&lt;span class="x"&gt;echo TESTE . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo C0 . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo C4 . &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;const VALOR = 1000;&lt;/span&gt;
&lt;span class="x"&gt;echo VALOR;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Constantes em PHP</title><link href="http://excript.com/php/constante-php.html" rel="alternate"></link><published>2015-11-29T18:32:00-02:00</published><updated>2015-11-29T18:32:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-11-29:/php/constante-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a definição e uso das constantes. Aprenderemos inicialmente a declarar constantes com a função define() e veremos quais os beneficios na utilização de funções para esse tipo de declaração.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="definindo-constantes-com-a-funcao-define"&gt;
&lt;h2&gt;DEFININDO CONSTANTES COM A FUNÇÃO &lt;tt class="docutils literal"&gt;define()&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Em programação, constante é um valor alocado na memória que pode ser …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a definição e uso das constantes. Aprenderemos inicialmente a declarar constantes com a função define() e veremos quais os beneficios na utilização de funções para esse tipo de declaração.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="definindo-constantes-com-a-funcao-define"&gt;
&lt;h2&gt;DEFININDO CONSTANTES COM A FUNÇÃO &lt;tt class="docutils literal"&gt;define()&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Em programação, constante é um valor alocado na memória que pode ser acessado por uma referência, mas que não pode ter o seu valor alterado após a mesma ser definida.&lt;/p&gt;
&lt;p&gt;O PHP possui 2 sintaxes para definição de constantes e, ainda que ambas tenham funcionamento diferente, o princípio é basicamente o mesmo - definir um valor que não pode ser alterado.&lt;/p&gt;
&lt;p&gt;A forma tradicional para definição de valores constantes da-se pelo uso da função &lt;tt class="docutils literal"&gt;define()&lt;/tt&gt;, essa função, define um valor imutável no escopo global e assim, podemos utiliza-la de qualquer parte do nosso código, porém, não podemos alterar seu valor.&lt;/p&gt;
&lt;p&gt;A diferença entre declarar uma constante com a função &lt;tt class="docutils literal"&gt;define()&lt;/tt&gt; ou então, com a palavra reservada &lt;tt class="docutils literal"&gt;const&lt;/tt&gt; é que a instrução &lt;tt class="docutils literal"&gt;const&lt;/tt&gt; declara as constantes em tempo de compilação, enquanto que a função &lt;tt class="docutils literal"&gt;define()&lt;/tt&gt; declara as constantes em tempo de execução. Ou seja, utilizando a função &lt;tt class="docutils literal"&gt;define()&lt;/tt&gt; para a declaração, podemos atribuir o nome para a constante no momento em que o código está sendo executado, porém, o mesmo não é possível com a instrução &lt;tt class="docutils literal"&gt;const&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Num comparativo performatico, temos que em algumas situações a definição com a instrução &lt;tt class="docutils literal"&gt;const&lt;/tt&gt; é executado mais rapidamente enquanto em outras situações, o uso da função &lt;tt class="docutils literal"&gt;define()&lt;/tt&gt; se mostra mais veloz.&lt;/p&gt;
&lt;p&gt;A nomenclatura de constantes é igual a nomenclatura de variáveis e o que irá diferenciar é que as constantes não são precedidas pelo caractere &amp;quot;cifrão&amp;quot;. Ainda que não seja obrigatório, o nome de constantes deve ser composto somente por caracteres maiúsculos. A definição de constantes com caracteres maiúsculo é um padrão que vem de outras linguagens e assim, todo programador entende que uma referência com caracteres maiúsculas trata-se de um valor constante.&lt;/p&gt;
&lt;p&gt;A definição da função &lt;tt class="docutils literal"&gt;define()&lt;/tt&gt; é a seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;define(&amp;lt;identificador&amp;gt;, &amp;lt;valor&amp;gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="verificando-se-uma-constante-existe"&gt;
&lt;h2&gt;VERIFICANDO SE UMA CONSTANTE EXISTE&lt;/h2&gt;
&lt;p&gt;É comum verificarmos antes de acessarmos uma constante se a mesma está definida, para isso, temos a função &lt;tt class="docutils literal"&gt;defined()&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;if(defined(&amp;quot;TOTAL&amp;quot;))&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;Constante declarada.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="acessando-constantes"&gt;
&lt;h2&gt;ACESSANDO CONSTANTES&lt;/h2&gt;
&lt;p&gt;Para utilizarmos os valores constantes definidos, basta utilizar a referência que foi utilizada na definição ou então, obter o valor definido através da função &lt;tt class="docutils literal"&gt;constant()&lt;/tt&gt;. Só é necessário a utilização da função &lt;tt class="docutils literal"&gt;constant()&lt;/tt&gt; quando definimos valores constantes dinamicante, do contrário, basta informar a referência definida na declaração.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/2447791/define-vs-const"&gt;http://stackoverflow.com/questions/2447791/define-vs-const&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="definindo-constantes-com-a-instrucao-const"&gt;
&lt;h2&gt;DEFININDO CONSTANTES COM A INSTRUÇÃO &lt;tt class="docutils literal"&gt;const&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Uma outra forma para a declaração de constantes é através do uso da palavra reservada &lt;tt class="docutils literal"&gt;const&lt;/tt&gt;. É comum a utilização da instrução &lt;tt class="docutils literal"&gt;const&lt;/tt&gt; na definição de classe ou então, dentro de um namespace. Porém, isso é somente uma convenção, logo, pode-se utilizar a instrução &lt;tt class="docutils literal"&gt;const&lt;/tt&gt; para definir constantes onde bem entendermos.&lt;/p&gt;
&lt;p&gt;A seguir estamos fazendo uso da instrução &lt;tt class="docutils literal"&gt;const&lt;/tt&gt; para declararmos uma constante.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;const VALOR = 100;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="manipulando-variaveis-por-referencia"&gt;
&lt;h2&gt;MANIPULANDO VARIÁVEIS POR REFERÊNCIA&lt;/h2&gt;
&lt;p&gt;O PHP permite o acesso ao endereço de memória de uma variável. Dessa forma, temos que é possível o uso de 2 variáveis que estejam apontando para um mesmo local, isto é, duas variáveis que tenham referências diferentes porém, apontam numa mesma direção.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="constantes-magicas"&gt;
&lt;h2&gt;CONSTANTES MÁGICAS&lt;/h2&gt;
&lt;p&gt;Chamamos de constantes mágicas a um grupo de constantes que tem por objetivo, retornar informaçõesn sobre a execução atual do código. Assim, temos que com as constantes mágicas, podemos obter por exemplo, o número da linha em que o script está executando, o nome da função, do namespace e outros valores.&lt;/p&gt;
&lt;p&gt;Esse conjunto de funções tem por objetivo principal auxiliar na construção de ferramentas de diagnóstico de erros ou então, para outras tarefas administrativas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;echo __LINE__ . PHP_EOL; &amp;lt;1&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;echo __FILE__ . PHP_EOL; &amp;lt;2&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;echo __DIR__ . PHP_EOL; &amp;lt;3&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;echo __FUNCTION . PHP_EOL; &amp;lt;4&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;echo __CLASS__ . PHP_EOL; &amp;lt;5&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;echo __METHOD__ . PHP_EOL; &amp;lt;6&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;echo __NAMESPACE__ . PHP_EOL; &amp;lt;7&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;lt;1&amp;gt; Retorna o número da linha em execução
&amp;lt;2&amp;gt; Retorna o path do arquivo que está sendo executado e seu nome
&amp;lt;3&amp;gt; Retorna o diretório
&amp;lt;4&amp;gt; Retorna o nome da função
&amp;lt;5&amp;gt; Retorna o nome da classe
&amp;lt;6&amp;gt; Retorna o nome do método
&amp;lt;7&amp;gt; Retorna o nome da namespace&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;define(&amp;quot;TESTE&amp;quot;, 10);&lt;/span&gt;
&lt;span class="x"&gt;echo TESTE . &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;for($x=0; $x&amp;lt;5; $x++)&lt;/span&gt;
&lt;span class="x"&gt;    define(&amp;quot;CONSTANTE&amp;quot;.$x, $x);&lt;/span&gt;

&lt;span class="x"&gt;echo CONSTANTE0 . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo CONSTANTE4 . &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;const VALOR = 1000;&lt;/span&gt;
&lt;span class="x"&gt;echo VALOR . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Estrutura de Seleção Múltipla switch em PHP</title><link href="http://excript.com/php/estrutura-selecao-multipla-switch-php.html" rel="alternate"></link><published>2015-11-18T22:08:00-02:00</published><updated>2015-11-18T22:08:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-11-18:/php/estrutura-selecao-multipla-switch-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a estrutura de seleção múltipla, isto é, uma forma de definirmos um conjunto de expressões e um determinado bloco que deve ser executado em cada situação.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#INSTRUÇÃO SWITCH&lt;/span&gt;

&lt;span class="x"&gt;$num = 1;&lt;/span&gt;

&lt;span class="x"&gt;switch($num){&lt;/span&gt;

&lt;span class="x"&gt;    case 1:&lt;/span&gt;
&lt;span class="x"&gt;        echo &amp;quot;O valor é igual a 1&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;        break;&lt;/span&gt;
&lt;span class="x"&gt;    case …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a estrutura de seleção múltipla, isto é, uma forma de definirmos um conjunto de expressões e um determinado bloco que deve ser executado em cada situação.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#INSTRUÇÃO SWITCH&lt;/span&gt;

&lt;span class="x"&gt;$num = 1;&lt;/span&gt;

&lt;span class="x"&gt;switch($num){&lt;/span&gt;

&lt;span class="x"&gt;    case 1:&lt;/span&gt;
&lt;span class="x"&gt;        echo &amp;quot;O valor é igual a 1&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;        break;&lt;/span&gt;
&lt;span class="x"&gt;    case 2:&lt;/span&gt;
&lt;span class="x"&gt;        echo &amp;quot;O valor é igual a 2&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;        break;&lt;/span&gt;
&lt;span class="x"&gt;//    default:&lt;/span&gt;
&lt;span class="x"&gt;//        echo &amp;quot;Estrutura default executada&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="estrutura de seleção"></category><category term="estrutura de seleção múltipla"></category><category term="switch"></category></entry><entry><title>Estrutura de Seleção Múltipla switch em PHP (parte II)</title><link href="http://excript.com/php/estrutura-selecao-multipla-switch-php-parte2.html" rel="alternate"></link><published>2015-11-18T20:10:00-02:00</published><updated>2015-11-18T20:10:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-11-18:/php/estrutura-selecao-multipla-switch-php-parte2.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta segunda aula sobre as estruturas de seleção múltipla, implementaremos um código que demonstra os beneficios da instrução switch.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html lang=&amp;quot;pt-br&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;title&amp;gt;Instrução Switch na prática - Curso PHP - eXcript&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cbxMES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])){&lt;/span&gt;
        &lt;span class="nv"&gt;$mes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta segunda aula sobre as estruturas de seleção múltipla, implementaremos um código que demonstra os beneficios da instrução switch.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html lang=&amp;quot;pt-br&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;title&amp;gt;Instrução Switch na prática - Curso PHP - eXcript&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cbxMES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])){&lt;/span&gt;
        &lt;span class="nv"&gt;$mes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cbxMES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$mes&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Janeiro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fevereiro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Março&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Abril&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Maio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Junho&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Julho&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Agosto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Setembro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Outubro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Novembro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Dezembro&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;form method=&amp;quot;post&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;select name=&amp;quot;cbxMES&amp;quot; &amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;        &amp;lt;option value=&amp;quot;1&amp;quot;&amp;gt;Janeiro&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;Fevereiro&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;option value=&amp;quot;3&amp;quot;&amp;gt;Março&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;option value=&amp;quot;4&amp;quot;&amp;gt;Abril&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;option value=&amp;quot;5&amp;quot;&amp;gt;Maio&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;option value=&amp;quot;6&amp;quot;&amp;gt;Junho&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;option value=&amp;quot;7&amp;quot;&amp;gt;Julho&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;option value=&amp;quot;8&amp;quot;&amp;gt;Agosto&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;option value=&amp;quot;9&amp;quot;&amp;gt;Setembro&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;option value=&amp;quot;10&amp;quot;&amp;gt;Outubro&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;option value=&amp;quot;11&amp;quot;&amp;gt;Novembro&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;option value=&amp;quot;12&amp;quot;&amp;gt;Dezembro&amp;lt;/option&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;/select&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;


&lt;span class="x"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="estrutura de seleção"></category><category term="estrutura de seleção múltipla"></category><category term="switch"></category></entry><entry><title>Funções para Manipulação de Strings em PHP</title><link href="http://excript.com/php/funcao-manipular-string-php.html" rel="alternate"></link><published>2015-11-18T18:08:00-02:00</published><updated>2015-11-18T18:08:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-11-18:/php/funcao-manipular-string-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as funções para manipulação e uso de Strings. Aprenderemos como podemos trabalhar com cadeias de caracteres e quais as funcionalidades implementadas que temos a disposição.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#FUNÇÕES PARA MANIPULAR STRINGS&lt;/span&gt;

&lt;span class="x"&gt;#FUNÇÃO - strlen() - QUANTIDADE DE CARACTES&lt;/span&gt;
&lt;span class="x"&gt;$len = strlen(&amp;#39;123456abc&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Quantidade de caracteres: $len \n …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as funções para manipulação e uso de Strings. Aprenderemos como podemos trabalhar com cadeias de caracteres e quais as funcionalidades implementadas que temos a disposição.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;#FUNÇÕES PARA MANIPULAR STRINGS&lt;/span&gt;

&lt;span class="x"&gt;#FUNÇÃO - strlen() - QUANTIDADE DE CARACTES&lt;/span&gt;
&lt;span class="x"&gt;$len = strlen(&amp;#39;123456abc&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Quantidade de caracteres: $len \n&amp;quot;;&lt;/span&gt;


&lt;span class="x"&gt;#FUNÇÃO - substr(&amp;lt;str&amp;gt;, &amp;lt;indice&amp;gt;, &amp;lt;len&amp;gt;) - RETORNA UM PEDAÇO DA STRING&lt;/span&gt;
&lt;span class="x"&gt;# aaabbbccc substr(str, 3, 3)&lt;/span&gt;

&lt;span class="x"&gt;$str = &amp;#39;aaabbbccc&amp;#39;;&lt;/span&gt;
&lt;span class="x"&gt;$sub = substr($str, 3, 3);&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;A parte retornada é: $sub.\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;$sub = substr($str, 3);&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;A parte retornada sem &amp;lt;len&amp;gt; é: $sub.\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;#FUNÇÃO - strtoupper(&amp;lt;str&amp;gt;) - CONVERTE PARA LETRAS MAIÚSCULAS&lt;/span&gt;

&lt;span class="x"&gt;$str = &amp;#39;eXcript&amp;#39;;&lt;/span&gt;
&lt;span class="x"&gt;$up = strtoupper($str);&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Maiúsculo: $up.\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;$low = strtolower($str);&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Minúsculo: $low.\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;#FUNÇÃO - str_replace(&amp;lt;chars&amp;gt;, &amp;lt;novastr&amp;gt;, &amp;lt;str&amp;gt;) - SUBSTITUI PARTE DA STRING&lt;/span&gt;

&lt;span class="x"&gt;$str = &amp;#39;aaabbbccc&amp;#39;;&lt;/span&gt;
&lt;span class="x"&gt;$nova = str_replace(&amp;#39;bbb&amp;#39;, &amp;#39;---&amp;#39;, $str);&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;Original: $str - Mod: $nova \n&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="string"></category><category term="função"></category></entry><entry><title>Operação Ternária em PHP (parte II)</title><link href="http://excript.com/php/operacao-ternaria-php-parte2.html" rel="alternate"></link><published>2015-11-09T22:44:00-02:00</published><updated>2015-11-09T22:44:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-11-09:/php/operacao-ternaria-php-parte2.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta segunda aula sobre a operação ternária, desenvolveremos um exemplo onde aprenderemos uma forma de utilizar essa estrutura para substituir a estrutura de seleção múltipla switch.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Operação Ternária em PHP</title><link href="http://excript.com/php/operacao-ternaria-php.html" rel="alternate"></link><published>2015-11-09T22:42:00-02:00</published><updated>2015-11-09T22:42:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-11-09:/php/operacao-ternaria-php.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a operação ternária, também chamada de Operador Ternário. Aprenderemos quando devemos utilizar essa definição, quais as suas características e quais beneficios em sua utilização.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//OPERAÇÃO TERNÁRIA&lt;/span&gt;

&lt;span class="x"&gt;$opcao = False;&lt;/span&gt;

&lt;span class="x"&gt;$str = ($opcao) ? &amp;quot;true&amp;quot; : &amp;quot;false&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;echo $str;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Instrução continue em PHP</title><link href="http://excript.com/php/instrucao-continue-php.html" rel="alternate"></link><published>2015-11-09T20:55:00-02:00</published><updated>2015-11-09T20:55:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-11-09:/php/instrucao-continue-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a instrução continue e a sua utilização dentro das estruturas de repetição. Também estudaremos a diferença entre a instrução break e a instrução continue.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//INSTRUÇÃO CONTINUE&lt;/span&gt;

&lt;span class="x"&gt;//NÚMEROS PARES DE 0 ATÉ 100&lt;/span&gt;

&lt;span class="x"&gt;for($i=0; $i&amp;lt;100; $i++){&lt;/span&gt;

&lt;span class="x"&gt;    if($i % 2 == 1){&lt;/span&gt;
&lt;span class="x"&gt;        continue …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a instrução continue e a sua utilização dentro das estruturas de repetição. Também estudaremos a diferença entre a instrução break e a instrução continue.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//INSTRUÇÃO CONTINUE&lt;/span&gt;

&lt;span class="x"&gt;//NÚMEROS PARES DE 0 ATÉ 100&lt;/span&gt;

&lt;span class="x"&gt;for($i=0; $i&amp;lt;100; $i++){&lt;/span&gt;

&lt;span class="x"&gt;    if($i % 2 == 1){&lt;/span&gt;
&lt;span class="x"&gt;        continue;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;    echo $i . &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Instrução break em PHP</title><link href="http://excript.com/php/instrucao-break-php.html" rel="alternate"></link><published>2015-11-07T09:43:00-02:00</published><updated>2015-11-07T09:43:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-11-07:/php/instrucao-break-php.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a instrução break, isto é, a instrução que finaliza um laço de repetição ou então, finaliza a execução de uma função.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//INSTRUÇÃO BREAK&lt;/span&gt;

&lt;span class="x"&gt;$i = 0;&lt;/span&gt;

&lt;span class="x"&gt;while(true){&lt;/span&gt;

&lt;span class="x"&gt;    $i++;&lt;/span&gt;
&lt;span class="x"&gt;    if($i==50){&lt;/span&gt;
&lt;span class="x"&gt;        break;&lt;/span&gt;
&lt;span class="x"&gt;    }&lt;/span&gt;

&lt;span class="x"&gt;    echo $i . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Tabuada em PHP</title><link href="http://excript.com/php/tabuada-php.html" rel="alternate"></link><published>2015-10-23T15:35:00-02:00</published><updated>2015-10-23T15:35:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-23:/php/tabuada-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula desenvolveremos um Script que retorna a tabuada que foi solicitada pelo usuário. Entenderemos também, a razão pela qual optamos pela estrutura de repetição for na implementação deste código.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html lang=&amp;quot;pt-br&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;title&amp;gt;Tabuada - Curso PHP - eXcript&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/head …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula desenvolveremos um Script que retorna a tabuada que foi solicitada pelo usuário. Entenderemos também, a razão pela qual optamos pela estrutura de repetição for na implementação deste código.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html lang=&amp;quot;pt-br&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;title&amp;gt;Tabuada - Curso PHP - eXcript&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

    &lt;span class="nv"&gt;$tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;edTABUADA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])){&lt;/span&gt;
        &lt;span class="nv"&gt;$tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;edTABUADA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$tab&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;br&amp;gt;O valor informado não é um número.&amp;lt;br&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//            for($num=0; $num&amp;lt;=10; $num++){&lt;/span&gt;
    &lt;span class="c1"&gt;//                echo $num . &amp;quot; x &amp;quot; . $tab . &amp;quot; = &amp;quot; . ($num * $tab) . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;;&lt;/span&gt;
    &lt;span class="c1"&gt;//            }&lt;/span&gt;

        &lt;span class="c1"&gt;//$num x $tab = ($num * $tab)&lt;/span&gt;
        &lt;span class="c1"&gt;//0 x 5 = 0&lt;/span&gt;
        &lt;span class="c1"&gt;//1 x 5 = 5&lt;/span&gt;

        &lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; x &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$tab&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$tab&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;br&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;form method=&amp;quot;post&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;edTABUADA&amp;quot; &amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;


&lt;span class="x"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Estrutura de Repetição for do PHP (parte II)</title><link href="http://excript.com/php/estrutura-repeticao-for-php-parte2.html" rel="alternate"></link><published>2015-10-23T08:00:00-02:00</published><updated>2015-10-23T08:00:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-23:/php/estrutura-repeticao-for-php-parte2.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula continuaremos o estudo das estruturas de repetição for e para isso, implementaremos um código onde estudaremos os beneficios da instrução for.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//ESTRUTURA DE REPETIÇÃO FOR II&lt;/span&gt;

&lt;span class="x"&gt;//INCREMENTO&lt;/span&gt;
&lt;span class="x"&gt;for($x=0; $x&amp;lt;10; $x++){&lt;/span&gt;
&lt;span class="x"&gt;    echo $x . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;//DECREMENTO&lt;/span&gt;
&lt;span class="x"&gt;for($x=10; $x&amp;gt;0; $x--){&lt;/span&gt;
&lt;span class="x"&gt;    echo …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula continuaremos o estudo das estruturas de repetição for e para isso, implementaremos um código onde estudaremos os beneficios da instrução for.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//ESTRUTURA DE REPETIÇÃO FOR II&lt;/span&gt;

&lt;span class="x"&gt;//INCREMENTO&lt;/span&gt;
&lt;span class="x"&gt;for($x=0; $x&amp;lt;10; $x++){&lt;/span&gt;
&lt;span class="x"&gt;    echo $x . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;//DECREMENTO&lt;/span&gt;
&lt;span class="x"&gt;for($x=10; $x&amp;gt;0; $x--){&lt;/span&gt;
&lt;span class="x"&gt;    echo $x . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Estrutura de Repetição for do PHP</title><link href="http://excript.com/php/estrutura-repeticao-for-php.html" rel="alternate"></link><published>2015-10-20T17:05:00-02:00</published><updated>2015-10-20T17:05:00-02:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-20:/php/estrutura-repeticao-for-php.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a estrutura de repetição for. Aprenderemos em quais situações devemos utilizar essa instrução, quais as suas características, vantagens e benefícios que a fazem a estrutura de repetição mais utilizada.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Operadores de Incremento e Decremento em PHP</title><link href="http://excript.com/php/operador-incremento-decremento-php.html" rel="alternate"></link><published>2015-10-15T02:58:00-03:00</published><updated>2015-10-15T02:58:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-15:/php/operador-incremento-decremento-php.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a utilização e os beneficios dos operadores de incremento e decremento. Também estudaremos o pré-incremento, pós-incremento, pré-decremento e pós-decremento.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//Operadores de Atribuição Compostos&lt;/span&gt;

&lt;span class="x"&gt;$num = 10;&lt;/span&gt;
&lt;span class="x"&gt;while($num &amp;gt; 0){&lt;/span&gt;
&lt;span class="x"&gt;    $num -= 1;//$num = $num - 10;&lt;/span&gt;
&lt;span class="x"&gt;    echo $num . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="operador"></category><category term="operador de incremento"></category><category term="operador de decremento"></category><category term="pré-incremento"></category><category term="pós-incremento"></category><category term="pré-decremento"></category><category term="pós-decremento"></category></entry><entry><title>Operadores de Atribuição Compostos em PHP</title><link href="http://excript.com/php/operador-atribuicao-composto-php.html" rel="alternate"></link><published>2015-10-14T19:08:00-03:00</published><updated>2015-10-14T19:08:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-14:/php/operador-atribuicao-composto-php.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o conjunto de operados de atribuição compostos, isto é, os operadores que são formados pela junção do operador de atribuição e um operador aritmético.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Atribuição vs Comparação vs Identico em PHP</title><link href="http://excript.com/php/atribuicao-vs-comparacao-vs-identico-php.html" rel="alternate"></link><published>2015-10-14T16:54:00-03:00</published><updated>2015-10-14T16:54:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-14:/php/atribuicao-vs-comparacao-vs-identico-php.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a diferença entre o operador de atribuição, o operador de comparação e o operador de identico.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="operador"></category><category term="operador de atribuição"></category><category term="operador de comparação"></category><category term="operador identico"></category></entry><entry><title>Script em Looping em PHP</title><link href="http://excript.com/php/script-looping-php.html" rel="alternate"></link><published>2015-10-11T19:24:00-03:00</published><updated>2015-10-11T19:24:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-11:/php/script-looping-php.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o que é um Script em looping, quais as características que levam um Script a travar e quais as boas práticas para evitarmos esse problema.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$num = 0;&lt;/span&gt;

&lt;span class="x"&gt;while($num &amp;lt; 100){&lt;/span&gt;
&lt;span class="x"&gt;    $num = $num - 1;&lt;/span&gt;
&lt;span class="x"&gt;    echo $num . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>do-while - caso de uso com PHP</title><link href="http://excript.com/php/do-while-caso-de-uso-php.html" rel="alternate"></link><published>2015-10-10T15:32:00-03:00</published><updated>2015-10-10T15:32:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-10:/php/do-while-caso-de-uso-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos um exemplo utilizando a estrutura de repetição do-while.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html lang=&amp;quot;pt-br&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;title&amp;gt;Estrutura DO-WHILE - caso de uso - Curso PHP - eXcript&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dependentes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])){&lt;/span&gt;
        &lt;span class="nv"&gt;$dependentes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dependentes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dependentes&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
            &lt;span class="nv"&gt;$dependentes …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos um exemplo utilizando a estrutura de repetição do-while.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html lang=&amp;quot;pt-br&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;title&amp;gt;Estrutura DO-WHILE - caso de uso - Curso PHP - eXcript&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dependentes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])){&lt;/span&gt;
        &lt;span class="nv"&gt;$dependentes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dependentes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dependentes&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
            &lt;span class="nv"&gt;$dependentes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;não numérico&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nv"&gt;$conta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;lt;table border=&amp;#39;1&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;th&amp;gt;Nome&amp;lt;/th&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;th&amp;gt;Nasc&amp;lt;/th&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;/tr&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$conta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$conta&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;td&amp;gt;Dependente &lt;/span&gt;&lt;span class="si"&gt;$conta&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;#39;text&amp;#39; name=&amp;#39;nome&amp;#39; &amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;td&amp;gt;&amp;lt;input type=&amp;#39;text&amp;#39; name=&amp;#39;nasc&amp;#39; &amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;/tr&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$conta&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$dependentes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/table&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;form method=&amp;quot;post&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;dependentes&amp;quot; &amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Introdução do-while em PHP</title><link href="http://excript.com/php/introducao-do-while-php.html" rel="alternate"></link><published>2015-10-09T15:08:00-03:00</published><updated>2015-10-09T15:08:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-09:/php/introducao-do-while-php.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a estrutura de repetição do-while, isto é, faça-enquanto. Aprenderemos quando utilizar essa instrução e quais as beneficios que a mesma proporciona.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$conta = 11;&lt;/span&gt;
&lt;span class="x"&gt;do{&lt;/span&gt;
&lt;span class="x"&gt;    $conta = $conta + 1;&lt;/span&gt;
&lt;span class="x"&gt;    echo $conta . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}while($conta &amp;lt; 10);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Instrução While em PHP</title><link href="http://excript.com/php/instrucao-while-php.html" rel="alternate"></link><published>2015-10-09T09:37:00-03:00</published><updated>2015-10-09T09:37:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-09:/php/instrucao-while-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a estrutura de repetição while, veremos quais as características e quando devemos fazer uso da mesma. Por fim, implementaremos um código e entenderemos na prática como fazer uso da instrução while.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//ESTRUTURA DE REPETIÇÃO WHILE&lt;/span&gt;

&lt;span class="x"&gt;//$num = 100;&lt;/span&gt;
&lt;span class="x"&gt;//while($num &amp;gt; 0){&lt;/span&gt;
&lt;span class="x"&gt;//    echo $num  . &amp;quot;\n …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos a estrutura de repetição while, veremos quais as características e quando devemos fazer uso da mesma. Por fim, implementaremos um código e entenderemos na prática como fazer uso da instrução while.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;//ESTRUTURA DE REPETIÇÃO WHILE&lt;/span&gt;

&lt;span class="x"&gt;//$num = 100;&lt;/span&gt;
&lt;span class="x"&gt;//while($num &amp;gt; 0){&lt;/span&gt;
&lt;span class="x"&gt;//    echo $num  . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;//    $num = ($num - 5);&lt;/span&gt;
&lt;span class="x"&gt;//}&lt;/span&gt;

&lt;span class="x"&gt;$num = 0;&lt;/span&gt;
&lt;span class="x"&gt;while($num &amp;lt; 100){&lt;/span&gt;
&lt;span class="x"&gt;    echo ($num * 255)  . &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;    $num = ($num + 5);&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Números Pares e Ímpares em PHP</title><link href="http://excript.com/php/numeros-pares-impares-php.html" rel="alternate"></link><published>2015-10-06T11:49:00-03:00</published><updated>2015-10-06T11:49:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-06:/php/numeros-pares-impares-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a analisar se um número é par ou então é impar. Estudaremos as várias maneiras existentes para a obtenção dessa propriedade matemática e escreveremos uma aplicação que pede ao usuário um número e retorna se o mesmo é par ou então ímpar.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;!DOCTYPE …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a analisar se um número é par ou então é impar. Estudaremos as várias maneiras existentes para a obtenção dessa propriedade matemática e escreveremos uma aplicação que pede ao usuário um número e retorna se o mesmo é par ou então ímpar.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html lang=&amp;quot;pt-br&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;title&amp;gt;Número Pares e Ímpares - Curso PHP - eXcript&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;num&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])){&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;num&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;br&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nv"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;num&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;O número informado é par&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;O número informado é impar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;form method=&amp;quot;POST&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;num&amp;quot;/&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;








&lt;span class="x"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Operadores Lógicos em PHP</title><link href="http://excript.com/php/operador-logico-php.html" rel="alternate"></link><published>2015-10-06T11:49:00-03:00</published><updated>2015-10-06T11:49:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-06:/php/operador-logico-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os operadores lógicos do PHP. Também aprenderemos a construir expressões compostas de sub-expressões. Logo, formaremos novas expressões com o uso de sub-expressões ligadas pelo operadores lógicos.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$num = 50;&lt;/span&gt;

&lt;span class="x"&gt;if(($num &amp;gt; 10)&amp;amp;&amp;amp;($num &amp;lt; 100)){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;eh verdadeiro&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;



&lt;span class="x"&gt;var_dump(10 == 10);&lt;/span&gt;
&lt;span class="x"&gt;var_dump((10 == 10) == True …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os operadores lógicos do PHP. Também aprenderemos a construir expressões compostas de sub-expressões. Logo, formaremos novas expressões com o uso de sub-expressões ligadas pelo operadores lógicos.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$num = 50;&lt;/span&gt;

&lt;span class="x"&gt;if(($num &amp;gt; 10)&amp;amp;&amp;amp;($num &amp;lt; 100)){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;eh verdadeiro&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;



&lt;span class="x"&gt;var_dump(10 == 10);&lt;/span&gt;
&lt;span class="x"&gt;var_dump((10 == 10) == True);&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;var_dump((10 == 10) == (7 == 7));&lt;/span&gt;
&lt;span class="x"&gt;var_dump(True == True);&lt;/span&gt;
&lt;span class="x"&gt;var_dump(True);&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;var_dump((10 == 10) and (7 == 7));&lt;/span&gt;
&lt;span class="x"&gt;var_dump(True and True);&lt;/span&gt;
&lt;span class="x"&gt;var_dump(True);&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;var_dump(True == False);&lt;/span&gt;
&lt;span class="x"&gt;var_dump(False == False);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Operadores Relacionais em PHP</title><link href="http://excript.com/php/operador-relacional-php.html" rel="alternate"></link><published>2015-10-06T11:49:00-03:00</published><updated>2015-10-06T11:49:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-06:/php/operador-relacional-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os operadores relacionais do PHP. Inicialmente estudaremos os Operadores Relacionais Simples e em seguida, aprenderemos as suas formas compostas. Agora, aprenderemos a analisar se um operando é, maior que, menor que ou igual a outro operando.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;/*&lt;/span&gt;
&lt;span class="x"&gt; * 1) APRESENTAR OS SLIDES&lt;/span&gt;
&lt;span class="x"&gt; * 2) ESTUDAR ALGUMAS …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os operadores relacionais do PHP. Inicialmente estudaremos os Operadores Relacionais Simples e em seguida, aprenderemos as suas formas compostas. Agora, aprenderemos a analisar se um operando é, maior que, menor que ou igual a outro operando.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;/*&lt;/span&gt;
&lt;span class="x"&gt; * 1) APRESENTAR OS SLIDES&lt;/span&gt;
&lt;span class="x"&gt; * 2) ESTUDAR ALGUMAS CONDI��ES&lt;/span&gt;
&lt;span class="x"&gt; * */&lt;/span&gt;

&lt;span class="x"&gt;var_dump( 10 == 10 );&lt;/span&gt;
&lt;span class="x"&gt;print_r( 10 == 10 );&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;igualdade \n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 10 == 10 );&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 10 == 11 );&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;


&lt;span class="x"&gt;//diferente&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 10 != 10 );&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 10 != 10 );&lt;/span&gt;

&lt;span class="x"&gt;//diferente&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 10 &amp;lt;&amp;gt; 10 );&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 10 &amp;lt;&amp;gt; 10 );&lt;/span&gt;

&lt;span class="x"&gt;//identico&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 7 === 7 );&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 7 === 7.0 ); // FALSE, pois n�o s�o do mesmo tipo&lt;/span&gt;

&lt;span class="x"&gt;//não identico&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 7 !== 7 ); // FALSE, pois s�o iguais e do mesmo tipo, inteiros&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 7 !== 7.0 ); // TRUE, pois n�o s�o do mesmo tipo&lt;/span&gt;

&lt;span class="x"&gt;//menor&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 7 &amp;lt; 8 );&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 7 &amp;lt; 6 );&lt;/span&gt;

&lt;span class="x"&gt;//maior&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 7 &amp;gt; 6 );&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 7 &amp;gt; 8 );&lt;/span&gt;

&lt;span class="x"&gt;//menor ou igual&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 7 &amp;lt;= 7 );&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 7 &amp;lt;= 6 );&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 3 &amp;lt;= 7 );&lt;/span&gt;

&lt;span class="x"&gt;//maior ou igual&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 7 &amp;gt;= 7 );&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 7 &amp;gt;= 8 );&lt;/span&gt;
&lt;span class="x"&gt;var_dump( 10 &amp;gt;= 7 );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Tela de Login e Senha com PHP</title><link href="http://excript.com/php/tela-login-senha-php.html" rel="alternate"></link><published>2015-10-06T11:49:00-03:00</published><updated>2015-10-06T11:49:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-06:/php/tela-login-senha-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula desenvolveremos uma simples tela de login e senha. Definiremos um login e uma senha padrão e quando o usuário tentar efetuar o login, verificaremos se os valores são identicos aos definidos por padrão.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html lang=&amp;quot;pt-br&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;title&amp;gt;Tela …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula desenvolveremos uma simples tela de login e senha. Definiremos um login e uma senha padrão e quando o usuário tentar efetuar o login, verificaremos se os valores são identicos aos definidos por padrão.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html lang=&amp;quot;pt-br&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;title&amp;gt;Tela de Login e Senha - Curso PHP - eXcript&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="c1"&gt;//    &amp;quot;eXcript&amp;quot; != &amp;quot;excript&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;$login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eXcript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$senha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])){&lt;/span&gt;
    &lt;span class="c1"&gt;//        echo $_POST[&amp;quot;login&amp;quot;] . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;;&lt;/span&gt;
    &lt;span class="c1"&gt;//        echo $_POST[&amp;quot;senha&amp;quot;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$login&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;senha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$senha&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Login efetuado com sucesso&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Login ou senha inválido&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;    &amp;lt;form method=&amp;quot;post&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;login&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;senha&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;


&lt;span class="x"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Tomada de Decisão - Estrutura else</title><link href="http://excript.com/php/tomada-decisao-estrutura-else.html" rel="alternate"></link><published>2015-10-06T11:48:00-03:00</published><updated>2015-10-06T11:48:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-06:/php/tomada-decisao-estrutura-else.html</id><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta segunda aula sobre a Tomada de Decisão, estudaremos a instrução else utilizada junto com a instrução if.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$idade = 50;&lt;/span&gt;

&lt;span class="x"&gt;if($idade &amp;gt;= 18){&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;A idade é de uma pessoal de maior.&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}else{&lt;/span&gt;
&lt;span class="x"&gt;    echo &amp;quot;A idade informada é de uma pessoal de menor.&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Módulo da Divisão em PHP</title><link href="http://excript.com/php/modulo-divisao-php.html" rel="alternate"></link><published>2015-10-06T11:43:00-03:00</published><updated>2015-10-06T11:43:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-06:/php/modulo-divisao-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a obter o módulo da divisão, bem como entenderemos a importância de ter um operador dedicado a este fim. Em seguida, realizaremos diversos exemplos para melhor entender o uso do operador módulo.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$num1 = 9;&lt;/span&gt;
&lt;span class="x"&gt;$num2 = 2;&lt;/span&gt;
&lt;span class="x"&gt;$res = $num1 / $num2;&lt;/span&gt;
&lt;span class="x"&gt;$resto = $num1 % $num2;&lt;/span&gt;

&lt;span class="x"&gt;echo …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a obter o módulo da divisão, bem como entenderemos a importância de ter um operador dedicado a este fim. Em seguida, realizaremos diversos exemplos para melhor entender o uso do operador módulo.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$num1 = 9;&lt;/span&gt;
&lt;span class="x"&gt;$num2 = 2;&lt;/span&gt;
&lt;span class="x"&gt;$res = $num1 / $num2;&lt;/span&gt;
&lt;span class="x"&gt;$resto = $num1 % $num2;&lt;/span&gt;

&lt;span class="x"&gt;echo $num1 . &amp;quot; divido por &amp;quot; . $num2 . &amp;quot; = &amp;quot; . $res;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;O resto da divisão é: &amp;quot; . $resto;&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;


&lt;span class="x"&gt;echo fmod(7, 3.3);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Tipos de Dados do PHP</title><link href="http://excript.com/php/tipos-dado-php.html" rel="alternate"></link><published>2015-10-06T11:43:00-03:00</published><updated>2015-10-06T11:43:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-06:/php/tipos-dado-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os tipos de dados primitivos do PHP, quais valores cada tipo é capaz de armazenar e as principais características dos principais tipos definidos por padrão pelo PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;!-- d   //Tipos de dados
//O PHP tem 7 tipos de dados, e cada um � especifico para um tipo de informa��o. Os sete tipos s�o:
//string,
//integer,
//float,
//boolean,
//array,
//    object,
//    resource.
//
//    Strings � o tipo de dado que armazena cadeias de caracteres, ou seja, � o tipo de dado que armazena texto. Em PHP, n�o h� limite para o armazenamento, assim, podemos adicionar a quantidade de informa��o que o servidor suportar.
//O tipo caractere n�o existe, ent�o, um String pode ser formada por uma �nica letra ou ent�o, por um conjunto de caracteres alphanum�ricos.
//� importante lembrar que o PHP � case-sensitive, ou seja, a letra A � diferente da letra a.
//
//
//Integers � qualquer n�mero inteiro positivo ou negativo. Nas situa��es onde o n�mero que estivermos manipulando for muito grande, o PHP ir� converter automaticamente do tipo inteiro para o tipo Float, at� porque, o mesmo suporta um range num�rico muito maior.
//Floats s�o todos os n�meros que possuem casas decimais, ou seja, n�meros com ponto flutuante. Como estudado, n�mero inteiros muito grande s�o automaticamente convertidos para o tipo Float, at� porque, a capacidade � muito superior.
//Booleans � todo tipo de infoma��o l�gica, ou seja, True ou False. Internamente, o tipo booleano � um inteiro, onde o valor True � representado pelo n�mero 1 e o valor False pelo n�mero 0. --&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$str = &amp;quot;eXcript&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo gettype($str);&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;$num = 10;&lt;/span&gt;
&lt;span class="x"&gt;echo gettype($num);&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\n …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os tipos de dados primitivos do PHP, quais valores cada tipo é capaz de armazenar e as principais características dos principais tipos definidos por padrão pelo PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;!-- d   //Tipos de dados
//O PHP tem 7 tipos de dados, e cada um � especifico para um tipo de informa��o. Os sete tipos s�o:
//string,
//integer,
//float,
//boolean,
//array,
//    object,
//    resource.
//
//    Strings � o tipo de dado que armazena cadeias de caracteres, ou seja, � o tipo de dado que armazena texto. Em PHP, n�o h� limite para o armazenamento, assim, podemos adicionar a quantidade de informa��o que o servidor suportar.
//O tipo caractere n�o existe, ent�o, um String pode ser formada por uma �nica letra ou ent�o, por um conjunto de caracteres alphanum�ricos.
//� importante lembrar que o PHP � case-sensitive, ou seja, a letra A � diferente da letra a.
//
//
//Integers � qualquer n�mero inteiro positivo ou negativo. Nas situa��es onde o n�mero que estivermos manipulando for muito grande, o PHP ir� converter automaticamente do tipo inteiro para o tipo Float, at� porque, o mesmo suporta um range num�rico muito maior.
//Floats s�o todos os n�meros que possuem casas decimais, ou seja, n�meros com ponto flutuante. Como estudado, n�mero inteiros muito grande s�o automaticamente convertidos para o tipo Float, at� porque, a capacidade � muito superior.
//Booleans � todo tipo de infoma��o l�gica, ou seja, True ou False. Internamente, o tipo booleano � um inteiro, onde o valor True � representado pelo n�mero 1 e o valor False pelo n�mero 0. --&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$str = &amp;quot;eXcript&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo gettype($str);&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;$num = 10;&lt;/span&gt;
&lt;span class="x"&gt;echo gettype($num);&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;$dinheiro = 1500.23;&lt;/span&gt;
&lt;span class="x"&gt;echo gettype($dinheiro);&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;

&lt;span class="x"&gt;$bool = True;&lt;/span&gt;
&lt;span class="x"&gt;echo gettype($bool);&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo &amp;quot;\n&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Tomada de Decisão em PHP</title><link href="http://excript.com/php/tomada-decisao-php.html" rel="alternate"></link><published>2015-10-06T11:43:00-03:00</published><updated>2015-10-06T11:43:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-06:/php/tomada-decisao-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula iniciaremos o estudo sobre a tomada de decisão em PHP, isto é, aprenderemos a utilizar a instrução if para analisar expressões e conforme o valor lógico retornado, escolheremos qual bloco de instrução deve ser executado.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="tomada-de-decisao"&gt;
&lt;h2&gt;TOMADA DE DECISÃO&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;Tomada de Decisão&lt;/strong&gt;, ou então, &lt;strong&gt;Estrutura Condicional&lt;/strong&gt;, é o …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula iniciaremos o estudo sobre a tomada de decisão em PHP, isto é, aprenderemos a utilizar a instrução if para analisar expressões e conforme o valor lógico retornado, escolheremos qual bloco de instrução deve ser executado.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="tomada-de-decisao"&gt;
&lt;h2&gt;TOMADA DE DECISÃO&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;Tomada de Decisão&lt;/strong&gt;, ou então, &lt;strong&gt;Estrutura Condicional&lt;/strong&gt;, é o julgamento de uma expressão lógica e a consequente decisão de qual bloco de código que deve ser executado. Essa é a maneira em que os nossos programas tomam decisões, no caos, sempre baseando-se em condições pré-determinadas.&lt;/p&gt;
&lt;p&gt;Utilizamos a instrução &lt;strong&gt;if&lt;/strong&gt;, para verificar se uma condição é ou não verdadeira. Nós temos que &lt;strong&gt;if&lt;/strong&gt; do inglês, significa &lt;strong&gt;SE&lt;/strong&gt; ou então, &lt;strong&gt;CASO&lt;/strong&gt;. A instrução &lt;strong&gt;if&lt;/strong&gt; é a responsável por decidir que: se for verdadeiro, execute esse bloco de instrução, do contrário, não faça nada ou então, execute este outro bloco de instrução.&lt;/p&gt;
&lt;p&gt;A seguir, nós temos a estrutura da instrução &lt;strong&gt;if&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;se( condição ){&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;

&lt;span class="x"&gt;if( condição ){&lt;/span&gt;

&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Se o valor avaliado for verdadeiro, a execução do programa executará as instruções contidas nas chaves, do contrário, nada acontece.&lt;/p&gt;
&lt;p&gt;Fato é, que com a instrução &lt;strong&gt;if&lt;/strong&gt; conseguimos manipular a execução dos nossos código, podendo desviar o fluxo de execução quando uma determinada condição for satisfeita.&lt;/p&gt;
&lt;p&gt;Podemos dizer que o funcionamento da instrução &lt;strong&gt;if&lt;/strong&gt; se resume a avaliar a expressão contida entre os parêntesis. Se a condição for igual a &lt;strong&gt;True&lt;/strong&gt;, ou seja, se o valor avaliado for verdadeiro, o bloco de instrução que está definido pelo uso de um par de chaves será executado.&lt;/p&gt;
&lt;p&gt;A leitura correta da instrução &lt;strong&gt;if&lt;/strong&gt; é:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;if( condição == true)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O sinal de igual, seguido de outro sinal de igual, significa que estamos querendo verificar se o valor a esquerda é &lt;strong&gt;igual&lt;/strong&gt; ao valor da direita.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;if( 1&amp;gt;1 == true)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O exemplo acima deve ser lido da seguinte maneira:&lt;/p&gt;
&lt;p&gt;SE o número 1 for maior do que o número 1, então execute o bloco definido a seguir.&lt;/p&gt;
&lt;p&gt;É muito comum, os programadores omitirem a comparação com True [ == true ], até porque, a condição &lt;strong&gt;if&lt;/strong&gt; sempre verificará se o valor é verdadeiro. Ou seja, toda expressão colocada entre os parêntesis está, implicitamente, sendo comparada a &lt;strong&gt;True&lt;/strong&gt;. Como estudaremos, nós podemos inverter esse funcionamento, mas o princípio nunca será alterado.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A vari�vel x � igual a 100&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Operadores Aritméticos em PHP</title><link href="http://excript.com/php/operador-aritmeticos-php.html" rel="alternate"></link><published>2015-10-06T11:38:00-03:00</published><updated>2015-10-06T11:38:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-10-06:/php/operador-aritmeticos-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os operadores aritméticos da linguagem, bem como a construção e utilização dos fundamentos da matemática através do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nv"&gt;$num1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$soma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A soma entre num1 e num2 é: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$soma&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A divisão entre num1 e num2 é …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos os operadores aritméticos da linguagem, bem como a construção e utilização dos fundamentos da matemática através do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nv"&gt;$num1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$soma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A soma entre num1 e num2 é: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$soma&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A divisão entre num1 e num2 é: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$num1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;$num2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Nomenclatura de Variáveis em PHP</title><link href="http://excript.com/php/nomenclatura-variavel-php.html" rel="alternate"></link><published>2015-04-17T14:12:00-03:00</published><updated>2015-04-17T14:12:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-04-17:/php/nomenclatura-variavel-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos quais as regras quando estamos definindo o nome de variáveis, métodos, classes e etc. Aprenderemos quais caracteres podem ser utilizados, e o que devemos evitar.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;p&gt;Como dar nomes as variáveis? Em PHP temos de seguir algumas regras quando vamos dar nomes para as variáveis. Isso porque, a …&lt;/p&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos quais as regras quando estamos definindo o nome de variáveis, métodos, classes e etc. Aprenderemos quais caracteres podem ser utilizados, e o que devemos evitar.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;p&gt;Como dar nomes as variáveis? Em PHP temos de seguir algumas regras quando vamos dar nomes para as variáveis. Isso porque, a linguagem possui algumas palavras reservadas que a mesma faz uso e também, possui alguma definições que devemos seguir.&lt;/p&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php'"></category></entry><entry><title>Variáveis em PHP II</title><link href="http://excript.com/php/variavel-php-ii.html" rel="alternate"></link><published>2015-04-16T11:09:00-03:00</published><updated>2015-04-16T11:09:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-04-16:/php/variavel-php-ii.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nessa segunda aula sobre variáveis aprenderemos o que é para a linguagem PHP os valores, quais os tipos de dados que podemos manipular e as características que definem todas as variáveis.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;p&gt;O que é valor? Valor é toda e qualquer informação que os nossos programas processão e em um determinado …&lt;/p&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nessa segunda aula sobre variáveis aprenderemos o que é para a linguagem PHP os valores, quais os tipos de dados que podemos manipular e as características que definem todas as variáveis.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;p&gt;O que é valor? Valor é toda e qualquer informação que os nossos programas processão e em um determinado momento, retornam para o nosso usuário. Um valor pode ser uma imagem, um número, um texto, um diretório em fim, valores são as informações que o nosso programas armazenam, processam e até, modelam os nosso sistemas.&lt;/p&gt;
&lt;p&gt;Todo valor, quando está sendo manipulado por um programa, estará contido numa variável. Assim, as variáveis são projetadas para manipularem valores.&lt;/p&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Variáveis em PHP</title><link href="http://excript.com/php/variavel-php.html" rel="alternate"></link><published>2015-04-15T21:55:00-03:00</published><updated>2015-04-15T21:55:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-04-15:/php/variavel-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula daremos início ao estudo das variáveis em PHP. Inicialmente, aprendemos as definições fundamentais e também, praticaremos o que formos estudando a fim de melhor entender os conceitos.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="o-que-e-uma-variavel"&gt;
&lt;h2&gt;O QUE É UMA VARIÁVEL?&lt;/h2&gt;
&lt;p&gt;Variável é um espaço de memória que foi reservado pelo nosso programa para que possamos guardar …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula daremos início ao estudo das variáveis em PHP. Inicialmente, aprendemos as definições fundamentais e também, praticaremos o que formos estudando a fim de melhor entender os conceitos.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="o-que-e-uma-variavel"&gt;
&lt;h2&gt;O QUE É UMA VARIÁVEL?&lt;/h2&gt;
&lt;p&gt;Variável é um espaço de memória que foi reservado pelo nosso programa para que possamos guardar informações temporariamente.&lt;/p&gt;
&lt;p&gt;O armazenamento é temporário porque utilizamos a memória RAM (Random Access Memory), que são memória rápidas, porém, só armazenam as informações enquanto estiverem recebendo energia.&lt;/p&gt;
&lt;p&gt;Programas utilizam dezenas de variáveis, e a razão é simples: programas são construídos para manipular informações. As variáveis desempenham o papel de alocar um espaço de memória baseado no tipo de informação que será utilizado.&lt;/p&gt;
&lt;p&gt;A maneira mais simples para manipularmos uma informação, é declarando uma variável e atribuindo a esta a informação que precisamos manipular.&lt;/p&gt;
&lt;p&gt;Toda vez que um programa manipula uma informação, inicialmente ele carrega a informação para a memória RAM, através da declaração de uma variável e em seguida, da-se início ao processamento dessa informação.&lt;/p&gt;
&lt;p&gt;Variáveis são as estruturas mais simples e rápidas que todas linguagens de programação disponibilizam. É uma estrutura simples e na maior parte das vezes, o seu funcionamento está encapsulado, isto é, o programador não sabe como que a informação é manipulada, este somente faz uso da variável.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="como-as-variaveis-funcionam"&gt;
&lt;h2&gt;COMO AS VARIÁVEIS FUNCIONAM?&lt;/h2&gt;
&lt;p&gt;Pense numa variável como um espaço físico identificado por um número que é reservado para o armazenamento temporário de informações. O número de espaço físico é substituido pelo nome que damos a nossa variável, até porque, é mais fácil para os usamos manipularem textos do que trabalhar com números abstratos e que não representam nada.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qual-memoria-e-utilizada"&gt;
&lt;h2&gt;QUAL MEMÓRIA É UTILIZADA?&lt;/h2&gt;
&lt;p&gt;Utilizamos a memória RAM (Random Access Memory) que numa tradução livre seria: Memória de acesso aleatório. A memória RAM é a memória que armazena informações por espaços curto de tempo (armazenamento temporário) e para o seu funcionamento, necessita de energia elétrica constante, até porque, as informações são mantidas como caragas elétricas.&lt;/p&gt;
&lt;p&gt;Quedas de energia ou a reinicialização do hardware ocasionam a remoção de qualquer informação contida na memória RAM de forma natural, isto é, sem energia, as cargas elétricas deixam de existir.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="o-que-e-uma-referencia"&gt;
&lt;h2&gt;O QUE É UMA REFERÊNCIA?&lt;/h2&gt;
&lt;p&gt;Referência é o nome de qualquer variável. Se você conhece o sistema de identificação de computadores IP, você entende o que é uma variável na memória.&lt;/p&gt;
&lt;p&gt;Um IP identifica um dispositivo dentro da rede TCP/IP. Como o ser humano tem dificuldade para memorizar números, optou-se por utilizar palavras, ou seja, URL. Assim, o site www.excript.com aponta para um IP e este possui o site da eXcript.&lt;/p&gt;
&lt;p&gt;O nome que direciona a um IP é uma 'mascara', o nome que direciona a um número de uma região na memória é uma mascara que chamamos de referência.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quantas-variaveis-podemos-declarar"&gt;
&lt;h2&gt;QUANTAS VARIÁVEIS PODEMOS DECLARAR?&lt;/h2&gt;
&lt;p&gt;Não existe limitação quanto a quantidade de variáveis, o que é limitado, é a quantidade de espaço disponível de memória RAM.&lt;/p&gt;
&lt;p&gt;Por isso, podemos armazenar um número infinito de variáveis e estas utilizarão uma quantidade mínima de 1 byte, logo, conseguimos estimar a quantidade de variáveis, isso se descontarmos o espaço que os outros programas e sistemas operacionais utilizam.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exemplo-feito-em-aula"&gt;
&lt;h2&gt;EXEMPLO FEITO EM AULA&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$valor = &amp;quot;minha variavel&amp;quot;;&lt;/span&gt;
&lt;span class="x"&gt;echo $valor;&lt;/span&gt;

&lt;span class="x"&gt;$num = 10;&lt;/span&gt;
&lt;span class="x"&gt;echo $num;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Definições da Linguagem PHP</title><link href="http://excript.com/php/definicao-linguagem-php.html" rel="alternate"></link><published>2015-04-07T11:42:00-03:00</published><updated>2015-04-07T11:42:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-04-07:/php/definicao-linguagem-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as principais definições estabelecidas pela linguagem PHP, bem como as regras que devemos seguir para obter bons Scripts. Aprenderemos a utilização de espaços em branco, o uso de ponto e vírgula e muito mais.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;p&gt;Toda linguagem de programação possui suas próprias definições e com o PHP não …&lt;/p&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos as principais definições estabelecidas pela linguagem PHP, bem como as regras que devemos seguir para obter bons Scripts. Aprenderemos a utilização de espaços em branco, o uso de ponto e vírgula e muito mais.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;p&gt;Toda linguagem de programação possui suas próprias definições e com o PHP não é diferente. O nosso objetivo agora, é estudar as principais definições da linguagem PHP.&lt;/p&gt;
&lt;div class="section" id="instrucao"&gt;
&lt;h2&gt;INSTRUÇÃO&lt;/h2&gt;
&lt;p&gt;Conjunto de caracteres que normalmente é uma palavra e possui um significado para o interpretador, fazendo com que o mesmo desempenhe uma tarefa.&lt;/p&gt;
&lt;p&gt;Um programa ou &lt;cite&gt;script&lt;/cite&gt; nada mais é do que um conjunto de instruções numa ordem lógica a fim de realizar uma determinada tarefa. Logo, o nosso objetivo como programadores, é definir o conjunto de instruções necessárias para a realização da tarefa.&lt;/p&gt;
&lt;p&gt;Toda instrução PHP deve ser finalizada com um ponto e vírgula. Para o interpretador, tudo que estiver num mesmo intervalo entre ponto-e-vírgula será considerado uma mesma instrução. Logo, podemos dizer que o interpretador distingue entre duas instruções pela presença do caractere ponto-e-vírgula.&lt;/p&gt;
&lt;p&gt;É comum, escrevemos uma instrução por linha, até porque, isso melhora a legibilidade do nosso código. Porém, nós podemos escrever todas as instruções utilizando uma única linha, desde que seja posto o ponto-e-vírgula ao término de cada instrução.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="indentacao"&gt;
&lt;h2&gt;INDENTAÇÃO&lt;/h2&gt;
&lt;p&gt;Indentaçao é o espaçamento da margem até determinada instrução. Um código indentado é um código que está contido numa estrutura hierárquica, onde cada nível se diferencia do outro pela quantidade de espaçamento da margem até a instrução, por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class="nv"&gt;$variavel1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nv"&gt;$variavel2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$num1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nv"&gt;$num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Acima temos um código onde declaramos e inicializamos 4 variáveis. As duas primeiras, ou seja, onde temos as marcações 1 e 2, contém um único espaçamento da margem até o primeiro caractere. Já, as duas últimas 3 e 4,  contém quatro caracteres, contando da margem até a declaração da variável.&lt;/p&gt;
&lt;p&gt;Então, nós temos que as duas últimas declarações estão um nível a frente, logo, entende-se que estás estão contidas em um outro bloco de instruções.&lt;/p&gt;
&lt;p&gt;Em PHP, não há a obrigatoriedade de manter o código indentado, porém, essa é uma boa prática de programação e assim, devemos adotar esse padrão. Do contrário, veja como é muito mais dificil de entender um código que não possui indentação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nv"&gt;$variavel1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;$variavel2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;{&lt;/span&gt;&lt;span class="nv"&gt;$num1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;$num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O código acima funciona sem qualquer problema, até porque, cada instrução está sendo finalizando com um ponto e vírgula. Porém, como pode-se perceber, a legibilidade do código é muito mais complicada.&lt;/p&gt;
&lt;p&gt;Temos que o primeiro e o segundo código apresentado desempenham a mesma função, porém, se tratando de legibilidade, o segundo código é muito mais dificil de ser interpretado por humanos e isso se deve pela única razão de o mesmo não estar devidamente indentado.&lt;/p&gt;
&lt;p&gt;Aprenderemos, no decorrer do curso, diversas instruções para a manipulação do fluxo de controle do nosso código, ou seja, estruturas que são utilizadas para escolher qual bloco deve ser executado. Todas as vezes em que uma estrutura for utilizada, iremos indentar o código referente ao seu bloco de instrução com espaçamentos a mais do que o nível onde a estrutura está declarada. Logo, será a partir dessas aulas que conseguiremos perceber a importância que é manter o código indentado.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="espacos-em-branco"&gt;
&lt;h2&gt;ESPAÇOS EM BRANCO&lt;/h2&gt;
&lt;p&gt;Todo código em PHP pode conter espaços em branco indefinidamente, ou seja, todos os espaços em branco que não forem considerados como instruções, serão automaticamente ignorados, da mesma forma como a quebra de linha e outros caracteres especiais.&lt;/p&gt;
&lt;p&gt;Por essa razão é que a indentação é facultativa, ou seja, no momento em que o código for interpretado o que realmente ira importar é o emprego do ponto e vírgula ou então, dos caracteres de abertura e fechamento de chaves: &lt;cite&gt;{&lt;/cite&gt; e &lt;cite&gt;}&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ponto-e-virgula"&gt;
&lt;h2&gt;PONTO E VÍRGULA&lt;/h2&gt;
&lt;p&gt;Acabamos de estudar que cada instrução deve ser finalizada com ponto e vírgula, logo, não há necessidade de explicarmos novamente a grande tarefa que esse caractere representa dentro do noso código.&lt;/p&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Comentários em PHP</title><link href="http://excript.com/php/comentario-php.html" rel="alternate"></link><published>2015-04-06T19:41:00-03:00</published><updated>2015-04-06T19:41:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-04-06:/php/comentario-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o que são comentários para o PHP, como podemos incluir comentários em nossos códigos e quais as notações existentes para definição de um comentário.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="comentarios"&gt;
&lt;h2&gt;COMENTÁRIOS&lt;/h2&gt;
&lt;p&gt;Os comentários em PHP são marcações que colocamos dentro do nosso código para indicar ao interpretador que uma linha ou então, um …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o que são comentários para o PHP, como podemos incluir comentários em nossos códigos e quais as notações existentes para definição de um comentário.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="comentarios"&gt;
&lt;h2&gt;COMENTÁRIOS&lt;/h2&gt;
&lt;p&gt;Os comentários em PHP são marcações que colocamos dentro do nosso código para indicar ao interpretador que uma linha ou então, um conjunto de linhas não deve ser interpretado.&lt;/p&gt;
&lt;p&gt;Também é comum marcamos uma linha de código como comentário para que possamos observar como o programa reage sem essa linha ou então, quando precisamos alterar o nosso código, porém, não desejamos deletar a linha e então, só marcamos a mesma como sendo um comentário.&lt;/p&gt;
&lt;p&gt;Há 3 maneiras de definir comentários dentro do código.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="duas-barras"&gt;
&lt;h2&gt;DUAS BARRAS - &lt;cite&gt;//&lt;/cite&gt;&lt;/h2&gt;
&lt;p&gt;A primeira forma e a mais comum, é utilizando os caracteres &lt;cite&gt;//&lt;/cite&gt;. Essa é uma notação herdada do C e assim, a mais difundida dentre os programadores.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;// tudo o que estiver a frente não será interpretado&lt;/span&gt;
&lt;span class="x"&gt;// echo “não irá imprimir”;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="caractere-cerquilha"&gt;
&lt;h2&gt;CARACTERE CERQUILHA - &lt;cite&gt;#&lt;/cite&gt;&lt;/h2&gt;
&lt;p&gt;Outra forma, é a notação utilizando o caractere cerquilha, comumente chamado de Jogo da Velha. Essa é uma outra maneira de informarmos que uma única linha não deve ser interpretada, pelo interpretador.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# qualquer caractere nessa linha será ignorado&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="definicao-de-bloco-de-comentario"&gt;
&lt;h2&gt;DEFINIÇÃO DE BLOCO DE COMENTÁRIO -  &lt;cite&gt;/*&lt;/cite&gt; ... &lt;cite&gt;*/&lt;/cite&gt;&lt;/h2&gt;
&lt;p&gt;Por fim, temos a notação que proporciona a demarcação de um conjunto de linhas como sendo comentário. Logo, conseguimos rapdiamente demarcar toda uma região a fim de informar ao interpretador que estas linhas não devem ser interpretadas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;/*&lt;/span&gt;
&lt;span class="x"&gt;Todos os caracteres contidos entre os caracteres /* e */ não será interpretado.&lt;/span&gt;

&lt;span class="x"&gt;Então, podemos colocar a quantidade de texto que bem entendermos e este pode estar disposto em quantas linhas forem necessárias.&lt;/span&gt;
&lt;span class="x"&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>Montagem do HTML com PHP II</title><link href="http://excript.com/php/montagem-do-html-php-ii.html" rel="alternate"></link><published>2015-03-24T02:33:00-03:00</published><updated>2015-03-24T02:33:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-03-24:/php/montagem-do-html-php-ii.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula continuaremos o estudo a respeito da construção do código HTML com o uso da linguagem PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="html"&gt;
&lt;h2&gt;HTML&lt;/h2&gt;
&lt;p&gt;Como gerar código HTML? Todo script em PHP tem por objetivo gerar código HTML, assim, durante a execução de um script, tudo que for enviado pelas funções echo e print irão …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula continuaremos o estudo a respeito da construção do código HTML com o uso da linguagem PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="html"&gt;
&lt;h2&gt;HTML&lt;/h2&gt;
&lt;p&gt;Como gerar código HTML? Todo script em PHP tem por objetivo gerar código HTML, assim, durante a execução de um script, tudo que for enviado pelas funções echo e print irão formar a resposta que será retornada para o servidor.&lt;/p&gt;
&lt;p&gt;Ainda nessa aula, aprenderemos o ciclo de vida de uma requisição, ou seja, analisaremos o que acontece do recebimento, processamento e resposta para o cliente.&lt;/p&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category></entry><entry><title>TAG PHP</title><link href="http://excript.com/php/tag-php.html" rel="alternate"></link><published>2015-03-20T16:36:00-03:00</published><updated>2015-03-20T16:36:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-03-20:/php/tag-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o sistema de TAG que deve ser utilizado dentro de arquivos que contenham código PHP. Também aprenderemos as variações que podem ser utilizadas e por fim, aprenderemos qual é a maneira recomendada na documentação oficial do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="a-tag-php"&gt;
&lt;h2&gt;A TAG PHP&lt;/h2&gt;
&lt;p&gt;Em todo arquivo PHP que contenha código …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o sistema de TAG que deve ser utilizado dentro de arquivos que contenham código PHP. Também aprenderemos as variações que podem ser utilizadas e por fim, aprenderemos qual é a maneira recomendada na documentação oficial do PHP.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="a-tag-php"&gt;
&lt;h2&gt;A TAG PHP&lt;/h2&gt;
&lt;p&gt;Em todo arquivo PHP que contenha código a ser executado, nós somos obrigados a utilizar a tag de abertura PHP. Isso porque, o interpretador PHP não consegue distinguir o que é código HTML, código JavaScript, CSS e o que é PHP.&lt;/p&gt;
&lt;p&gt;Logo, nós demarcamos o bloco indicando ao interpretador onde inicia as instruções PHP.&lt;/p&gt;
&lt;p&gt;É interessante observar que a abertura da TAG PHP é obrigatória, porém, o seu fechamento não é. Isso foi uma particularidade implementada para que não ocorra do programar, quando distraído, coloque código fora do bloco de código PHP.&lt;/p&gt;
&lt;p&gt;Dessa forma, foi estabelecido que somos obrigados a abrir a TAG PHP, porém, o fechamento é facultativo e irá variar de cada código e de cada programador.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ola, sejam bem-vindos!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;echo &amp;quot;aaaaaaaaaaa&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="tag"></category><category term="tag php"></category></entry><entry><title>Executando Scripts em PHP</title><link href="http://excript.com/php/executar-script-php.html" rel="alternate"></link><published>2015-03-16T02:31:00-03:00</published><updated>2015-03-16T02:31:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2015-03-16:/php/executar-script-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a executar Scripts PHP com uso da IDE PHPStorm e também, como executar Scripts diretamente do navegador.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="scripts-em-php"&gt;
&lt;h2&gt;SCRIPTS EM PHP&lt;/h2&gt;
&lt;p&gt;Nesse episódio aprenderemos como configurar o PHPStorm para que este execute nossos códigos PHP automaticamente, ou seja, a partir de agora, não precisaremos fazer o processo de …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a executar Scripts PHP com uso da IDE PHPStorm e também, como executar Scripts diretamente do navegador.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="scripts-em-php"&gt;
&lt;h2&gt;SCRIPTS EM PHP&lt;/h2&gt;
&lt;p&gt;Nesse episódio aprenderemos como configurar o PHPStorm para que este execute nossos códigos PHP automaticamente, ou seja, a partir de agora, não precisaremos fazer o processo de salvar o arquivo no diretório do servidor, digitar o local no navegador, informar o nome do arquivo que contém o código e somente após essa rotina ter o nosso script executado.&lt;/p&gt;
&lt;p&gt;Então, a partir de agora bastar pressionarmos Shift + F10 que o nosso script será executado e o navegador já será aberto.&lt;/p&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="script"></category><category term="executar script php"></category></entry><entry><title>Hello World em PHP</title><link href="http://excript.com/php/hello-world-php.html" rel="alternate"></link><published>2014-10-06T11:07:00-03:00</published><updated>2014-10-06T11:07:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2014-10-06:/php/hello-world-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula implementaremos o famoso Hello World, ou seja, o programa Ola Mundo que serve como ponto de partida no estudo de qualquer linguagem de programação.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="o-codigo"&gt;
&lt;h2&gt;O CÓDIGO&lt;/h2&gt;
&lt;p&gt;Como fazer o Hello World em PHP? Nessa aula iremos escrever nosso primeiro script em PHP, o famoso Hello World. Ainda que …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula implementaremos o famoso Hello World, ou seja, o programa Ola Mundo que serve como ponto de partida no estudo de qualquer linguagem de programação.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="o-codigo"&gt;
&lt;h2&gt;O CÓDIGO&lt;/h2&gt;
&lt;p&gt;Como fazer o Hello World em PHP? Nessa aula iremos escrever nosso primeiro script em PHP, o famoso Hello World. Ainda que não tenhamos estudado os diversos conceitos para a realização desse programa, sem dúvida, não há maneira melhor para conseguirmos ter uma primeira impressão de como é um código em PHP.&lt;/p&gt;
&lt;p&gt;A seguir, você tem o código que pasta colocar em qualquer arquivo com extensão .php e executar através de um browser um servidor que contenha o arquivo por você programado, que já será impresso na tela do navegador a frase &amp;quot;Hello World&amp;quot;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;echo &amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS: no exemplo acima não foi colocado as tags PHP devido a uma restrição do YouTube.&lt;/p&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="hello world"></category></entry><entry><title>URL e Apache com PHP</title><link href="http://excript.com/php/url-apache-php.html" rel="alternate"></link><published>2014-10-03T12:35:00-03:00</published><updated>2014-10-03T12:35:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2014-10-03:/php/url-apache-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt;cript_pt-br: Fala galera!! Sejam todos bem-vindos a mais um episódio do nosso Curso de PHP. E nesta aula, nós vamos entender, como que o servidor Apache trabalha. Ou seja, agora que nós vamos começar a desenvolver, nós temos que entender alguns conceitos que está relacionado entre a URL que a …&lt;/p&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt;cript_pt-br: Fala galera!! Sejam todos bem-vindos a mais um episódio do nosso Curso de PHP. E nesta aula, nós vamos entender, como que o servidor Apache trabalha. Ou seja, agora que nós vamos começar a desenvolver, nós temos que entender alguns conceitos que está relacionado entre a URL que a gente acessa, ou seja, qual o endereço que a gente digita, e também, nós temos que entender como que o servidor, faz para distinguir entre os diretórios de cada site. Então, a primeira coisa que nós temos que observar aqui nesse slides, é que esse retângulo maior, representa o nosso servidor WEB. Ou seja, esse retângulo está representando o servidor fisicamente. Nesse computador, nós temos um programa chamado Apache, que como nós já vimos, esse é um programa que faz o trabalho de um servidor Web. Logo, todas as requisições que chegarem na porta 80 o nosso servidor Apache vai interceptar, e então vai interpretar o que essa requisição está pedindo. Então nós temos o nosso computador físico e aqui nós temos o programa Apache instalado no nosso computador. Se nós tivermos um servidor Web que tenha o programa Apache instalado, nós podemos armazenar diversos sites, e o servidor Apache, vai ser o responsável por receber a requisição e então, verificar qual o site que está sendo solicitado. Agora, nós temos que cada site, possui uma série de arquivos, ou seja, cada site possui a sua própria programação, então, nós temos que nesse computador, que está instalado o servidor Apache e que tem 3 sites cadastrados, cada site cadastrado aqui no Apache, ele vai estar linkando com um diretório. Ou seja, cada site possui o seu próprio diretório e nesse diretório, contém os arquivos de programação do site. Então vamos supor que nós escrevemos um programa em PHP, e nós queremos colocar esse programa dentro do nosso site2. Logo, nós temos que colocar o nosso arquivo PHP dentro do diretório da URL do site que a gente quer disponibilizar o nosso programa. Então, se nós tivéssemos trabalhando em cima do site2, todos os arquivos PHP deveriam estar contidos dentro de C:\wamp\www\site2 isso porque, o servidor Apache tem vinculado que todos os arquivos de programação do site www.site2.com.br eles vão estar contidos dentro do diretório C:\wamp\www\site2\ então, vamos supor que a gente tenha o usuário A e esse usuário digitou no navegador, www.site2.com.br esse link foi passando pelos servidores da internet e chegou aqui no nosso computador que tem o servidor Apache. O nosso servidor vai receber a requisição que tem um usuário que está acessando o nosso site2, e ele precisa retornar os arquivos de programação do nosso site2. Então, aonde que ele vai buscar os arquivos do site2? Ele vai buscar os arquivos dentro do C\wamp\www\site2\ ou seja, o usuário quando vem pela Web ele digita a URL do site, porém aqui dentro desse computador o nosso servidor acessa os arquivos do site, que está contido dentro de um diretório do nosso servidor. Então, nós temos que o usuário A, ele não sabe em qual diretório está os arquivos do nosso site, porém, o administrador desse servidor definiu que nesse diretório aqui vai estar contidos todos os arquivos do site2, e nesse diretório, vão estar contidos todos os arquivos do site3. Logo, o usuário que está vindo pela Web, ele não faz ideia dessa estrutura de diretório, a única coisa que ele sabe é da URL do nosso site, e somente quem sabe onde estão os arquivos de cada site é o nosso servidor Apache. Então, esse é um conceito muito importante de se entender,  que o nosso servidor Apache, ele possui várias URL cadastradas, e cada URL, está vinculada a um diretório onde estão contidos todos os arquivos de programação do site. Toda requisição que chegar no nosso servidor Apache, o mesmo vai verificar, qual é a URL desse site? Feito isso, ele irá buscar em sua lista de sites cadastrados e então, ele irá no diretório em que está vinculado essa URL, e devolverá os arquivos que foram solicitados pelo nosso usuário. Esse é um conceito que tem que estar bem definido antes de nós começarmos a programar. O conceito de que o usuário que está chegando pela internet, ele desconhece a estrutura do servidor, porém o servidor contém uma lista com todos os sites cadastrados, e cada site está vinculado a um diretório. Como nós já estudamos em aulas passadas, nós temos o servidor Web rodando aqui no nosso computador, se por acaso você não instalou o servidor Web, você será obrigado a fazer isso, do contrário, você não conseguirá executar os Scripts PHP. Se nós viermos aqui no navegador e digitarmos localhost nós deveríamos conseguir acessar o nosso servidor local.  Se você acessar a URL localhost e não for carregado nenhuma página pra você, isso significa que o nosso servidor Apache, ele não está ligado, ou seja, nós temos que levantar o nosso servidor. Nós podemos levantar o servidor tanto por linha de comando, ou então, utilizando um programinha que foi instalado junto com o WAMP. Então aqui no Windows vamos no Menu iniciar, e vamos digitar WAMP, como a gente pode ver, aparece aqui pra gente, start WAMP server 64, vamos clicar aqui nesse ícone e então, nós receberemos essa mensagem perguntando se a gente realmente deseja iniciar o servidor. Vamos apertar em Yes, e então o servidor foi levantado. Porém, o servidor Web é um programa, que fica executando em segundo plano, ele não possui nativamente uma telinha pra gente acessar, se você foi no menu iniciar e clicou ali em Start WAMP Server, muito provavelmente o servidor já foi inicializado. Então vamos voltar aqui no navegador e agora só vamos pressionar Enter. E olha só, como nós podemos ver, agora a nossa página foi carregada. Pra finalizar a nossa aula, nós temos que entender o que significa esse "localhost". O localhost representa a URL que nós estamos acessando, ou seja, antes nós estudamos que dentro do servidor Apache, vai estar cadastrado diversas URL. Então, nós temos que aqui o nosso servidor Apache, esta cadastrada a URL localhost, quando nós digitamos localhost aqui no navegador e pressionamo Enter, nós temos que o servidor Apache está recebendo nossa requisição, ele identifica que é uma requisição localhost, então ele procura na lista de sites cadastrados,  a URL localhost. Na hora que ele encontrar ele vê qual o diretório que está vinculado a esse link, logo, ele retorna para o nosso usuário, o arquivo principal que está dentro do site localhost. A parte mais importante dessa aula é você conseguir entender aonde que está esse locahost. Então, quando nós instalamos o WAMP, o mesmo configurou no Apache, que a URL locahost, ela vai estar vinculada com o seguinte diretório. C:\wamp\www\ ou seja, nós temos que o WAMP vinculou a URL C:\wamp\www\ a URL localhost. Então, se nós quisermos acessar um arquivo que está aqui na pasta C:\wamp\www\ basta simplesmente nós colocarmos o nome desse arquivo aqui na URL. Vamos criar um arquivo aqui na pasta www e vamos acessar esse arquivo aqui no navegador. Vamos clicar com o botão direito, vamos em New, vamos em Text Document, e vamos digitar: teste. Vamos deixar esse arquivo como teste.txt mesmo. Não vamos colocar a URL PHP ou HTML. Então agora vamos dar 2 cliques no nosso arquivo teste.txt e aqui vamos colocar: testando um arquivo texto. Vamos salvar, vamos fechar, então agora nós temos que dentro do diretório C:\wamp\www\ possui um arquivo chamado teste.txt. Se nós quisermos acessar esse arquivo no navegador, basta somente nós colocarmos lá na URL que nós queremos acessar esse arquivo. Então vamos ir aqui no navegador, vamos ir aqui no final, localhost, e vamos colocar, teste.txt. Agora vamos pressionar Enter, e olha só, nós temos que nós acessamos o arquivo teste.txt que está armazenado no diretório C:\wamp\www\ nós terminamos essa aula com a seguinte ideia. Todos os arquivos que forem pertinentes a um site eles devem estar contidos dentro de uma pasta e esta pasta deve estar contida dentro do diretório www. Ou seja, cada diretório que nós criarmos aqui dentro ele pode ser acessando, utilizando uma barra seguida do nome do diretório. Então é isso ai pessoal! Nessa aula nós aprendemos uma parte conceitual muito importante no desenvolvimento web. A verdade, é que essa parte inicial ela é bem conceitual, porém, se você não assimilar bem esses conceitos, no futuro você irá deixar de entender vários conceitos porque você não entendeu o conceito fundamental. É super importante você entender a relação que existe entre a URL que nós digitamos e o diretório que será acessado. Cada site ele está vinculado a um diretório, e nós vimos isso na prática. Porém, dentro do nosso diretório www não contém nenhuma pasta isso porque, nós ainda não desenvolvemos nenhum site. Então é isso ai pessoal! Vejo vocês na nossa próxima aula, muito obrigado e até mais, tchau!!&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="solucao-de-problemas"&gt;
&lt;h2&gt;SOLUÇÃO DE PROBLEMAS&lt;/h2&gt;
&lt;p&gt;Se você estiver tendo problemas, faça alguns testes a fim de tentar entender qual o problema.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;digite localhost em seu computador e veja se está sendo exibido a página local do Apache&lt;/li&gt;
&lt;li&gt;averigue se o arquivo teste.txt está contido na respectiva pasta: C:wampwww&lt;/li&gt;
&lt;li&gt;verifique se o nome do arquivo teste.txt está escrito da maneira correta&lt;/li&gt;
&lt;li&gt;certifique-se de que não utilizou letras maiúsculas no nome do arquivo &amp;quot;teste.txt&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="apache"&gt;
&lt;h2&gt;APACHE&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.apache.org/"&gt;http://www.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="documentacao-apache"&gt;
&lt;h2&gt;DOCUMENTAÇÃO APACHE&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://httpd.apache.org/docs-project/"&gt;http://httpd.apache.org/docs-project/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="url"></category><category term="apache"></category></entry><entry><title>Instalando PHPStorm no Windows</title><link href="http://excript.com/php/instalando-phpstorm-no-windows.html" rel="alternate"></link><published>2014-10-02T11:28:00-03:00</published><updated>2014-10-02T11:28:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2014-10-02:/php/instalando-phpstorm-no-windows.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a fazer o download e como instalar a IDE PHPStorm no Sistema Operacional Windows.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="o-phpstorm"&gt;
&lt;h2&gt;O PHPStorm&lt;/h2&gt;
&lt;p&gt;O que é uma IDE? Como instalar o PHPStorm? Nessa aula, vamos estudar como que nós podemos instalar o PHPStorm em nosso computador, bem como, como podemos baixá-lo e executá-lo. Fato …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a fazer o download e como instalar a IDE PHPStorm no Sistema Operacional Windows.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="o-phpstorm"&gt;
&lt;h2&gt;O PHPStorm&lt;/h2&gt;
&lt;p&gt;O que é uma IDE? Como instalar o PHPStorm? Nessa aula, vamos estudar como que nós podemos instalar o PHPStorm em nosso computador, bem como, como podemos baixá-lo e executá-lo. Fato é, que não somos obrigados a utilizar uma IDE, porém, o seu uso é muito importante para que possamos desenvolver mais rapidamente e também, para que possamos por exemplo, depurar o nosso código de programação.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="phpstorm"&gt;
&lt;h2&gt;PHPStorm&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.jetbrains.com/phpstorm/download/"&gt;https://www.jetbrains.com/phpstorm/download/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="ide"></category><category term="phpstorm"></category><category term="instalando o phpstorm"></category></entry><entry><title>Como instalar o WAMP no Windows - Curso de PHP</title><link href="http://excript.com/php/como-instalar-o-wamp-no-windows-php.html" rel="alternate"></link><published>2014-10-01T11:15:00-03:00</published><updated>2014-10-01T11:15:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2014-10-01:/php/como-instalar-o-wamp-no-windows-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o que significa WAMP, porque devemos utiliza-lo, onde podemos fazer o download e como executar a instalação do mesmo.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="wamp"&gt;
&lt;h2&gt;WAMP&lt;/h2&gt;
&lt;p&gt;Como instalar o WAMP? A instalação do WAMP funciona de maneira automática, logo, o que é necessário que façamos é baixar a instalação e então, dar um …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula estudaremos o que significa WAMP, porque devemos utiliza-lo, onde podemos fazer o download e como executar a instalação do mesmo.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="wamp"&gt;
&lt;h2&gt;WAMP&lt;/h2&gt;
&lt;p&gt;Como instalar o WAMP? A instalação do WAMP funciona de maneira automática, logo, o que é necessário que façamos é baixar a instalação e então, dar um duplo clique no executável.&lt;/p&gt;
&lt;p&gt;Para baixar o executável do WAMP, vá no site: &lt;a class="reference external" href="http://www.wampserver.com/"&gt;http://www.wampserver.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Após a conclusão do download, clique duas vezes no executável e pressione NEXT até o final.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dica-fornecida-pelo-usuario-jhon-sidney"&gt;
&lt;h2&gt;DICA FORNECIDA PELO usuário: Jhon Sidney&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="dica-1"&gt;
&lt;h2&gt;DICA 1&lt;/h2&gt;
&lt;p&gt;Algumas pessoas quando tentam colocar o executável aparece um erro informando que não encontrou &lt;cite&gt;MSVCR 110.dll&lt;/cite&gt;. Para acabar com esse problema, acessem o site da microsoft e façam o download do  &lt;cite&gt;MSVCP110.dll&lt;/cite&gt; - Microsoft Visual C + + 2012&lt;/p&gt;
&lt;p&gt;site do download: &lt;a class="reference external" href="https://www.microsoft.com/en-us/download/details.aspx?id=30679"&gt;https://www.microsoft.com/en-us/download/details.aspx?id=30679&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dica-2"&gt;
&lt;h2&gt;DICA 2&lt;/h2&gt;
&lt;p&gt;Algumas pessoas tentam instalar o &lt;cite&gt;WAMP&lt;/cite&gt; mas no momento em que iniciam o servidor, recebem a mensagem:
&amp;quot;Could not execute menu item (internal error) [Exception] Could not perform service action: O serviço não foi iniciado”.&lt;/p&gt;
&lt;p&gt;Esse erro, geralmente é decorrente de uma incompatibilidade com o skype. Para resolver o problema, basta alterar a porta do Skype e então, tentar abrir o servidor APACHE novamente.&lt;/p&gt;
&lt;p&gt;Para alterar a porta do Skype, vá em Ferramentas -&amp;gt; Opções -&amp;gt; avançado -&amp;gt; Conexões feito isso, procure pelo campo porta e altere a porta de 80 para 10080.&lt;/p&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="wamp"></category><category term="instalar o wamp"></category></entry><entry><title>Ambiente de Desenvolvimento PHP</title><link href="http://excript.com/php/ambiente-desenvolvimento-php.html" rel="alternate"></link><published>2014-09-28T22:43:00-03:00</published><updated>2014-09-28T22:43:00-03:00</updated><author><name>Cláudio Rogério Carvalho Filho</name></author><id>tag:excript.com,2014-09-28:/php/ambiente-desenvolvimento-php.html</id><summary type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a construir nosso ambiente de desenvolvimento PHP, bem como os programas que devem ser instalados e as demais configurações.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="construindo-o-ambiente-de-desenvolvimento"&gt;
&lt;h2&gt;CONSTRUINDO O AMBIENTE DE DESENVOLVIMENTO&lt;/h2&gt;
&lt;p&gt;Como montar um ambiente de desenvolvimento em PHP?
Agora, vamos estudar todos os programas e configurações que são necessários para que possamos programar …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
    &lt;div class="admonitionblock note data-line" style="margin-top: 1.50em"&gt;
        &lt;table style="margin: 0"&gt;
            &lt;tbody&gt;
                &lt;tr&gt;
                    &lt;td class="content" style="border-left: 0"&gt;
                        &lt;div class="paragraph data-line"&gt;
                            &lt;p&gt; Nesta aula aprenderemos a construir nosso ambiente de desenvolvimento PHP, bem como os programas que devem ser instalados e as demais configurações.&lt;/p&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;div class="section" id="construindo-o-ambiente-de-desenvolvimento"&gt;
&lt;h2&gt;CONSTRUINDO O AMBIENTE DE DESENVOLVIMENTO&lt;/h2&gt;
&lt;p&gt;Como montar um ambiente de desenvolvimento em PHP?
Agora, vamos estudar todos os programas e configurações que são necessários para que possamos programar em PHP voltados para a WEB. Assim, aprenderemos a baixar algumas ferramenta e também, aprenderemos a instala-las. Essa é uma aula conceitual sobre a montagem do ambiente de desenvolvimento, na próximas aulas, abordaremos tudo o que aqui estudarmos na prática.&lt;/p&gt;
&lt;p&gt;Fato é, que devemos ter um conjunto de programas e uma determinada configuração para que sejamos mais produtivos. Isso porque, até é possível programarmos e enviarmos os nosso códigos a todo momento para o servidor. Porém, isso atrasa o desenvolvimento e faz com que sejamos menos produtivos. Logo, o melhor a se fazer é construir um ambiente de desenvolvimento eficaz, com um servidor local para que possamos facilmente enviar e receber requisições.&lt;/p&gt;
&lt;/div&gt;
</content><category term="curso php"></category><category term="curso"></category><category term="php"></category><category term="ambiente de desenvolvimento php"></category></entry></feed>